{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"JetBrains Mono\", \"Consolas\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"pulse-green\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse-green\": \"pulse-green 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3092},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/githubClient.ts":{"content":"import { Octokit } from '@octokit/rest'\n\nlet connectionSettings: any;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=github',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n  if (!connectionSettings || !accessToken) {\n    throw new Error('GitHub not connected');\n  }\n  return accessToken;\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nexport async function getUncachableGitHubClient() {\n  const accessToken = await getAccessToken();\n  return new Octokit({ auth: accessToken });\n}\n","size_bytes":1510},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { LLMService } from \"./services/llm-service\";\nimport { SearchService } from \"./services/search-service\";\nimport { FileService } from \"./services/file-service\";\nimport { GitHubService } from \"./services/github-service\";\nimport { TemplateService } from \"./services/template-service\";\nimport { ProjectGeneratorService } from \"./services/project-generator\";\nimport multer from \"multer\";\nimport { z } from \"zod\";\nimport { \n  insertConversationSchema,\n  insertMessageSchema,\n  insertProjectSchema,\n  insertLLMConfigurationSchema,\n  insertSearchEngineSchema,\n  insertUserPreferencesSchema,\n  insertUserSchema,\n  insertProjectTemplateSchema\n} from \"@shared/schema\";\n\n// Validation schema for project generation request\nconst generateProjectSchema = z.object({\n  projectName: z.string().min(1, \"Project name is required\").max(100, \"Project name too long\"),\n  description: z.string().max(500, \"Description too long\").optional()\n});\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const llmService = new LLMService();\n  const searchService = new SearchService();\n  const fileService = new FileService();\n  const githubService = new GitHubService();\n  const templateService = new TemplateService();\n  const projectGenerator = new ProjectGeneratorService();\n\n  // Initialize default templates if none exist\n  await templateService.initializeDefaultTemplates();\n\n  // Simple session-based auth (for demo purposes)\n  const sessionStore = new Map();\n\n  // Authentication middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    const sessionId = req.headers['x-session-id'];\n    if (!sessionId || !sessionStore.has(sessionId)) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n    req.user = sessionStore.get(sessionId);\n    next();\n  };\n\n  // Get current user endpoint\n  app.get('/api/auth/me', requireAuth, (req: any, res: any) => {\n    res.json({ user: req.user });\n  });\n\n  // Auto-login for development (creates demo user if none exists)\n  app.post('/api/auth/demo-login', async (req: any, res: any) => {\n    try {\n      let user = await storage.getUserByUsername('demo-user');\n      \n      if (!user) {\n        user = await storage.createUser({\n          username: 'demo-user',\n          password: 'demo' // In production, this should be hashed\n        });\n      }\n      \n      const sessionId = `session_${Date.now()}_${Math.random()}`;\n      sessionStore.set(sessionId, user);\n      \n      res.json({ user, sessionId });\n    } catch (error) {\n      console.error('Demo login error:', error);\n      res.status(500).json({ error: 'Login failed' });\n    }\n  });\n\n  // Helper function to get userId from request\n  const getUserId = (req: any): string => {\n    // For development, use demo user or create one\n    return req.user?.id || 'demo-user';\n  };\n\n  // Conversations\n  app.get(\"/api/conversations\", async (req, res) => {\n    try {\n      const userId = getUserId(req);\n      const conversations = await storage.getConversationsByUserId(userId);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ error: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.post(\"/api/conversations\", async (req, res) => {\n    try {\n      const userId = getUserId(req);\n      const data = insertConversationSchema.parse({ ...req.body, userId });\n      const conversation = await storage.createConversation(data);\n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Error creating conversation:\", error);\n      res.status(500).json({ error: \"Failed to create conversation\" });\n    }\n  });\n\n  app.delete(\"/api/conversations/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteConversation(id);\n      if (success) {\n        res.json({ success: true });\n      } else {\n        res.status(404).json({ error: \"Conversation not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting conversation:\", error);\n      res.status(500).json({ error: \"Failed to delete conversation\" });\n    }\n  });\n\n  // Messages\n  app.get(\"/api/conversations/:id/messages\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const messages = await storage.getMessagesByConversationId(id);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ error: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/messages\", async (req, res) => {\n    try {\n      const data = insertMessageSchema.parse(req.body);\n      const message = await storage.createMessage(data);\n      \n      // Update conversation timestamp\n      await storage.updateConversation(data.conversationId!, { updatedAt: new Date() });\n      \n      res.json(message);\n    } catch (error) {\n      console.error(\"Error creating message:\", error);\n      res.status(500).json({ error: \"Failed to create message\" });\n    }\n  });\n\n  // LLM Integration\n  app.post(\"/api/llm/chat\", async (req, res) => {\n    try {\n      const { configId, messages, temperature, maxTokens } = req.body;\n      \n      const config = await storage.getLLMConfiguration(configId);\n      if (!config) {\n        return res.status(404).json({ error: \"LLM configuration not found\" });\n      }\n\n      const response = await llmService.sendMessage(config, {\n        messages,\n        temperature,\n        maxTokens,\n      });\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"Error in LLM chat:\", error);\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to process LLM request\" });\n    }\n  });\n\n  app.post(\"/api/llm/test-connection\", async (req, res) => {\n    try {\n      const { endpoint, model } = req.body;\n      \n      if (!endpoint || !model) {\n        return res.status(400).json({ error: \"endpoint and model are required\" });\n      }\n\n      const isConnected = await llmService.testConnection(endpoint, model);\n      res.json({ connected: isConnected });\n    } catch (error) {\n      console.error(\"Error testing LLM connection:\", error);\n      res.status(500).json({ error: \"Failed to test LLM connection\" });\n    }\n  });\n\n  app.get(\"/api/llm/models\", async (req, res) => {\n    try {\n      const { endpoint } = req.query;\n      \n      if (!endpoint || typeof endpoint !== 'string') {\n        return res.status(400).json({ error: \"endpoint is required\" });\n      }\n\n      const models = await llmService.getAvailableModels(endpoint);\n      res.json({ models });\n    } catch (error) {\n      console.error(\"Error fetching models:\", error);\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch models\" });\n    }\n  });\n\n  // LLM Configurations\n  app.get(\"/api/llm-configurations\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      \n      const configs = await storage.getLLMConfigurationsByUserId(userId);\n      res.json(configs);\n    } catch (error) {\n      console.error(\"Error fetching LLM configurations:\", error);\n      res.status(500).json({ error: \"Failed to fetch LLM configurations\" });\n    }\n  });\n\n  app.post(\"/api/llm-configurations\", async (req, res) => {\n    try {\n      const data = insertLLMConfigurationSchema.parse(req.body);\n      const config = await storage.createLLMConfiguration(data);\n      res.json(config);\n    } catch (error) {\n      console.error(\"Error creating LLM configuration:\", error);\n      res.status(500).json({ error: \"Failed to create LLM configuration\" });\n    }\n  });\n\n  app.put(\"/api/llm-configurations/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const config = await storage.updateLLMConfiguration(id, updates);\n      \n      if (config) {\n        res.json(config);\n      } else {\n        res.status(404).json({ error: \"LLM configuration not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error updating LLM configuration:\", error);\n      res.status(500).json({ error: \"Failed to update LLM configuration\" });\n    }\n  });\n\n  app.delete(\"/api/llm-configurations/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteLLMConfiguration(id);\n      \n      if (success) {\n        res.json({ success: true });\n      } else {\n        res.status(404).json({ error: \"LLM configuration not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting LLM configuration:\", error);\n      res.status(500).json({ error: \"Failed to delete LLM configuration\" });\n    }\n  });\n\n  // Search\n  app.post(\"/api/search\", async (req, res) => {\n    try {\n      const { query, userId, maxResults = 10 } = req.body;\n      \n      if (!query) {\n        return res.status(400).json({ error: \"query is required\" });\n      }\n\n      const engines = await storage.getEnabledSearchEngines(userId);\n      const results = await searchService.search(engines, query, maxResults);\n      \n      // Add informational message if no results and engines are missing API keys\n      if (results.totalResults === 0 && engines.length > 0) {\n        const missingKeys = engines.filter(engine => \n          (engine.name.toLowerCase() === 'google' && (!engine.apiKey && !process.env.GOOGLE_API_KEY)) ||\n          (engine.name.toLowerCase() === 'bing' && (!engine.apiKey && !process.env.BING_API_KEY))\n        );\n        \n        if (missingKeys.length > 0) {\n          results.message = `No results found. ${missingKeys.map(e => e.name).join(', ')} require${missingKeys.length === 1 ? 's' : ''} API key configuration.`;\n        }\n      }\n      \n      res.json(results);\n    } catch (error) {\n      console.error(\"Error performing search:\", error);\n      res.status(500).json({ error: \"Failed to perform search\" });\n    }\n  });\n\n  app.post(\"/api/search/fetch-content\", async (req, res) => {\n    try {\n      const { url } = req.body;\n      \n      if (!url) {\n        return res.status(400).json({ error: \"url is required\" });\n      }\n\n      const content = await searchService.fetchWebContent(url);\n      res.json({ content });\n    } catch (error) {\n      console.error(\"Error fetching web content:\", error);\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch web content\" });\n    }\n  });\n\n  // Search Engines\n  app.get(\"/api/search-engines\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const engines = await storage.getSearchEnginesByUserId(userId || \"\");\n      // Don't return API keys for security - only indicate if they exist\n      const safeEngines = engines.map(engine => ({\n        ...engine,\n        hasApiKey: !!engine.apiKey,\n        apiKey: undefined\n      }));\n      res.json(safeEngines);\n    } catch (error) {\n      console.error(\"Error fetching search engines:\", error);\n      res.status(500).json({ error: \"Failed to fetch search engines\" });\n    }\n  });\n\n  app.put(\"/api/search-engines/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const engine = await storage.updateSearchEngine(id, updates);\n      \n      if (engine) {\n        res.json(engine);\n      } else {\n        res.status(404).json({ error: \"Search engine not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error updating search engine:\", error);\n      res.status(500).json({ error: \"Failed to update search engine\" });\n    }\n  });\n\n  // User Preferences\n  app.get(\"/api/user-preferences\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      \n      const preferences = await storage.getUserPreferences(userId);\n      res.json(preferences);\n    } catch (error) {\n      console.error(\"Error fetching user preferences:\", error);\n      res.status(500).json({ error: \"Failed to fetch user preferences\" });\n    }\n  });\n\n  app.put(\"/api/user-preferences\", async (req, res) => {\n    try {\n      const { userId, ...updates } = req.body;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      \n      const preferences = await storage.updateUserPreferences(userId, updates);\n      if (preferences) {\n        res.json(preferences);\n      } else {\n        res.status(404).json({ error: \"User preferences not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error updating user preferences:\", error);\n      res.status(500).json({ error: \"Failed to update user preferences\" });\n    }\n  });\n\n  // Data management endpoints\n  app.post(\"/api/data/export\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n\n      const userData = {\n        conversations: await storage.getConversationsByUserId(userId),\n        projects: await storage.getProjectsByUserId(userId),\n        files: await storage.getFilesByUserId(userId),\n        llmConfigurations: await storage.getLLMConfigurationsByUserId(userId),\n        searchEngines: await storage.getSearchEnginesByUserId(userId),\n        preferences: await storage.getUserPreferences(userId),\n        exportDate: new Date().toISOString(),\n      };\n\n      res.json(userData);\n    } catch (error) {\n      console.error(\"Error exporting data:\", error);\n      res.status(500).json({ error: \"Failed to export data\" });\n    }\n  });\n\n  app.post(\"/api/data/clear-cache\", async (req, res) => {\n    try {\n      // In a real implementation, this would clear actual cache\n      res.json({ success: true, message: \"Cache cleared successfully\" });\n    } catch (error) {\n      console.error(\"Error clearing cache:\", error);\n      res.status(500).json({ error: \"Failed to clear cache\" });\n    }\n  });\n\n  app.post(\"/api/data/reset-settings\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n\n      // Reset to default preferences\n      const defaultPrefs = {\n        theme: \"dark\",\n        compactMode: false,\n        animations: true,\n        fontSize: \"medium\",\n        codeFont: \"jetbrains\",\n        maxConcurrentRequests: 5,\n        cacheDuration: 30,\n        autoSaveConversations: true,\n        analyticsCollection: false,\n      };\n\n      const preferences = await storage.updateUserPreferences(userId, defaultPrefs);\n      res.json(preferences);\n    } catch (error) {\n      console.error(\"Error resetting settings:\", error);\n      res.status(500).json({ error: \"Failed to reset settings\" });\n    }\n  });\n\n  // File Upload and Analysis\n  app.post(\"/api/files/upload\", upload.single('file'), async (req, res) => {\n    try {\n      const { userId } = req.body;\n      const file = req.file;\n      \n      if (!file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n\n      const savedFile = await fileService.saveFile(\n        userId,\n        file.originalname,\n        file.buffer,\n        file.mimetype\n      );\n\n      res.json(savedFile);\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      res.status(500).json({ error: \"Failed to upload file\" });\n    }\n  });\n\n  app.get(\"/api/files\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      \n      const files = await storage.getFilesByUserId(userId);\n      res.json(files);\n    } catch (error) {\n      console.error(\"Error fetching files:\", error);\n      res.status(500).json({ error: \"Failed to fetch files\" });\n    }\n  });\n\n  app.get(\"/api/files/:id/content\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const file = await storage.getFile(id);\n      \n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n\n      const content = await fileService.getFileContent(file);\n      \n      res.set({\n        'Content-Type': file.mimeType,\n        'Content-Disposition': `attachment; filename=\"${file.originalName}\"`,\n      });\n      \n      res.send(content);\n    } catch (error) {\n      console.error(\"Error fetching file content:\", error);\n      res.status(500).json({ error: \"Failed to fetch file content\" });\n    }\n  });\n\n  app.delete(\"/api/files/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await fileService.deleteFile(id);\n      \n      if (success) {\n        res.json({ success: true });\n      } else {\n        res.status(404).json({ error: \"File not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting file:\", error);\n      res.status(500).json({ error: \"Failed to delete file\" });\n    }\n  });\n\n  // Projects\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      \n      const projects = await storage.getProjectsByUserId(userId);\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      res.status(500).json({ error: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const data = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(data);\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error creating project:\", error);\n      res.status(500).json({ error: \"Failed to create project\" });\n    }\n  });\n\n  app.put(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const project = await storage.updateProject(id, updates);\n      \n      if (project) {\n        res.json(project);\n      } else {\n        res.status(404).json({ error: \"Project not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error updating project:\", error);\n      res.status(500).json({ error: \"Failed to update project\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteProject(id);\n      \n      if (success) {\n        res.json({ success: true });\n      } else {\n        res.status(404).json({ error: \"Project not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting project:\", error);\n      res.status(500).json({ error: \"Failed to delete project\" });\n    }\n  });\n\n  // GitHub Integration\n  app.get(\"/api/github/repositories\", async (req, res) => {\n    try {\n      const repositories = await githubService.getUserRepositories();\n      res.json(repositories);\n    } catch (error) {\n      console.error(\"Error fetching GitHub repositories:\", error);\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch repositories\" });\n    }\n  });\n\n  app.get(\"/api/github/repositories/:owner/:repo/contents\", async (req, res) => {\n    try {\n      const { owner, repo } = req.params;\n      const { path = \"\" } = req.query;\n      \n      const contents = await githubService.getRepositoryContents(owner, repo, path as string);\n      res.json(contents);\n    } catch (error) {\n      console.error(\"Error fetching repository contents:\", error);\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to fetch repository contents\" });\n    }\n  });\n\n  app.get(\"/api/github/repositories/:owner/:repo/analyze\", async (req, res) => {\n    try {\n      const { owner, repo } = req.params;\n      \n      const analysis = await githubService.analyzeRepository(owner, repo);\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Error analyzing repository:\", error);\n      \n      // Provide more specific error messaging\n      let errorMessage = \"Failed to analyze repository\";\n      if (error instanceof Error) {\n        if (error.message.includes('GitHub not connected') || error.message.includes('X_REPLIT_TOKEN not found')) {\n          errorMessage = \"GitHub authentication not configured. Please set up GitHub integration in your Replit account.\";\n        } else if (error.message.includes('403') || error.message.includes('rate limit')) {\n          errorMessage = \"GitHub API rate limit exceeded or access denied. Please try again later.\";\n        } else if (error.message.includes('404')) {\n          errorMessage = \"Repository not found or not accessible. Please check the repository URL and permissions.\";\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      res.status(500).json({ error: errorMessage });\n    }\n  });\n\n  app.post(\"/api/github/repositories\", async (req, res) => {\n    try {\n      const { name, description, private: isPrivate = false } = req.body;\n      \n      if (!name) {\n        return res.status(400).json({ error: \"Repository name is required\" });\n      }\n\n      const repository = await githubService.createRepository(name, description, isPrivate);\n      res.json(repository);\n    } catch (error) {\n      console.error(\"Error creating repository:\", error);\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to create repository\" });\n    }\n  });\n\n  // Project Templates API\n  app.get(\"/api/project-templates\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      \n      let templates;\n      if (category && typeof category === 'string') {\n        templates = await storage.getProjectTemplatesByCategory(category);\n      } else {\n        templates = await storage.getProjectTemplates();\n      }\n      \n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching project templates:\", error);\n      res.status(500).json({ error: \"Failed to fetch project templates\" });\n    }\n  });\n\n  app.get(\"/api/project-templates/:id\", async (req, res) => {\n    try {\n      const template = await storage.getProjectTemplate(req.params.id);\n      if (!template) {\n        return res.status(404).json({ error: \"Project template not found\" });\n      }\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error fetching project template:\", error);\n      res.status(500).json({ error: \"Failed to fetch project template\" });\n    }\n  });\n\n  app.post(\"/api/project-templates\", async (req, res) => {\n    try {\n      const templateData = insertProjectTemplateSchema.parse(req.body);\n      const template = await storage.createProjectTemplate(templateData);\n      res.status(201).json(template);\n    } catch (error) {\n      console.error(\"Error creating project template:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid template data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: \"Failed to create project template\" });\n      }\n    }\n  });\n\n  app.post(\"/api/project-templates/:id/generate\", requireAuth, async (req, res) => {\n    try {\n      // Validate request body with Zod\n      const validationResult = generateProjectSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          error: \"Invalid request data\", \n          details: validationResult.error.errors \n        });\n      }\n\n      const { projectName, description } = validationResult.data;\n      const templateId = req.params.id;\n\n      // Check if template exists\n      const template = await storage.getProjectTemplate(templateId);\n      if (!template) {\n        return res.status(404).json({ error: \"Template not found\" });\n      }\n\n      const userId = getUserId(req);\n      const result = await projectGenerator.generateProjectFromTemplate(\n        templateId,\n        projectName.trim(),\n        description?.trim() || '',\n        userId\n      );\n\n      // Return the generated project with download information\n      res.json({\n        project: result.project,\n        downloadUrl: result.downloadUrl,\n        message: \"Project generated successfully! Files have been created and packaged for download.\"\n      });\n    } catch (error) {\n      console.error(\"Error generating project from template:\", error);\n      const message = error instanceof Error ? error.message : \"Failed to generate project from template\";\n      \n      // Return appropriate status code based on error type\n      if (message.includes('not found')) {\n        return res.status(404).json({ error: message });\n      }\n      if (message.includes('Path traversal') || message.includes('Absolute paths') || message.includes('Path escapes')) {\n        return res.status(400).json({ error: \"Invalid file path in template\" });\n      }\n      \n      res.status(500).json({ error: message });\n    }\n  });\n\n  // Project download endpoint\n  app.get(\"/api/download/project/:id\", requireAuth, async (req, res) => {\n    try {\n      const projectId = req.params.id;\n      \n      // Validate project ID format (should be UUID)\n      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n      if (!uuidRegex.test(projectId)) {\n        return res.status(400).json({ error: \"Invalid project ID format\" });\n      }\n\n      // Check if project exists and user owns it\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n\n      const userId = getUserId(req);\n      if (project.userId !== userId) {\n        return res.status(403).json({ error: \"Access denied: you don't own this project\" });\n      }\n\n      const zipPath = await projectGenerator.getProjectDownload(projectId);\n      \n      if (!zipPath) {\n        return res.status(404).json({ error: \"Project download not found\" });\n      }\n\n      const filename = `${project.name.toLowerCase().replace(/\\s+/g, '-')}.zip`;\n\n      res.setHeader('Content-Type', 'application/zip');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.download(zipPath);\n    } catch (error) {\n      console.error(\"Error downloading project:\", error);\n      res.status(500).json({ error: \"Failed to download project\" });\n    }\n  });\n\n  // Export functionality\n  app.post(\"/api/export/conversation\", async (req, res) => {\n    try {\n      const { conversationId, format = 'json' } = req.body;\n      \n      const conversation = await storage.getConversation(conversationId);\n      if (!conversation) {\n        return res.status(404).json({ error: \"Conversation not found\" });\n      }\n\n      const messages = await storage.getMessagesByConversationId(conversationId);\n      \n      const exportData = {\n        conversation,\n        messages,\n        exportedAt: new Date().toISOString(),\n      };\n\n      if (format === 'json') {\n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('Content-Disposition', `attachment; filename=\"conversation-${conversationId}.json\"`);\n        res.json(exportData);\n      } else if (format === 'markdown') {\n        let markdown = `# ${conversation.title}\\n\\n`;\n        markdown += `**Created:** ${conversation.createdAt}\\n`;\n        markdown += `**Updated:** ${conversation.updatedAt}\\n\\n`;\n        \n        messages.forEach(message => {\n          markdown += `## ${message.role.charAt(0).toUpperCase() + message.role.slice(1)}\\n\\n`;\n          markdown += `${message.content}\\n\\n`;\n          markdown += `*${message.createdAt}*\\n\\n---\\n\\n`;\n        });\n\n        res.setHeader('Content-Type', 'text/markdown');\n        res.setHeader('Content-Disposition', `attachment; filename=\"conversation-${conversationId}.md\"`);\n        res.send(markdown);\n      } else {\n        res.status(400).json({ error: \"Unsupported export format. Use 'json' or 'markdown'\" });\n      }\n    } catch (error) {\n      console.error(\"Error exporting conversation:\", error);\n      res.status(500).json({ error: \"Failed to export conversation\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":28487},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Conversation,\n  type InsertConversation,\n  type Message,\n  type InsertMessage,\n  type Project,\n  type InsertProject,\n  type File,\n  type InsertFile,\n  type LLMConfiguration,\n  type InsertLLMConfiguration,\n  type SearchEngine,\n  type InsertSearchEngine,\n  type UserPreferences,\n  type InsertUserPreferences,\n  type ProjectTemplate,\n  type InsertProjectTemplate,\n  type ProjectPlanVersion,\n  type InsertProjectPlanVersion,\n  users,\n  conversations,\n  messages,\n  projects,\n  files,\n  llmConfigurations,\n  searchEngines,\n  userPreferences,\n  projectTemplates,\n  projectPlanVersions\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Conversation methods\n  getConversation(id: string): Promise<Conversation | undefined>;\n  getConversationsByUserId(userId: string): Promise<Conversation[]>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: string, updates: Partial<Conversation>): Promise<Conversation | undefined>;\n  deleteConversation(id: string): Promise<boolean>;\n\n  // Message methods\n  getMessage(id: string): Promise<Message | undefined>;\n  getMessagesByConversationId(conversationId: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  deleteMessage(id: string): Promise<boolean>;\n\n  // Project methods\n  getProject(id: string): Promise<Project | undefined>;\n  getProjectsByUserId(userId: string): Promise<Project[]>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, updates: Partial<Project>): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n\n  // File methods\n  getFile(id: string): Promise<File | undefined>;\n  getFilesByUserId(userId: string): Promise<File[]>;\n  createFile(file: InsertFile): Promise<File>;\n  updateFile(id: string, updates: Partial<File>): Promise<File | undefined>;\n  deleteFile(id: string): Promise<boolean>;\n\n  // LLM Configuration methods\n  getLLMConfiguration(id: string): Promise<LLMConfiguration | undefined>;\n  getLLMConfigurationsByUserId(userId: string): Promise<LLMConfiguration[]>;\n  getDefaultLLMConfiguration(userId: string): Promise<LLMConfiguration | undefined>;\n  createLLMConfiguration(config: InsertLLMConfiguration): Promise<LLMConfiguration>;\n  updateLLMConfiguration(id: string, updates: Partial<LLMConfiguration>): Promise<LLMConfiguration | undefined>;\n  deleteLLMConfiguration(id: string): Promise<boolean>;\n\n  // Search Engine methods\n  getSearchEngine(id: string): Promise<SearchEngine | undefined>;\n  getSearchEnginesByUserId(userId: string): Promise<SearchEngine[]>;\n  getEnabledSearchEngines(userId: string): Promise<SearchEngine[]>;\n  createSearchEngine(engine: InsertSearchEngine): Promise<SearchEngine>;\n  updateSearchEngine(id: string, updates: Partial<SearchEngine>): Promise<SearchEngine | undefined>;\n  deleteSearchEngine(id: string): Promise<boolean>;\n\n  // User Preferences methods\n  getUserPreferences(userId: string): Promise<UserPreferences | undefined>;\n  createUserPreferences(preferences: InsertUserPreferences): Promise<UserPreferences>;\n  updateUserPreferences(userId: string, updates: Partial<UserPreferences>): Promise<UserPreferences | undefined>;\n\n  // Project Template methods\n  getProjectTemplate(id: string): Promise<ProjectTemplate | undefined>;\n  getProjectTemplates(): Promise<ProjectTemplate[]>;\n  getProjectTemplatesByCategory(category: string): Promise<ProjectTemplate[]>;\n  createProjectTemplate(template: InsertProjectTemplate): Promise<ProjectTemplate>;\n  updateProjectTemplate(id: string, updates: Partial<ProjectTemplate>): Promise<ProjectTemplate | undefined>;\n  deleteProjectTemplate(id: string): Promise<boolean>;\n\n  // Project Plan Version methods\n  getProjectPlanVersion(id: string): Promise<ProjectPlanVersion | undefined>;\n  getProjectPlanVersionsByProjectId(projectId: string): Promise<ProjectPlanVersion[]>;\n  getLatestProjectPlanVersion(projectId: string): Promise<ProjectPlanVersion | undefined>;\n  createProjectPlanVersion(version: InsertProjectPlanVersion): Promise<ProjectPlanVersion>;\n  updateProjectPlanVersion(id: string, updates: Partial<ProjectPlanVersion>): Promise<ProjectPlanVersion | undefined>;\n  deleteProjectPlanVersion(id: string): Promise<boolean>;\n  getProjectPlanVersionHistory(projectId: string): Promise<ProjectPlanVersion[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private conversations: Map<string, Conversation>;\n  private messages: Map<string, Message>;\n  private projects: Map<string, Project>;\n  private files: Map<string, File>;\n  private llmConfigurations: Map<string, LLMConfiguration>;\n  private searchEngines: Map<string, SearchEngine>;\n  private userPreferences: Map<string, UserPreferences>;\n  private projectTemplates: Map<string, ProjectTemplate>;\n  private projectPlanVersions: Map<string, ProjectPlanVersion>;\n\n  constructor() {\n    this.users = new Map();\n    this.conversations = new Map();\n    this.messages = new Map();\n    this.projects = new Map();\n    this.files = new Map();\n    this.llmConfigurations = new Map();\n    this.searchEngines = new Map();\n    this.userPreferences = new Map();\n    this.projectTemplates = new Map();\n    this.projectPlanVersions = new Map();\n\n    // Initialize with default search engines and LLM configurations\n    this.initializeDefaultSearchEngines();\n    this.initializeDefaultLLMConfiguration();\n  }\n\n  private initializeDefaultSearchEngines() {\n    const defaultEngines = [\n      { name: \"Google\", enabled: true, apiKey: null },\n      { name: \"Bing\", enabled: true, apiKey: null },\n      { name: \"DuckDuckGo\", enabled: false, apiKey: null }\n    ];\n\n    defaultEngines.forEach(engine => {\n      const id = randomUUID();\n      this.searchEngines.set(id, {\n        id,\n        userId: null,\n        ...engine,\n        createdAt: new Date()\n      });\n    });\n  }\n\n  private initializeDefaultLLMConfiguration() {\n    const id = randomUUID();\n    const defaultConfig: LLMConfiguration = {\n      id,\n      userId: null, // Global default configuration\n      name: \"Ollama Local\",\n      endpoint: \"http://localhost:11434\",\n      model: \"llama2-7b-chat\",\n      temperature: 70, // 0.7 * 100\n      maxTokens: 2048,\n      isDefault: true,\n      createdAt: new Date()\n    };\n    \n    this.llmConfigurations.set(id, defaultConfig);\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Conversation methods\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    return this.conversations.get(id);\n  }\n\n  async getConversationsByUserId(userId: string): Promise<Conversation[]> {\n    return Array.from(this.conversations.values())\n      .filter(conv => conv.userId === userId)\n      .sort((a, b) => b.updatedAt!.getTime() - a.updatedAt!.getTime());\n  }\n\n  async createConversation(insertConversation: InsertConversation): Promise<Conversation> {\n    const id = randomUUID();\n    const now = new Date();\n    const conversation: Conversation = {\n      userId: insertConversation.userId || null,\n      title: insertConversation.title,\n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.conversations.set(id, conversation);\n    return conversation;\n  }\n\n  async updateConversation(id: string, updates: Partial<Conversation>): Promise<Conversation | undefined> {\n    const conversation = this.conversations.get(id);\n    if (!conversation) return undefined;\n\n    const updated = { ...conversation, ...updates, updatedAt: new Date() };\n    this.conversations.set(id, updated);\n    return updated;\n  }\n\n  async deleteConversation(id: string): Promise<boolean> {\n    return this.conversations.delete(id);\n  }\n\n  // Message methods\n  async getMessage(id: string): Promise<Message | undefined> {\n    return this.messages.get(id);\n  }\n\n  async getMessagesByConversationId(conversationId: string): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter(msg => msg.conversationId === conversationId)\n      .sort((a, b) => a.createdAt!.getTime() - b.createdAt!.getTime());\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = randomUUID();\n    const message: Message = {\n      conversationId: insertMessage.conversationId || null,\n      role: insertMessage.role,\n      content: insertMessage.content,\n      metadata: insertMessage.metadata || null,\n      id,\n      createdAt: new Date()\n    };\n    this.messages.set(id, message);\n    return message;\n  }\n\n  async deleteMessage(id: string): Promise<boolean> {\n    return this.messages.delete(id);\n  }\n\n  // Project methods\n  async getProject(id: string): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async getProjectsByUserId(userId: string): Promise<Project[]> {\n    return Array.from(this.projects.values())\n      .filter(project => project.userId === userId)\n      .sort((a, b) => b.updatedAt!.getTime() - a.updatedAt!.getTime());\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = randomUUID();\n    const now = new Date();\n    const project: Project = {\n      userId: insertProject.userId || null,\n      name: insertProject.name,\n      description: insertProject.description || null,\n      githubUrl: insertProject.githubUrl || null,\n      status: insertProject.status || null,\n      metadata: insertProject.metadata || null,\n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project | undefined> {\n    const project = this.projects.get(id);\n    if (!project) return undefined;\n\n    const updated = { ...project, ...updates, updatedAt: new Date() };\n    this.projects.set(id, updated);\n    return updated;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    return this.projects.delete(id);\n  }\n\n  // File methods\n  async getFile(id: string): Promise<File | undefined> {\n    return this.files.get(id);\n  }\n\n  async getFilesByUserId(userId: string): Promise<File[]> {\n    return Array.from(this.files.values())\n      .filter(file => file.userId === userId)\n      .sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  async createFile(insertFile: InsertFile): Promise<File> {\n    const id = randomUUID();\n    const file: File = {\n      userId: insertFile.userId || null,\n      filename: insertFile.filename,\n      originalName: insertFile.originalName,\n      mimeType: insertFile.mimeType,\n      size: insertFile.size,\n      path: insertFile.path,\n      analysis: insertFile.analysis || null,\n      id,\n      createdAt: new Date()\n    };\n    this.files.set(id, file);\n    return file;\n  }\n\n  async updateFile(id: string, updates: Partial<File>): Promise<File | undefined> {\n    const file = this.files.get(id);\n    if (!file) return undefined;\n\n    const updated = { ...file, ...updates };\n    this.files.set(id, updated);\n    return updated;\n  }\n\n  async deleteFile(id: string): Promise<boolean> {\n    return this.files.delete(id);\n  }\n\n  // LLM Configuration methods\n  async getLLMConfiguration(id: string): Promise<LLMConfiguration | undefined> {\n    return this.llmConfigurations.get(id);\n  }\n\n  async getLLMConfigurationsByUserId(userId: string): Promise<LLMConfiguration[]> {\n    return Array.from(this.llmConfigurations.values())\n      .filter(config => config.userId === userId || config.userId === null) // Include global configs\n      .sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  async getDefaultLLMConfiguration(userId: string): Promise<LLMConfiguration | undefined> {\n    return Array.from(this.llmConfigurations.values())\n      .find(config => (config.userId === userId || config.userId === null) && config.isDefault);\n  }\n\n  async createLLMConfiguration(insertConfig: InsertLLMConfiguration): Promise<LLMConfiguration> {\n    const id = randomUUID();\n    const config: LLMConfiguration = {\n      userId: insertConfig.userId || null,\n      name: insertConfig.name,\n      endpoint: insertConfig.endpoint,\n      model: insertConfig.model,\n      temperature: insertConfig.temperature || null,\n      maxTokens: insertConfig.maxTokens || null,\n      isDefault: insertConfig.isDefault || null,\n      id,\n      createdAt: new Date()\n    };\n    this.llmConfigurations.set(id, config);\n    return config;\n  }\n\n  async updateLLMConfiguration(id: string, updates: Partial<LLMConfiguration>): Promise<LLMConfiguration | undefined> {\n    const config = this.llmConfigurations.get(id);\n    if (!config) return undefined;\n\n    const updated = { ...config, ...updates };\n    this.llmConfigurations.set(id, updated);\n    return updated;\n  }\n\n  async deleteLLMConfiguration(id: string): Promise<boolean> {\n    return this.llmConfigurations.delete(id);\n  }\n\n  // Search Engine methods\n  async getSearchEngine(id: string): Promise<SearchEngine | undefined> {\n    return this.searchEngines.get(id);\n  }\n\n  async getSearchEnginesByUserId(userId: string): Promise<SearchEngine[]> {\n    return Array.from(this.searchEngines.values())\n      .filter(engine => engine.userId === userId || engine.userId === null)\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async getEnabledSearchEngines(userId: string): Promise<SearchEngine[]> {\n    return Array.from(this.searchEngines.values())\n      .filter(engine => engine.enabled && (engine.userId === userId || engine.userId === null));\n  }\n\n  async createSearchEngine(insertEngine: InsertSearchEngine): Promise<SearchEngine> {\n    const id = randomUUID();\n    const engine: SearchEngine = {\n      userId: insertEngine.userId || null,\n      name: insertEngine.name,\n      enabled: insertEngine.enabled || null,\n      apiKey: insertEngine.apiKey || null,\n      id,\n      createdAt: new Date()\n    };\n    this.searchEngines.set(id, engine);\n    return engine;\n  }\n\n  async updateSearchEngine(id: string, updates: Partial<SearchEngine>): Promise<SearchEngine | undefined> {\n    const engine = this.searchEngines.get(id);\n    if (!engine) return undefined;\n\n    const updated = { ...engine, ...updates };\n    this.searchEngines.set(id, updated);\n    return updated;\n  }\n\n  async deleteSearchEngine(id: string): Promise<boolean> {\n    return this.searchEngines.delete(id);\n  }\n\n  // User Preferences methods\n  async getUserPreferences(userId: string): Promise<UserPreferences | undefined> {\n    const preferences = Array.from(this.userPreferences.values())\n      .find(prefs => prefs.userId === userId);\n    \n    // Return default preferences if none exist\n    if (!preferences) {\n      const defaultPrefs: UserPreferences = {\n        id: randomUUID(),\n        userId,\n        theme: \"dark\",\n        compactMode: false,\n        animations: true,\n        fontSize: \"medium\",\n        codeFont: \"jetbrains\",\n        maxConcurrentRequests: 5,\n        cacheDuration: 30,\n        autoSaveConversations: true,\n        analyticsCollection: false,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      this.userPreferences.set(defaultPrefs.id, defaultPrefs);\n      return defaultPrefs;\n    }\n    \n    return preferences;\n  }\n\n  async createUserPreferences(insertPrefs: InsertUserPreferences): Promise<UserPreferences> {\n    const id = randomUUID();\n    const preferences: UserPreferences = {\n      id,\n      userId: insertPrefs.userId || null,\n      theme: insertPrefs.theme || \"dark\",\n      compactMode: insertPrefs.compactMode || false,\n      animations: insertPrefs.animations || true,\n      fontSize: insertPrefs.fontSize || \"medium\",\n      codeFont: insertPrefs.codeFont || \"jetbrains\",\n      maxConcurrentRequests: insertPrefs.maxConcurrentRequests || 5,\n      cacheDuration: insertPrefs.cacheDuration || 30,\n      autoSaveConversations: insertPrefs.autoSaveConversations || true,\n      analyticsCollection: insertPrefs.analyticsCollection || false,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.userPreferences.set(id, preferences);\n    return preferences;\n  }\n\n  async updateUserPreferences(userId: string, updates: Partial<UserPreferences>): Promise<UserPreferences | undefined> {\n    const existing = await this.getUserPreferences(userId);\n    if (!existing) return undefined;\n\n    const updated: UserPreferences = { \n      ...existing, \n      ...updates, \n      userId: existing.userId,\n      updatedAt: new Date() \n    };\n    this.userPreferences.set(existing.id, updated);\n    return updated;\n  }\n\n  // Project Template methods\n  async getProjectTemplate(id: string): Promise<ProjectTemplate | undefined> {\n    return this.projectTemplates.get(id);\n  }\n\n  async getProjectTemplates(): Promise<ProjectTemplate[]> {\n    return Array.from(this.projectTemplates.values())\n      .filter(template => template.isPublic);\n  }\n\n  async getProjectTemplatesByCategory(category: string): Promise<ProjectTemplate[]> {\n    return Array.from(this.projectTemplates.values())\n      .filter(template => template.isPublic && template.category === category);\n  }\n\n  async createProjectTemplate(insertTemplate: InsertProjectTemplate): Promise<ProjectTemplate> {\n    const id = randomUUID();\n    const template: ProjectTemplate = {\n      id,\n      name: insertTemplate.name,\n      description: insertTemplate.description,\n      category: insertTemplate.category,\n      techStack: insertTemplate.techStack,\n      files: insertTemplate.files,\n      dependencies: insertTemplate.dependencies || null,\n      instructions: insertTemplate.instructions || null,\n      difficulty: insertTemplate.difficulty || \"beginner\",\n      estimatedTime: insertTemplate.estimatedTime || null,\n      tags: insertTemplate.tags || null,\n      isPublic: insertTemplate.isPublic !== undefined ? insertTemplate.isPublic : true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.projectTemplates.set(id, template);\n    return template;\n  }\n\n  async updateProjectTemplate(id: string, updates: Partial<ProjectTemplate>): Promise<ProjectTemplate | undefined> {\n    const existing = this.projectTemplates.get(id);\n    if (!existing) return undefined;\n\n    const updated: ProjectTemplate = { \n      ...existing, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.projectTemplates.set(id, updated);\n    return updated;\n  }\n\n  async deleteProjectTemplate(id: string): Promise<boolean> {\n    return this.projectTemplates.delete(id);\n  }\n\n  // Project Plan Version methods\n  async getProjectPlanVersion(id: string): Promise<ProjectPlanVersion | undefined> {\n    return this.projectPlanVersions.get(id);\n  }\n\n  async getProjectPlanVersionsByProjectId(projectId: string): Promise<ProjectPlanVersion[]> {\n    return Array.from(this.projectPlanVersions.values())\n      .filter(version => version.projectId === projectId)\n      .sort((a, b) => b.version - a.version); // Sort by version descending\n  }\n\n  async getLatestProjectPlanVersion(projectId: string): Promise<ProjectPlanVersion | undefined> {\n    const versions = await this.getProjectPlanVersionsByProjectId(projectId);\n    return versions[0]; // First item is latest due to sorting\n  }\n\n  async createProjectPlanVersion(insertVersion: InsertProjectPlanVersion): Promise<ProjectPlanVersion> {\n    const id = randomUUID();\n    \n    // Auto-increment version number if not provided\n    let version = insertVersion.version;\n    if (!version) {\n      const existingVersions = await this.getProjectPlanVersionsByProjectId(insertVersion.projectId);\n      version = existingVersions.length > 0 ? Math.max(...existingVersions.map(v => v.version)) + 1 : 1;\n    }\n    \n    const planVersion: ProjectPlanVersion = {\n      ...insertVersion,\n      id,\n      version,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    \n    this.projectPlanVersions.set(id, planVersion);\n    return planVersion;\n  }\n\n  async updateProjectPlanVersion(id: string, updates: Partial<ProjectPlanVersion>): Promise<ProjectPlanVersion | undefined> {\n    const existing = this.projectPlanVersions.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updates, updatedAt: new Date() };\n    this.projectPlanVersions.set(id, updated);\n    return updated;\n  }\n\n  async deleteProjectPlanVersion(id: string): Promise<boolean> {\n    return this.projectPlanVersions.delete(id);\n  }\n\n  async getProjectPlanVersionHistory(projectId: string): Promise<ProjectPlanVersion[]> {\n    return this.getProjectPlanVersionsByProjectId(projectId); // Same as getProjectPlanVersionsByProjectId\n  }\n}\n\n// PostgreSQL Storage Implementation\nclass PostgreSQLStorage implements IStorage {\n  private db;\n\n  constructor() {\n    if (!process.env.DATABASE_URL) {\n      throw new Error(\"DATABASE_URL environment variable is required\");\n    }\n    const sql = neon(process.env.DATABASE_URL);\n    this.db = drizzle(sql);\n    this.initializeDefaults();\n  }\n\n  private async initializeDefaults() {\n    try {\n      // Initialize default search engines if none exist\n      const existingEngines = await this.db.select().from(searchEngines).limit(1);\n      if (existingEngines.length === 0) {\n        const defaultEngines = [\n          { userId: null, name: \"Google\", enabled: true, apiKey: null },\n          { userId: null, name: \"Bing\", enabled: true, apiKey: null },\n          { userId: null, name: \"DuckDuckGo\", enabled: false, apiKey: null }\n        ];\n\n        for (const engine of defaultEngines) {\n          await this.db.insert(searchEngines).values(engine);\n        }\n      }\n\n      // Initialize default LLM configuration if none exist\n      const existingLLMs = await this.db.select().from(llmConfigurations).limit(1);\n      if (existingLLMs.length === 0) {\n        await this.db.insert(llmConfigurations).values({\n          userId: null,\n          name: \"Ollama Local\",\n          endpoint: \"http://localhost:11434\",\n          model: \"llama2-7b-chat\",\n          temperature: 70,\n          maxTokens: 2048,\n          isDefault: true\n        });\n      }\n    } catch (error) {\n      console.error(\"Failed to initialize defaults:\", error);\n    }\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await this.db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  // Conversation methods\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    const result = await this.db.select().from(conversations).where(eq(conversations.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getConversationsByUserId(userId: string): Promise<Conversation[]> {\n    return await this.db.select().from(conversations)\n      .where(eq(conversations.userId, userId))\n      .orderBy(desc(conversations.updatedAt));\n  }\n\n  async createConversation(conversation: InsertConversation): Promise<Conversation> {\n    const result = await this.db.insert(conversations).values(conversation).returning();\n    return result[0];\n  }\n\n  async updateConversation(id: string, updates: Partial<Conversation>): Promise<Conversation | undefined> {\n    const result = await this.db.update(conversations)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(conversations.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteConversation(id: string): Promise<boolean> {\n    const result = await this.db.delete(conversations).where(eq(conversations.id, id)).returning({ id: conversations.id });\n    return result.length > 0;\n  }\n\n  // Message methods\n  async getMessage(id: string): Promise<Message | undefined> {\n    const result = await this.db.select().from(messages).where(eq(messages.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getMessagesByConversationId(conversationId: string): Promise<Message[]> {\n    return await this.db.select().from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n  }\n\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const result = await this.db.insert(messages).values(message).returning();\n    return result[0];\n  }\n\n  async deleteMessage(id: string): Promise<boolean> {\n    const result = await this.db.delete(messages).where(eq(messages.id, id)).returning({ id: messages.id });\n    return result.length > 0;\n  }\n\n  // Project methods\n  async getProject(id: string): Promise<Project | undefined> {\n    const result = await this.db.select().from(projects).where(eq(projects.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getProjectsByUserId(userId: string): Promise<Project[]> {\n    return await this.db.select().from(projects)\n      .where(eq(projects.userId, userId))\n      .orderBy(desc(projects.updatedAt));\n  }\n\n  async createProject(project: InsertProject): Promise<Project> {\n    const result = await this.db.insert(projects).values(project).returning();\n    return result[0];\n  }\n\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project | undefined> {\n    const result = await this.db.update(projects)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(projects.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    const result = await this.db.delete(projects).where(eq(projects.id, id)).returning({ id: projects.id });\n    return result.length > 0;\n  }\n\n  // File methods\n  async getFile(id: string): Promise<File | undefined> {\n    const result = await this.db.select().from(files).where(eq(files.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getFilesByUserId(userId: string): Promise<File[]> {\n    return await this.db.select().from(files)\n      .where(eq(files.userId, userId))\n      .orderBy(desc(files.createdAt));\n  }\n\n  async createFile(file: InsertFile): Promise<File> {\n    const result = await this.db.insert(files).values(file).returning();\n    return result[0];\n  }\n\n  async updateFile(id: string, updates: Partial<File>): Promise<File | undefined> {\n    const result = await this.db.update(files)\n      .set(updates)\n      .where(eq(files.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteFile(id: string): Promise<boolean> {\n    const result = await this.db.delete(files).where(eq(files.id, id)).returning({ id: files.id });\n    return result.length > 0;\n  }\n\n  // LLM Configuration methods\n  async getLLMConfiguration(id: string): Promise<LLMConfiguration | undefined> {\n    const result = await this.db.select().from(llmConfigurations).where(eq(llmConfigurations.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getLLMConfigurationsByUserId(userId: string): Promise<LLMConfiguration[]> {\n    return await this.db.select().from(llmConfigurations)\n      .where(eq(llmConfigurations.userId, userId))\n      .orderBy(desc(llmConfigurations.createdAt));\n  }\n\n  async getDefaultLLMConfiguration(userId: string): Promise<LLMConfiguration | undefined> {\n    // First try to get user's default configuration\n    const userDefault = await this.db.select().from(llmConfigurations)\n      .where(and(eq(llmConfigurations.userId, userId), eq(llmConfigurations.isDefault, true)))\n      .limit(1);\n    \n    if (userDefault.length > 0) {\n      return userDefault[0];\n    }\n\n    // Fall back to global default (where userId is null)\n    const globalDefault = await this.db.select().from(llmConfigurations)\n      .where(eq(llmConfigurations.isDefault, true))\n      .limit(1);\n    \n    return globalDefault[0];\n  }\n\n  async createLLMConfiguration(config: InsertLLMConfiguration): Promise<LLMConfiguration> {\n    const result = await this.db.insert(llmConfigurations).values(config).returning();\n    return result[0];\n  }\n\n  async updateLLMConfiguration(id: string, updates: Partial<LLMConfiguration>): Promise<LLMConfiguration | undefined> {\n    const result = await this.db.update(llmConfigurations)\n      .set(updates)\n      .where(eq(llmConfigurations.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteLLMConfiguration(id: string): Promise<boolean> {\n    const result = await this.db.delete(llmConfigurations).where(eq(llmConfigurations.id, id)).returning({ id: llmConfigurations.id });\n    return result.length > 0;\n  }\n\n  // Search Engine methods\n  async getSearchEngine(id: string): Promise<SearchEngine | undefined> {\n    const result = await this.db.select().from(searchEngines).where(eq(searchEngines.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getSearchEnginesByUserId(userId: string): Promise<SearchEngine[]> {\n    return await this.db.select().from(searchEngines)\n      .where(eq(searchEngines.userId, userId))\n      .orderBy(desc(searchEngines.createdAt));\n  }\n\n  async getEnabledSearchEngines(userId: string): Promise<SearchEngine[]> {\n    return await this.db.select().from(searchEngines)\n      .where(and(eq(searchEngines.userId, userId), eq(searchEngines.enabled, true)))\n      .orderBy(desc(searchEngines.createdAt));\n  }\n\n  async createSearchEngine(engine: InsertSearchEngine): Promise<SearchEngine> {\n    const result = await this.db.insert(searchEngines).values(engine).returning();\n    return result[0];\n  }\n\n  async updateSearchEngine(id: string, updates: Partial<SearchEngine>): Promise<SearchEngine | undefined> {\n    const result = await this.db.update(searchEngines)\n      .set(updates)\n      .where(eq(searchEngines.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteSearchEngine(id: string): Promise<boolean> {\n    const result = await this.db.delete(searchEngines).where(eq(searchEngines.id, id)).returning({ id: searchEngines.id });\n    return result.length > 0;\n  }\n\n  // User Preferences methods\n  async getUserPreferences(userId: string): Promise<UserPreferences | undefined> {\n    const result = await this.db.select().from(userPreferences)\n      .where(eq(userPreferences.userId, userId))\n      .limit(1);\n    \n    if (result.length === 0) {\n      // Create default preferences\n      const defaultPrefs = {\n        userId,\n        theme: \"dark\",\n        compactMode: false,\n        animations: true,\n        fontSize: \"medium\",\n        codeFont: \"jetbrains\",\n        maxConcurrentRequests: 5,\n        cacheDuration: 30,\n        autoSaveConversations: true,\n        analyticsCollection: false\n      };\n      \n      return await this.createUserPreferences(defaultPrefs);\n    }\n    \n    return result[0];\n  }\n\n  async createUserPreferences(insertPrefs: InsertUserPreferences): Promise<UserPreferences> {\n    const result = await this.db.insert(userPreferences).values(insertPrefs).returning();\n    return result[0];\n  }\n\n  async updateUserPreferences(userId: string, updates: Partial<UserPreferences>): Promise<UserPreferences | undefined> {\n    const result = await this.db.update(userPreferences)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(userPreferences.userId, userId))\n      .returning();\n    return result[0];\n  }\n\n  // Project Template methods\n  async getProjectTemplate(id: string): Promise<ProjectTemplate | undefined> {\n    const result = await this.db.select().from(projectTemplates).where(eq(projectTemplates.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getProjectTemplates(): Promise<ProjectTemplate[]> {\n    return await this.db.select().from(projectTemplates)\n      .where(eq(projectTemplates.isPublic, true))\n      .orderBy(desc(projectTemplates.createdAt));\n  }\n\n  async getProjectTemplatesByCategory(category: string): Promise<ProjectTemplate[]> {\n    return await this.db.select().from(projectTemplates)\n      .where(and(eq(projectTemplates.category, category), eq(projectTemplates.isPublic, true)))\n      .orderBy(desc(projectTemplates.createdAt));\n  }\n\n  async createProjectTemplate(template: InsertProjectTemplate): Promise<ProjectTemplate> {\n    const result = await this.db.insert(projectTemplates).values(template).returning();\n    return result[0];\n  }\n\n  async updateProjectTemplate(id: string, updates: Partial<ProjectTemplate>): Promise<ProjectTemplate | undefined> {\n    const result = await this.db.update(projectTemplates)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(projectTemplates.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteProjectTemplate(id: string): Promise<boolean> {\n    const result = await this.db.delete(projectTemplates).where(eq(projectTemplates.id, id)).returning({ id: projectTemplates.id });\n    return result.length > 0;\n  }\n}\n\n// Use PostgreSQL storage in production, MemStorage for development/testing\nexport const storage = process.env.NODE_ENV === 'development' && !process.env.USE_DATABASE \n  ? new MemStorage() \n  : new PostgreSQLStorage();\n","size_bytes":33635},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, boolean, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  title: text(\"title\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").references(() => conversations.id),\n  role: text(\"role\").notNull(), // 'user' | 'assistant' | 'system'\n  content: text(\"content\").notNull(),\n  metadata: jsonb(\"metadata\"), // for storing additional data like file attachments, search results, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  githubUrl: text(\"github_url\"),\n  status: text(\"status\").default(\"active\"), // 'active' | 'archived' | 'completed'\n  metadata: jsonb(\"metadata\"), // for storing project architecture, tech stack, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const files = pgTable(\"files\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  filename: text(\"filename\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  size: integer(\"size\").notNull(),\n  path: text(\"path\").notNull(),\n  analysis: jsonb(\"analysis\"), // for storing file analysis results\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const llmConfigurations = pgTable(\"llm_configurations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  endpoint: text(\"endpoint\").notNull(),\n  model: text(\"model\").notNull(),\n  temperature: integer(\"temperature\").default(70), // 0-100 range\n  maxTokens: integer(\"max_tokens\").default(2048),\n  isDefault: boolean(\"is_default\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const searchEngines = pgTable(\"search_engines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  enabled: boolean(\"enabled\").default(true),\n  apiKey: text(\"api_key\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  theme: text(\"theme\").default(\"dark\"), // \"light\" | \"dark\" | \"system\"\n  compactMode: boolean(\"compact_mode\").default(false),\n  animations: boolean(\"animations\").default(true),\n  fontSize: text(\"font_size\").default(\"medium\"), // \"small\" | \"medium\" | \"large\"\n  codeFont: text(\"code_font\").default(\"jetbrains\"), // \"jetbrains\" | \"fira\" | \"source\" | \"consolas\"\n  maxConcurrentRequests: integer(\"max_concurrent_requests\").default(5),\n  cacheDuration: integer(\"cache_duration\").default(30), // minutes\n  autoSaveConversations: boolean(\"auto_save_conversations\").default(true),\n  analyticsCollection: boolean(\"analytics_collection\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const projectTemplates = pgTable(\"project_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(), // \"web\", \"api\", \"mobile\", \"desktop\", \"ml\", \"blockchain\"\n  techStack: jsonb(\"tech_stack\").notNull(), // { frontend: [], backend: [], database: [], tools: [] }\n  files: jsonb(\"files\").notNull(), // Array of file objects with path, content, and type\n  dependencies: jsonb(\"dependencies\"), // Package.json style dependencies\n  instructions: text(\"instructions\"), // Setup and usage instructions\n  difficulty: text(\"difficulty\").default(\"beginner\"), // \"beginner\" | \"intermediate\" | \"advanced\"\n  estimatedTime: text(\"estimated_time\"), // \"1-2 hours\", \"1 day\", etc.\n  tags: jsonb(\"tags\"), // Array of string tags for filtering\n  isPublic: boolean(\"is_public\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const projectPlanVersions = pgTable(\"project_plan_versions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").references(() => projects.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  version: integer(\"version\").notNull(), // Version number (1, 2, 3, etc.)\n  title: text(\"title\").notNull(), // Plan title/name\n  description: text(\"description\"), // Plan description\n  goals: jsonb(\"goals\"), // Array of project goals\n  requirements: jsonb(\"requirements\"), // Array of requirements\n  architecture: jsonb(\"architecture\"), // Architecture decisions and design\n  techStack: jsonb(\"tech_stack\"), // Technology stack choices\n  timeline: jsonb(\"timeline\"), // Milestones and timeline\n  resources: jsonb(\"resources\"), // Required resources\n  risks: jsonb(\"risks\"), // Identified risks and mitigation strategies\n  notes: text(\"notes\"), // Additional notes\n  changeLog: text(\"change_log\"), // What changed in this version\n  status: text(\"status\").default(\"draft\"), // \"draft\" | \"active\" | \"archived\"\n  parentVersionId: varchar(\"parent_version_id\"), // Reference to previous version (self-reference)\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).pick({\n  userId: true,\n  title: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).pick({\n  conversationId: true,\n  role: true,\n  content: true,\n  metadata: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).pick({\n  userId: true,\n  name: true,\n  description: true,\n  githubUrl: true,\n  status: true,\n  metadata: true,\n});\n\nexport const insertFileSchema = createInsertSchema(files).pick({\n  userId: true,\n  filename: true,\n  originalName: true,\n  mimeType: true,\n  size: true,\n  path: true,\n  analysis: true,\n});\n\nexport const insertLLMConfigurationSchema = createInsertSchema(llmConfigurations).pick({\n  userId: true,\n  name: true,\n  endpoint: true,\n  model: true,\n  temperature: true,\n  maxTokens: true,\n  isDefault: true,\n});\n\nexport const insertSearchEngineSchema = createInsertSchema(searchEngines).pick({\n  userId: true,\n  name: true,\n  enabled: true,\n  apiKey: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\n\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\n\nexport type InsertFile = z.infer<typeof insertFileSchema>;\nexport type File = typeof files.$inferSelect;\n\nexport type InsertLLMConfiguration = z.infer<typeof insertLLMConfigurationSchema>;\nexport type LLMConfiguration = typeof llmConfigurations.$inferSelect;\n\nexport type InsertSearchEngine = z.infer<typeof insertSearchEngineSchema>;\nexport type SearchEngine = typeof searchEngines.$inferSelect;\n\nexport const insertUserPreferencesSchema = createInsertSchema(userPreferences).pick({\n  userId: true,\n  theme: true,\n  compactMode: true,\n  animations: true,\n  fontSize: true,\n  codeFont: true,\n  maxConcurrentRequests: true,\n  cacheDuration: true,\n  autoSaveConversations: true,\n  analyticsCollection: true,\n});\n\nexport type InsertUserPreferences = z.infer<typeof insertUserPreferencesSchema>;\nexport type UserPreferences = typeof userPreferences.$inferSelect;\n\nexport const insertProjectTemplateSchema = createInsertSchema(projectTemplates).pick({\n  name: true,\n  description: true,\n  category: true,\n  techStack: true,\n  files: true,\n  dependencies: true,\n  instructions: true,\n  difficulty: true,\n  estimatedTime: true,\n  tags: true,\n  isPublic: true,\n});\n\nexport type InsertProjectTemplate = z.infer<typeof insertProjectTemplateSchema>;\nexport type ProjectTemplate = typeof projectTemplates.$inferSelect;\n\nexport const insertProjectPlanVersionSchema = createInsertSchema(projectPlanVersions).pick({\n  projectId: true,\n  userId: true,\n  version: true,\n  title: true,\n  description: true,\n  goals: true,\n  requirements: true,\n  architecture: true,\n  techStack: true,\n  timeline: true,\n  resources: true,\n  risks: true,\n  notes: true,\n  changeLog: true,\n  status: true,\n  parentVersionId: true,\n});\n\nexport type InsertProjectPlanVersion = z.infer<typeof insertProjectPlanVersionSchema>;\nexport type ProjectPlanVersion = typeof projectPlanVersions.$inferSelect;\n","size_bytes":9831},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/auth-context\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport ProjectPlanning from \"@/pages/project-planning\";\nimport ProjectTemplates from \"@/pages/project-templates\";\nimport CodeAnalysis from \"@/pages/code-analysis\";\nimport WebSearch from \"@/pages/web-search\";\nimport DocumentAnalysis from \"@/pages/document-analysis\";\nimport Integrations from \"@/pages/integrations\";\nimport Settings from \"@/pages/settings\";\nimport MainLayout from \"@/components/layout/main-layout\";\n\nfunction Router() {\n  return (\n    <MainLayout>\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/project-planning\" component={ProjectPlanning} />\n        <Route path=\"/project-templates\" component={ProjectTemplates} />\n        <Route path=\"/code-analysis\" component={CodeAnalysis} />\n        <Route path=\"/web-search\" component={WebSearch} />\n        <Route path=\"/document-analysis\" component={DocumentAnalysis} />\n        <Route path=\"/integrations\" component={Integrations} />\n        <Route path=\"/settings\" component={Settings} />\n        <Route component={NotFound} />\n      </Switch>\n    </MainLayout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1724},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Dark theme colors matching the design */\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(217, 33%, 8%);\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(217, 33%, 8%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(217, 19%, 27%);\n  --secondary-foreground: hsl(213, 31%, 91%);\n  --muted: hsl(217, 33%, 8%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 19%, 27%);\n  --accent-foreground: hsl(213, 31%, 91%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 19%, 27%);\n  --input: hsl(217, 19%, 27%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(217, 33%, 8%);\n  --sidebar-foreground: hsl(213, 31%, 91%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(222, 84%, 5%);\n  --sidebar-accent: hsl(217, 19%, 27%);\n  --sidebar-accent-foreground: hsl(213, 31%, 91%);\n  --sidebar-border: hsl(217, 19%, 27%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Consolas', 'Monaco', monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 1px 2px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 1px 2px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 2px 4px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 4px 6px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00), 0px 8px 10px -1px hsl(217, 91%, 60% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217, 91%, 60% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  .font-mono {\n    font-family: var(--font-mono);\n  }\n}\n\n/* Custom scrollbar styles */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground) / 0.3);\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--muted-foreground) / 0.5);\n}\n\n/* Auto-resize textarea */\n.auto-resize-textarea {\n  resize: none;\n  overflow: hidden;\n  min-height: 44px;\n  max-height: 128px;\n}\n\n/* File drop zone animation */\n.file-drop-zone {\n  transition: all 0.2s ease-in-out;\n}\n\n.file-drop-zone.drag-over {\n  border-color: hsl(var(--primary));\n  background-color: hsl(var(--primary) / 0.05);\n}\n\n/* Status indicator pulse animation */\n@keyframes pulse-green {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.status-pulse {\n  animation: pulse-green 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Message content styling */\n.message-content {\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n}\n\n.message-content pre {\n  @apply bg-muted p-3 rounded-md text-sm font-mono overflow-x-auto;\n  white-space: pre-wrap;\n}\n\n.message-content code {\n  @apply bg-muted px-1 py-0.5 rounded text-sm font-mono;\n}\n\n.message-content blockquote {\n  @apply border-l-4 border-muted-foreground border-opacity-20 pl-4 italic;\n}\n\n/* Loading animation */\n@keyframes loading-dots {\n  0%, 20% {\n    color: hsl(var(--muted-foreground));\n  }\n  50% {\n    color: hsl(var(--foreground));\n  }\n  100% {\n    color: hsl(var(--muted-foreground));\n  }\n}\n\n.loading-dots span {\n  animation: loading-dots 1.4s ease-in-out infinite both;\n}\n\n.loading-dots span:nth-child(2) {\n  animation-delay: 0.16s;\n}\n\n.loading-dots span:nth-child(3) {\n  animation-delay: 0.32s;\n}\n","size_bytes":4373},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/file-service.ts":{"content":"import type { InsertFile, File } from \"@shared/schema\";\nimport { storage } from \"../storage\";\nimport * as path from \"path\";\nimport * as fs from \"fs/promises\";\n\nexport interface FileAnalysis {\n  type: 'text' | 'code' | 'image' | 'document' | 'unknown';\n  language?: string;\n  lineCount?: number;\n  size: number;\n  complexity?: 'low' | 'medium' | 'high';\n  summary?: string;\n  codeMetrics?: {\n    functions: number;\n    classes: number;\n    imports: number;\n    comments: number;\n  };\n}\n\nexport class FileService {\n  private uploadDir = process.env.UPLOAD_DIR || './uploads';\n\n  constructor() {\n    this.ensureUploadDir();\n  }\n\n  private async ensureUploadDir() {\n    try {\n      await fs.mkdir(this.uploadDir, { recursive: true });\n    } catch (error) {\n      console.error(\"Failed to create upload directory:\", error);\n    }\n  }\n\n  async saveFile(\n    userId: string,\n    originalName: string,\n    content: Buffer,\n    mimeType: string\n  ): Promise<File> {\n    const filename = `${Date.now()}-${Math.random().toString(36).substring(2)}-${originalName}`;\n    const filePath = path.join(this.uploadDir, filename);\n\n    try {\n      await fs.writeFile(filePath, content);\n      \n      const insertFile: InsertFile = {\n        userId,\n        filename,\n        originalName,\n        mimeType,\n        size: content.length,\n        path: filePath,\n        analysis: await this.analyzeFile(content, originalName, mimeType),\n      };\n\n      return await storage.createFile(insertFile);\n    } catch (error) {\n      console.error(\"Error saving file:\", error);\n      throw new Error(\"Failed to save file\");\n    }\n  }\n\n  async getFileContent(file: File): Promise<Buffer> {\n    try {\n      return await fs.readFile(file.path);\n    } catch (error) {\n      console.error(\"Error reading file:\", error);\n      throw new Error(\"Failed to read file\");\n    }\n  }\n\n  async deleteFile(fileId: string): Promise<boolean> {\n    try {\n      const file = await storage.getFile(fileId);\n      if (!file) return false;\n\n      await fs.unlink(file.path);\n      return await storage.deleteFile(fileId);\n    } catch (error) {\n      console.error(\"Error deleting file:\", error);\n      return false;\n    }\n  }\n\n  private async analyzeFile(content: Buffer, filename: string, mimeType: string): Promise<FileAnalysis> {\n    const analysis: FileAnalysis = {\n      type: this.determineFileType(mimeType, filename),\n      size: content.length,\n    };\n\n    if (analysis.type === 'text' || analysis.type === 'code') {\n      const textContent = content.toString('utf-8');\n      analysis.lineCount = textContent.split('\\n').length;\n      \n      if (analysis.type === 'code') {\n        analysis.language = this.detectLanguage(filename);\n        analysis.codeMetrics = this.analyzeCode(textContent);\n        analysis.complexity = this.assessComplexity(analysis.codeMetrics, analysis.lineCount);\n      }\n\n      // Generate summary for text files\n      if (textContent.length > 0) {\n        analysis.summary = this.generateSummary(textContent);\n      }\n    }\n\n    return analysis;\n  }\n\n  private determineFileType(mimeType: string, filename: string): FileAnalysis['type'] {\n    if (mimeType.startsWith('text/')) return 'text';\n    if (mimeType.startsWith('image/')) return 'image';\n    \n    const ext = path.extname(filename).toLowerCase();\n    const codeExtensions = ['.js', '.jsx', '.ts', '.tsx', '.py', '.java', '.cpp', '.c', '.h', '.css', '.html', '.php', '.rb', '.go', '.rs', '.swift'];\n    \n    if (codeExtensions.includes(ext)) return 'code';\n    \n    const documentExtensions = ['.pdf', '.doc', '.docx', '.txt', '.md', '.rtf'];\n    if (documentExtensions.includes(ext)) return 'document';\n    \n    return 'unknown';\n  }\n\n  private detectLanguage(filename: string): string {\n    const ext = path.extname(filename).toLowerCase();\n    const languageMap: Record<string, string> = {\n      '.js': 'javascript',\n      '.jsx': 'javascript',\n      '.ts': 'typescript',\n      '.tsx': 'typescript',\n      '.py': 'python',\n      '.java': 'java',\n      '.cpp': 'cpp',\n      '.c': 'c',\n      '.h': 'c',\n      '.css': 'css',\n      '.html': 'html',\n      '.php': 'php',\n      '.rb': 'ruby',\n      '.go': 'go',\n      '.rs': 'rust',\n      '.swift': 'swift',\n    };\n    \n    return languageMap[ext] || 'unknown';\n  }\n\n  private analyzeCode(content: string): FileAnalysis['codeMetrics'] {\n    const metrics = {\n      functions: 0,\n      classes: 0,\n      imports: 0,\n      comments: 0,\n    };\n\n    const lines = content.split('\\n');\n    \n    for (const line of lines) {\n      const trimmed = line.trim();\n      \n      // Count functions (basic detection)\n      if (trimmed.match(/function\\s+\\w+|const\\s+\\w+\\s*=\\s*\\(|def\\s+\\w+/)) {\n        metrics.functions++;\n      }\n      \n      // Count classes\n      if (trimmed.match(/class\\s+\\w+|interface\\s+\\w+/)) {\n        metrics.classes++;\n      }\n      \n      // Count imports\n      if (trimmed.match(/^import\\s+|^from\\s+.*import|^#include/)) {\n        metrics.imports++;\n      }\n      \n      // Count comments\n      if (trimmed.match(/^\\/\\/|^\\/\\*|^\\*|^#|^<!--/)) {\n        metrics.comments++;\n      }\n    }\n\n    return metrics;\n  }\n\n  private assessComplexity(metrics: FileAnalysis['codeMetrics'], lineCount: number = 0): FileAnalysis['complexity'] {\n    if (!metrics) return 'low';\n    \n    const totalComplexity = metrics.functions + metrics.classes + Math.floor(lineCount / 50);\n    \n    if (totalComplexity > 20) return 'high';\n    if (totalComplexity > 10) return 'medium';\n    return 'low';\n  }\n\n  private generateSummary(content: string): string {\n    const lines = content.split('\\n').filter(line => line.trim().length > 0);\n    \n    // For code files, analyze structure\n    if (this.isCodeContent(content)) {\n      const functions = content.match(/function\\s+\\w+|def\\s+\\w+|class\\s+\\w+/g) || [];\n      const imports = content.match(/import\\s+.*|#include\\s+.*|require\\s*\\(/g) || [];\n      \n      if (functions.length > 0) {\n        return `Code file with ${functions.length} function(s)/class(es), ${imports.length} import(s). Contains: ${functions.slice(0, 3).join(', ')}.`;\n      }\n      return `Code file with ${lines.length} lines, ${imports.length} import(s).`;\n    }\n    \n    // For text/markdown files\n    if (content.includes('#') || content.includes('##')) {\n      const headings = content.match(/^#+\\s+.*/gm) || [];\n      if (headings.length > 0) {\n        return `Document with ${headings.length} section(s): ${headings.slice(0, 3).map(h => h.replace(/^#+\\s+/, '')).join(', ')}.`;\n      }\n    }\n    \n    // Default text summary\n    const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 0);\n    const wordCount = content.split(/\\s+/).length;\n    const firstSentences = sentences.slice(0, 2).join('. ');\n    \n    return `Text document with ${wordCount} words, ${lines.length} lines. ${firstSentences.substring(0, 150)}${firstSentences.length > 150 ? '...' : ''}`;\n  }\n  \n  private isCodeContent(content: string): boolean {\n    const codeIndicators = [\n      /function\\s+\\w+/,\n      /class\\s+\\w+/,\n      /def\\s+\\w+/,\n      /import\\s+/,\n      /require\\s*\\(/,\n      /#include\\s+/,\n      /\\{[\\s\\S]*\\}/,\n      /for\\s*\\(|while\\s*\\(|if\\s*\\(/\n    ];\n    \n    return codeIndicators.some(pattern => pattern.test(content));\n  }\n}\n","size_bytes":7238},"server/services/github-service.ts":{"content":"import { getUncachableGitHubClient } from \"../githubClient\";\nimport type { Project } from \"@shared/schema\";\n\nexport interface GitHubRepository {\n  id: number;\n  name: string;\n  fullName: string;\n  description: string | null;\n  url: string;\n  language: string | null;\n  stars: number;\n  forks: number;\n  private: boolean;\n  updatedAt: string;\n}\n\nexport interface GitHubFile {\n  name: string;\n  path: string;\n  type: 'file' | 'dir';\n  size?: number;\n  downloadUrl?: string;\n  content?: string;\n}\n\nexport interface CodeAnalysis {\n  files: GitHubFile[];\n  languages: Record<string, number>;\n  structure: {\n    directories: string[];\n    mainFiles: string[];\n    configFiles: string[];\n    testFiles: string[];\n  };\n  complexity: 'low' | 'medium' | 'high';\n  suggestions: string[];\n}\n\nexport class GitHubService {\n  async getUserRepositories(): Promise<GitHubRepository[]> {\n    try {\n      const octokit = await getUncachableGitHubClient();\n      const response = await octokit.rest.repos.listForAuthenticatedUser({\n        sort: 'updated',\n        per_page: 100,\n      });\n\n      return response.data.map(repo => ({\n        id: repo.id,\n        name: repo.name,\n        fullName: repo.full_name,\n        description: repo.description,\n        url: repo.html_url,\n        language: repo.language,\n        stars: repo.stargazers_count,\n        forks: repo.forks_count,\n        private: repo.private,\n        updatedAt: repo.updated_at,\n      }));\n    } catch (error) {\n      console.error(\"Error fetching GitHub repositories:\", error);\n      throw new Error(\"Failed to fetch repositories from GitHub\");\n    }\n  }\n\n  async getRepositoryContents(owner: string, repo: string, path: string = \"\"): Promise<GitHubFile[]> {\n    try {\n      const octokit = await getUncachableGitHubClient();\n      const response = await octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n      });\n\n      if (!Array.isArray(response.data)) {\n        return [{\n          name: response.data.name,\n          path: response.data.path,\n          type: response.data.type as 'file' | 'dir',\n          size: response.data.size,\n          downloadUrl: response.data.download_url || undefined,\n        }];\n      }\n\n      return response.data.map(item => ({\n        name: item.name,\n        path: item.path,\n        type: item.type as 'file' | 'dir',\n        size: item.size || undefined,\n        downloadUrl: item.download_url || undefined,\n      }));\n    } catch (error) {\n      console.error(\"Error fetching repository contents:\", error);\n      throw new Error(\"Failed to fetch repository contents\");\n    }\n  }\n\n  async getFileContent(owner: string, repo: string, path: string): Promise<string> {\n    try {\n      const octokit = await getUncachableGitHubClient();\n      const response = await octokit.rest.repos.getContent({\n        owner,\n        repo,\n        path,\n      });\n\n      if (Array.isArray(response.data)) {\n        throw new Error(\"Path points to a directory, not a file\");\n      }\n\n      if (response.data.type !== 'file') {\n        throw new Error(\"Path does not point to a file\");\n      }\n\n      // Decode base64 content\n      return Buffer.from(response.data.content, 'base64').toString('utf-8');\n    } catch (error) {\n      console.error(\"Error fetching file content:\", error);\n      throw new Error(\"Failed to fetch file content\");\n    }\n  }\n\n  async analyzeRepository(owner: string, repo: string): Promise<CodeAnalysis> {\n    try {\n      const files = await this.getRepositoryContentsRecursive(owner, repo);\n      const languages = await this.getRepositoryLanguages(owner, repo);\n      \n      const structure = this.analyzeStructure(files);\n      const complexity = this.assessRepositoryComplexity(files, languages);\n      const suggestions = this.generateSuggestions(structure, complexity);\n\n      return {\n        files,\n        languages,\n        structure,\n        complexity,\n        suggestions,\n      };\n    } catch (error) {\n      console.error(\"Error analyzing repository:\", error);\n      throw new Error(\"Failed to analyze repository\");\n    }\n  }\n\n  private async getRepositoryContentsRecursive(owner: string, repo: string, path: string = \"\"): Promise<GitHubFile[]> {\n    const contents = await this.getRepositoryContents(owner, repo, path);\n    const allFiles: GitHubFile[] = [];\n\n    for (const item of contents) {\n      if (item.type === 'file') {\n        allFiles.push(item);\n      } else if (item.type === 'dir' && !this.shouldSkipDirectory(item.name)) {\n        const subContents = await this.getRepositoryContentsRecursive(owner, repo, item.path);\n        allFiles.push(...subContents);\n      }\n    }\n\n    return allFiles;\n  }\n\n  private shouldSkipDirectory(name: string): boolean {\n    const skipDirs = ['node_modules', '.git', '.next', 'dist', 'build', '__pycache__', '.vscode', '.idea'];\n    return skipDirs.includes(name) || name.startsWith('.');\n  }\n\n  private async getRepositoryLanguages(owner: string, repo: string): Promise<Record<string, number>> {\n    try {\n      const octokit = await getUncachableGitHubClient();\n      const response = await octokit.rest.repos.listLanguages({\n        owner,\n        repo,\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching repository languages:\", error);\n      return {};\n    }\n  }\n\n  private analyzeStructure(files: GitHubFile[]): CodeAnalysis['structure'] {\n    const directories = [...new Set(files.map(f => f.path.split('/')[0]))].filter(Boolean);\n    \n    const mainFiles = files\n      .filter(f => ['index.js', 'index.ts', 'main.py', 'app.py', 'main.cpp', 'README.md'].includes(f.name))\n      .map(f => f.path);\n\n    const configFiles = files\n      .filter(f => ['package.json', 'tsconfig.json', 'webpack.config.js', 'vite.config.ts', '.gitignore', 'Dockerfile'].includes(f.name))\n      .map(f => f.path);\n\n    const testFiles = files\n      .filter(f => f.name.includes('test') || f.name.includes('spec') || f.path.includes('test'))\n      .map(f => f.path);\n\n    return {\n      directories,\n      mainFiles,\n      configFiles,\n      testFiles,\n    };\n  }\n\n  private assessRepositoryComplexity(files: GitHubFile[], languages: Record<string, number>): CodeAnalysis['complexity'] {\n    const totalLines = Object.values(languages).reduce((sum, lines) => sum + lines, 0);\n    const fileCount = files.length;\n    const languageCount = Object.keys(languages).length;\n\n    const complexityScore = (totalLines / 1000) + (fileCount / 10) + (languageCount * 2);\n\n    if (complexityScore > 50) return 'high';\n    if (complexityScore > 20) return 'medium';\n    return 'low';\n  }\n\n  private generateSuggestions(structure: CodeAnalysis['structure'], complexity: CodeAnalysis['complexity']): string[] {\n    const suggestions: string[] = [];\n\n    if (structure.testFiles.length === 0) {\n      suggestions.push(\"Consider adding unit tests to improve code reliability\");\n    }\n\n    if (!structure.configFiles.some(f => f.includes('README'))) {\n      suggestions.push(\"Add a comprehensive README.md file for better documentation\");\n    }\n\n    if (complexity === 'high') {\n      suggestions.push(\"Consider breaking down the project into smaller, more manageable modules\");\n    }\n\n    if (structure.directories.length > 20) {\n      suggestions.push(\"Consider reorganizing the directory structure for better maintainability\");\n    }\n\n    if (suggestions.length === 0) {\n      suggestions.push(\"Code structure looks good! Consider adding CI/CD workflows for automation\");\n    }\n\n    return suggestions;\n  }\n\n  async createRepository(name: string, description?: string, isPrivate: boolean = false): Promise<GitHubRepository> {\n    try {\n      const octokit = await getUncachableGitHubClient();\n      const response = await octokit.rest.repos.createForAuthenticatedUser({\n        name,\n        description,\n        private: isPrivate,\n      });\n\n      return {\n        id: response.data.id,\n        name: response.data.name,\n        fullName: response.data.full_name,\n        description: response.data.description,\n        url: response.data.html_url,\n        language: response.data.language,\n        stars: response.data.stargazers_count,\n        forks: response.data.forks_count,\n        private: response.data.private,\n        updatedAt: response.data.updated_at,\n      };\n    } catch (error) {\n      console.error(\"Error creating GitHub repository:\", error);\n      throw new Error(\"Failed to create repository on GitHub\");\n    }\n  }\n}\n","size_bytes":8441},"server/services/llm-service.ts":{"content":"import type { LLMConfiguration } from \"@shared/schema\";\n\nexport interface LLMResponse {\n  content: string;\n  usage?: {\n    promptTokens: number;\n    completionTokens: number;\n    totalTokens: number;\n  };\n}\n\nexport interface LLMRequest {\n  messages: Array<{\n    role: \"system\" | \"user\" | \"assistant\";\n    content: string;\n  }>;\n  temperature?: number;\n  maxTokens?: number;\n  model?: string;\n}\n\nexport class LLMService {\n  async sendMessage(config: LLMConfiguration, request: LLMRequest): Promise<LLMResponse> {\n    try {\n      const response = await fetch(`${config.endpoint}/v1/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: config.model,\n          messages: request.messages,\n          temperature: (request.temperature || config.temperature || 70) / 100,\n          max_tokens: request.maxTokens || config.maxTokens || 2048,\n          stream: false,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`LLM API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      return {\n        content: data.choices?.[0]?.message?.content || \"\",\n        usage: data.usage ? {\n          promptTokens: data.usage.prompt_tokens || 0,\n          completionTokens: data.usage.completion_tokens || 0,\n          totalTokens: data.usage.total_tokens || 0,\n        } : undefined,\n      };\n    } catch (error) {\n      console.error(\"LLM Service Error:\", error);\n      throw new Error(`Failed to communicate with LLM: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async testConnection(endpoint: string, model: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${endpoint}/v1/models`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        return false;\n      }\n\n      const data = await response.json();\n      return data.data?.some((m: any) => m.id === model) || false;\n    } catch (error) {\n      console.error(\"LLM Connection Test Error:\", error);\n      return false;\n    }\n  }\n\n  async getAvailableModels(endpoint: string): Promise<string[]> {\n    try {\n      const response = await fetch(`${endpoint}/v1/models`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch models: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.data?.map((model: any) => model.id) || [];\n    } catch (error) {\n      console.error(\"Get Models Error:\", error);\n      throw new Error(`Failed to fetch available models: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n","size_bytes":2894},"server/services/search-service.ts":{"content":"import type { SearchEngine } from \"@shared/schema\";\n\nexport interface SearchResult {\n  title: string;\n  url: string;\n  snippet: string;\n  source: string;\n}\n\nexport interface SearchResponse {\n  query: string;\n  results: SearchResult[];\n  totalResults: number;\n  sources: string[];\n  message?: string;\n}\n\nexport class SearchService {\n  async search(engines: SearchEngine[], query: string, maxResults: number = 10): Promise<SearchResponse> {\n    const searchPromises = engines.map(engine => this.searchEngine(engine, query, maxResults));\n    const results = await Promise.allSettled(searchPromises);\n    \n    const allResults: SearchResult[] = [];\n    const sources: string[] = [];\n    \n    results.forEach((result, index) => {\n      if (result.status === 'fulfilled' && result.value && result.value.length > 0) {\n        allResults.push(...result.value);\n        sources.push(engines[index].name);\n      }\n    });\n\n    // Remove duplicates and sort by relevance\n    const uniqueResults = this.deduplicateResults(allResults);\n    \n    return {\n      query,\n      results: uniqueResults.slice(0, maxResults),\n      totalResults: uniqueResults.length,\n      sources,\n    };\n  }\n\n  private async searchEngine(engine: SearchEngine, query: string, maxResults: number): Promise<SearchResult[]> {\n    switch (engine.name.toLowerCase()) {\n      case 'google':\n        return this.searchGoogle(query, maxResults, engine.apiKey);\n      case 'bing':\n        return this.searchBing(query, maxResults, engine.apiKey);\n      case 'duckduckgo':\n        return this.searchDuckDuckGo(query, maxResults);\n      default:\n        console.warn(`Unknown search engine: ${engine.name}`);\n        return [];\n    }\n  }\n\n  private async searchGoogle(query: string, maxResults: number, apiKey?: string | null): Promise<SearchResult[]> {\n    try {\n      const searchEngineId = process.env.GOOGLE_SEARCH_ENGINE_ID;\n      const key = apiKey || process.env.GOOGLE_API_KEY;\n      \n      if (!key || !searchEngineId) {\n        console.warn(\"Google Search API key or Search Engine ID not configured\");\n        return [];\n      }\n\n      const response = await fetch(\n        `https://www.googleapis.com/customsearch/v1?key=${key}&cx=${searchEngineId}&q=${encodeURIComponent(query)}&num=${Math.min(maxResults, 10)}`\n      );\n\n      if (!response.ok) {\n        console.error(\"Google Search API error:\", response.status, response.statusText);\n        return [];\n      }\n\n      const data = await response.json();\n      \n      return (data.items || []).map((item: any) => ({\n        title: item.title,\n        url: item.link,\n        snippet: item.snippet,\n        source: 'Google',\n      }));\n    } catch (error) {\n      console.error(\"Google search error:\", error);\n      return [];\n    }\n  }\n\n  private async searchBing(query: string, maxResults: number, apiKey?: string | null): Promise<SearchResult[]> {\n    try {\n      const key = apiKey || process.env.BING_API_KEY;\n      \n      if (!key) {\n        console.warn(\"Bing Search API key not configured\");\n        return [];\n      }\n\n      const response = await fetch(\n        `https://api.bing.microsoft.com/v7.0/search?q=${encodeURIComponent(query)}&count=${Math.min(maxResults, 50)}`,\n        {\n          headers: {\n            'Ocp-Apim-Subscription-Key': key,\n          },\n        }\n      );\n\n      if (!response.ok) {\n        console.error(\"Bing Search API error:\", response.status, response.statusText);\n        return [];\n      }\n\n      const data = await response.json();\n      \n      return (data.webPages?.value || []).map((item: any) => ({\n        title: item.name,\n        url: item.url,\n        snippet: item.snippet,\n        source: 'Bing',\n      }));\n    } catch (error) {\n      console.error(\"Bing search error:\", error);\n      return [];\n    }\n  }\n\n  private async searchDuckDuckGo(query: string, maxResults: number): Promise<SearchResult[]> {\n    try {\n      // DuckDuckGo Instant Answer API (free but limited)\n      const response = await fetch(\n        `https://api.duckduckgo.com/?q=${encodeURIComponent(query)}&format=json&no_redirect=1&no_html=1`\n      );\n\n      if (!response.ok) {\n        console.error(\"DuckDuckGo API error:\", response.status, response.statusText);\n        return [];\n      }\n\n      const data = await response.json();\n      const results: SearchResult[] = [];\n\n      // Add abstract if available\n      if (data.Abstract) {\n        results.push({\n          title: data.Heading || query,\n          url: data.AbstractURL || '#',\n          snippet: data.Abstract,\n          source: 'DuckDuckGo',\n        });\n      }\n\n      // Add related topics\n      if (data.RelatedTopics) {\n        data.RelatedTopics.slice(0, maxResults - 1).forEach((topic: any) => {\n          if (topic.Text && topic.FirstURL) {\n            results.push({\n              title: topic.Text.split(' - ')[0],\n              url: topic.FirstURL,\n              snippet: topic.Text,\n              source: 'DuckDuckGo',\n            });\n          }\n        });\n      }\n\n      return results.slice(0, maxResults);\n    } catch (error) {\n      console.error(\"DuckDuckGo search error:\", error);\n      return [];\n    }\n  }\n\n  private deduplicateResults(results: SearchResult[]): SearchResult[] {\n    const seen = new Set<string>();\n    return results.filter(result => {\n      const key = result.url.toLowerCase();\n      if (seen.has(key)) {\n        return false;\n      }\n      seen.add(key);\n      return true;\n    });\n  }\n\n  async fetchWebContent(url: string): Promise<string> {\n    try {\n      // Basic URL validation to prevent SSRF\n      const parsedUrl = new URL(url);\n      if (!['http:', 'https:'].includes(parsedUrl.protocol)) {\n        throw new Error('Invalid URL protocol. Only HTTP and HTTPS are allowed.');\n      }\n\n      // Block private/internal IP ranges (basic protection)\n      const hostname = parsedUrl.hostname;\n      if (hostname === 'localhost' || hostname === '127.0.0.1' || hostname.startsWith('192.168.') || \n          hostname.startsWith('10.') || hostname.startsWith('172.16.') || hostname === '::1') {\n        throw new Error('Access to private/internal networks is not allowed.');\n      }\n\n      const response = await fetch(url, {\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        },\n        // Add timeout and size limits\n        signal: AbortSignal.timeout(10000), // 10 second timeout\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const html = await response.text();\n      \n      // Basic HTML to text conversion (you might want to use a proper library like cheerio)\n      return html\n        .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n        .replace(/<style\\b[^<]*(?:(?!<\\/style>)<[^<]*)*<\\/style>/gi, '')\n        .replace(/<[^>]*>/g, ' ')\n        .replace(/\\s+/g, ' ')\n        .trim();\n    } catch (error) {\n      console.error(\"Error fetching web content:\", error);\n      throw new Error(`Failed to fetch content from ${url}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n","size_bytes":7176},"client/src/hooks/use-chat.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Conversation, Message, InsertMessage } from \"@shared/schema\";\n\nexport function useChat(conversationId?: string) {\n  const [currentConversationId, setCurrentConversationId] = useState<string | undefined>(conversationId);\n  const queryClient = useQueryClient();\n  \n  // Mock user ID for now - in a real app this would come from auth context\n  const userId = \"demo-user\";\n\n  // Fetch conversations\n  const { data: conversations = [] } = useQuery({\n    queryKey: [\"/api/conversations\", { userId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/conversations?userId=${userId}`);\n      return response.json();\n    },\n  });\n\n  // Fetch messages for current conversation\n  const { data: messages = [], isLoading: isLoadingMessages } = useQuery({\n    queryKey: [\"/api/conversations\", currentConversationId, \"messages\"],\n    queryFn: async () => {\n      if (!currentConversationId) return [];\n      const response = await apiRequest(\"GET\", `/api/conversations/${currentConversationId}/messages`);\n      return response.json();\n    },\n    enabled: !!currentConversationId,\n  });\n\n  // Create new conversation\n  const createConversationMutation = useMutation({\n    mutationFn: async (title: string) => {\n      const response = await apiRequest(\"POST\", \"/api/conversations\", {\n        userId,\n        title,\n      });\n      return response.json();\n    },\n    onSuccess: (newConversation) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      setCurrentConversationId(newConversation.id);\n    },\n  });\n\n  // Send message\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ content, files, conversationId: convId }: {\n      content: string;\n      files?: File[];\n      conversationId: string;\n    }) => {\n      // Create user message first\n      const userMessage: InsertMessage = {\n        conversationId: convId,\n        role: \"user\",\n        content,\n        metadata: files ? { attachedFiles: files.map(f => ({ name: f.name, size: f.size, type: f.type })) } : undefined,\n      };\n\n      const userResponse = await apiRequest(\"POST\", \"/api/messages\", userMessage);\n      const createdUserMessage = await userResponse.json();\n\n      // If files are attached, upload them\n      let fileAnalysis = null;\n      if (files && files.length > 0) {\n        const formData = new FormData();\n        files.forEach(file => formData.append('file', file));\n        formData.append('userId', userId);\n        \n        try {\n          const fileResponse = await apiRequest(\"POST\", \"/api/files/upload\", formData);\n          fileAnalysis = await fileResponse.json();\n        } catch (error) {\n          console.error(\"File upload failed:\", error);\n        }\n      }\n\n      // Get LLM configuration\n      const configResponse = await apiRequest(\"GET\", `/api/llm-configurations?userId=${userId}`);\n      const configs = await configResponse.json();\n      const defaultConfig = configs.find((c: any) => c.isDefault) || configs[0];\n\n      if (!defaultConfig) {\n        throw new Error(\"No LLM configuration found. Please configure an LLM endpoint in settings.\");\n      }\n\n      // Build conversation context\n      const conversationMessages = [\n        ...messages,\n        createdUserMessage,\n      ].map(msg => ({\n        role: msg.role as \"system\" | \"user\" | \"assistant\",\n        content: msg.content,\n      }));\n\n      // Add system message with file context if files were uploaded\n      if (fileAnalysis) {\n        conversationMessages.unshift({\n          role: \"system\" as const,\n          content: `The user has uploaded a file: ${fileAnalysis.originalName}. File analysis: ${JSON.stringify(fileAnalysis.analysis, null, 2)}. Please consider this context when responding.`,\n        });\n      }\n\n      // Send to LLM with error handling\n      try {\n        const llmResponse = await apiRequest(\"POST\", \"/api/llm/chat\", {\n          configId: defaultConfig.id,\n          messages: conversationMessages,\n        });\n        \n        const llmResult = await llmResponse.json();\n\n        // Create assistant message\n        const assistantMessage: InsertMessage = {\n          conversationId: convId,\n          role: \"assistant\",\n          content: llmResult.content,\n          metadata: {\n            usage: llmResult.usage,\n            fileAnalysis: fileAnalysis ? fileAnalysis.analysis : undefined,\n          },\n        };\n\n        const assistantResponse = await apiRequest(\"POST\", \"/api/messages\", assistantMessage);\n        return assistantResponse.json();\n      } catch (llmError) {\n        console.warn(\"LLM service unavailable:\", llmError);\n        \n        // Create fallback assistant message when LLM is unavailable\n        const fallbackMessage: InsertMessage = {\n          conversationId: convId,\n          role: \"assistant\",\n          content: \"I'm sorry, but I'm currently unable to connect to the AI service. Your message has been saved. Please check that the LLM service (like Ollama) is running and try again.\",\n          metadata: {\n            error: \"LLM service unavailable\",\n            fileAnalysis: fileAnalysis ? fileAnalysis.analysis : undefined,\n          },\n        };\n\n        const fallbackResponse = await apiRequest(\"POST\", \"/api/messages\", fallbackMessage);\n        return fallbackResponse.json();\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\", currentConversationId, \"messages\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n    },\n  });\n\n  // Send message function\n  const sendMessage = async (content: string, files?: File[]) => {\n    if (!content.trim() && (!files || files.length === 0)) return;\n\n    let conversationId = currentConversationId;\n    \n    // Create new conversation if none exists\n    if (!conversationId) {\n      const title = content.slice(0, 50) + (content.length > 50 ? \"...\" : \"\");\n      const newConversation = await createConversationMutation.mutateAsync(title);\n      conversationId = newConversation.id;\n    }\n\n    return sendMessageMutation.mutateAsync({ content, files, conversationId });\n  };\n\n  // Get current conversation\n  const currentConversation = conversations.find((c: Conversation) => c.id === currentConversationId);\n\n  return {\n    conversations,\n    messages,\n    currentConversation,\n    currentConversationId,\n    setCurrentConversationId,\n    isLoading: sendMessageMutation.isPending,\n    isLoadingMessages,\n    sendMessage,\n    createConversation: createConversationMutation.mutateAsync,\n  };\n}\n","size_bytes":6708},"client/src/hooks/use-file-upload.ts":{"content":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { File as FileType } from \"@shared/schema\";\n\nexport interface FileUploadProgress {\n  loaded: number;\n  total: number;\n  percentage: number;\n}\n\nexport function useFileUpload() {\n  const queryClient = useQueryClient();\n  const userId = \"default-user\";\n\n  const uploadFileMutation = useMutation({\n    mutationFn: async (file: File): Promise<FileType> => {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('userId', userId);\n\n      // Create a custom fetch with progress tracking\n      const response = await fetch('/api/files/upload', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Upload failed: ${response.status} ${errorText}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate files query to refetch the list\n      queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n    },\n  });\n\n  const uploadMultipleFilesMutation = useMutation({\n    mutationFn: async (files: File[]): Promise<FileType[]> => {\n      const uploadPromises = files.map(file => uploadFileMutation.mutateAsync(file));\n      return Promise.all(uploadPromises);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n    },\n  });\n\n  const deleteFileMutation = useMutation({\n    mutationFn: async (fileId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/files/${fileId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n    },\n  });\n\n  // Validate file before upload\n  const validateFile = (file: File, options?: {\n    maxSize?: number;\n    allowedTypes?: string[];\n  }): { valid: boolean; error?: string } => {\n    const { maxSize = 50 * 1024 * 1024, allowedTypes } = options || {}; // 50MB default\n\n    if (file.size > maxSize) {\n      return {\n        valid: false,\n        error: `File size too large. Maximum size is ${Math.round(maxSize / 1024 / 1024)}MB`,\n      };\n    }\n\n    if (allowedTypes && allowedTypes.length > 0) {\n      const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\n      if (!allowedTypes.includes(fileExtension)) {\n        return {\n          valid: false,\n          error: `File type not supported. Allowed types: ${allowedTypes.join(', ')}`,\n        };\n      }\n    }\n\n    return { valid: true };\n  };\n\n  // Upload a single file with validation\n  const uploadFile = async (file: File, options?: {\n    maxSize?: number;\n    allowedTypes?: string[];\n  }): Promise<FileType> => {\n    const validation = validateFile(file, options);\n    if (!validation.valid) {\n      throw new Error(validation.error);\n    }\n\n    return uploadFileMutation.mutateAsync(file);\n  };\n\n  // Upload multiple files with validation\n  const uploadFiles = async (files: File[], options?: {\n    maxSize?: number;\n    allowedTypes?: string[];\n  }): Promise<FileType[]> => {\n    // Validate all files first\n    for (const file of files) {\n      const validation = validateFile(file, options);\n      if (!validation.valid) {\n        throw new Error(`${file.name}: ${validation.error}`);\n      }\n    }\n\n    return uploadMultipleFilesMutation.mutateAsync(files);\n  };\n\n  // Delete a file\n  const deleteFile = (fileId: string) => {\n    return deleteFileMutation.mutateAsync(fileId);\n  };\n\n  // Get file download URL\n  const getFileUrl = (fileId: string): string => {\n    return `/api/files/${fileId}/content`;\n  };\n\n  // Check if file type is supported for analysis\n  const isAnalyzableFile = (filename: string): boolean => {\n    const analyzableExtensions = [\n      '.js', '.jsx', '.ts', '.tsx', '.py', '.java', '.cpp', '.c', '.h',\n      '.css', '.html', '.php', '.rb', '.go', '.rs', '.swift', '.md', '.txt'\n    ];\n    \n    const extension = '.' + filename.split('.').pop()?.toLowerCase();\n    return analyzableExtensions.includes(extension);\n  };\n\n  // Get file type icon class\n  const getFileIcon = (filename: string, mimeType?: string): string => {\n    if (mimeType?.startsWith('image/')) return 'fas fa-image';\n    if (mimeType?.includes('pdf')) return 'fas fa-file-pdf';\n    if (mimeType?.includes('word')) return 'fas fa-file-word';\n    \n    const extension = filename.split('.').pop()?.toLowerCase();\n    switch (extension) {\n      case 'js':\n      case 'jsx':\n      case 'ts':\n      case 'tsx':\n        return 'fab fa-js-square';\n      case 'py':\n        return 'fab fa-python';\n      case 'java':\n        return 'fab fa-java';\n      case 'html':\n        return 'fab fa-html5';\n      case 'css':\n        return 'fab fa-css3-alt';\n      case 'md':\n        return 'fab fa-markdown';\n      case 'txt':\n        return 'fas fa-file-alt';\n      default:\n        return 'fas fa-file';\n    }\n  };\n\n  return {\n    // Actions\n    uploadFile,\n    uploadFiles,\n    deleteFile,\n    validateFile,\n    getFileUrl,\n    isAnalyzableFile,\n    getFileIcon,\n\n    // States\n    isUploading: uploadFileMutation.isPending || uploadMultipleFilesMutation.isPending,\n    isDeleting: deleteFileMutation.isPending,\n\n    // Progress (for single file)\n    uploadProgress: uploadFileMutation.variables ? {\n      loaded: 0,\n      total: uploadFileMutation.variables.size,\n      percentage: 0,\n    } as FileUploadProgress : null,\n\n    // Errors\n    uploadError: uploadFileMutation.error || uploadMultipleFilesMutation.error,\n    deleteError: deleteFileMutation.error,\n\n    // Last uploaded file(s)\n    lastUploadedFile: uploadFileMutation.data,\n    lastUploadedFiles: uploadMultipleFilesMutation.data,\n  };\n}\n","size_bytes":5770},"client/src/hooks/use-llm.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { LLMConfiguration } from \"@shared/schema\";\n\nexport interface LLMMessage {\n  role: \"system\" | \"user\" | \"assistant\";\n  content: string;\n}\n\nexport interface LLMResponse {\n  content: string;\n  usage?: {\n    promptTokens: number;\n    completionTokens: number;\n    totalTokens: number;\n  };\n}\n\nexport function useLLM() {\n  const queryClient = useQueryClient();\n  const userId = \"default-user\";\n\n  // Get LLM configurations\n  const { data: configs = [], isLoading: isLoadingConfigs } = useQuery({\n    queryKey: [\"/api/llm-configurations\", { userId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/llm-configurations?userId=${userId}`);\n      return response.json();\n    },\n  });\n\n  // Get default configuration\n  const defaultConfig = configs.find((config: LLMConfiguration) => config.isDefault) || configs[0];\n\n  // Send message to LLM\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({\n      messages,\n      configId,\n      temperature,\n      maxTokens,\n    }: {\n      messages: LLMMessage[];\n      configId?: string;\n      temperature?: number;\n      maxTokens?: number;\n    }) => {\n      const config = configId || defaultConfig?.id;\n      if (!config) {\n        throw new Error(\"No LLM configuration available\");\n      }\n\n      const response = await apiRequest(\"POST\", \"/api/llm/chat\", {\n        configId: config,\n        messages,\n        temperature,\n        maxTokens,\n      });\n      return response.json() as Promise<LLMResponse>;\n    },\n  });\n\n  // Test LLM connection\n  const testConnectionMutation = useMutation({\n    mutationFn: async ({ endpoint, model }: { endpoint: string; model: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/llm/test-connection\", {\n        endpoint,\n        model,\n      });\n      return response.json();\n    },\n  });\n\n  // Get available models from endpoint\n  const getModelsMutation = useMutation({\n    mutationFn: async (endpoint: string) => {\n      const response = await apiRequest(\"GET\", `/api/llm/models?endpoint=${encodeURIComponent(endpoint)}`);\n      return response.json();\n    },\n  });\n\n  // Create new LLM configuration\n  const createConfigMutation = useMutation({\n    mutationFn: async (configData: Omit<LLMConfiguration, \"id\" | \"createdAt\">) => {\n      const response = await apiRequest(\"POST\", \"/api/llm-configurations\", {\n        ...configData,\n        userId,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/llm-configurations\"] });\n    },\n  });\n\n  // Update LLM configuration\n  const updateConfigMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<LLMConfiguration> }) => {\n      const response = await apiRequest(\"PUT\", `/api/llm-configurations/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/llm-configurations\"] });\n    },\n  });\n\n  // Delete LLM configuration\n  const deleteConfigMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/llm-configurations/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/llm-configurations\"] });\n    },\n  });\n\n  const sendMessage = (messages: LLMMessage[], options?: {\n    configId?: string;\n    temperature?: number;\n    maxTokens?: number;\n  }) => {\n    return sendMessageMutation.mutateAsync({\n      messages,\n      ...options,\n    });\n  };\n\n  const testConnection = (endpoint: string, model: string) => {\n    return testConnectionMutation.mutateAsync({ endpoint, model });\n  };\n\n  const getAvailableModels = (endpoint: string) => {\n    return getModelsMutation.mutateAsync(endpoint);\n  };\n\n  const createConfig = (configData: Omit<LLMConfiguration, \"id\" | \"createdAt\">) => {\n    return createConfigMutation.mutateAsync(configData);\n  };\n\n  const updateConfig = (id: string, updates: Partial<LLMConfiguration>) => {\n    return updateConfigMutation.mutateAsync({ id, updates });\n  };\n\n  const deleteConfig = (id: string) => {\n    return deleteConfigMutation.mutateAsync(id);\n  };\n\n  return {\n    // Data\n    configs,\n    defaultConfig,\n    isLoadingConfigs,\n\n    // Actions\n    sendMessage,\n    testConnection,\n    getAvailableModels,\n    createConfig,\n    updateConfig,\n    deleteConfig,\n\n    // Mutation states\n    isSending: sendMessageMutation.isPending,\n    isTesting: testConnectionMutation.isPending,\n    isLoadingModels: getModelsMutation.isPending,\n    isCreating: createConfigMutation.isPending,\n    isUpdating: updateConfigMutation.isPending,\n    isDeleting: deleteConfigMutation.isPending,\n\n    // Last response\n    lastResponse: sendMessageMutation.data,\n    \n    // Errors\n    sendError: sendMessageMutation.error,\n    testError: testConnectionMutation.error,\n    modelsError: getModelsMutation.error,\n  };\n}\n","size_bytes":5072},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const sessionId = localStorage.getItem('sessionId');\n  const headers: Record<string, string> = data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  if (sessionId) {\n    headers['x-session-id'] = sessionId;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Build URL with proper query parameter handling\n    let url: string;\n    const [base, second, ...rest] = queryKey as [string, any, ...string[]];\n    \n    // If second element is an object, treat it as query parameters\n    if (second && typeof second === 'object' && !Array.isArray(second)) {\n      const params = new URLSearchParams();\n      Object.entries(second).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, String(value));\n        }\n      });\n      url = base + (params.toString() ? `?${params.toString()}` : '');\n      if (rest.length > 0) {\n        url += `/${rest.join('/')}`;\n      }\n    } else {\n      // Fallback to original behavior for backwards compatibility\n      url = queryKey.filter(Boolean).join(\"/\") as string;\n    }\n\n    const sessionId = localStorage.getItem('sessionId');\n    const headers: Record<string, string> = {};\n    \n    if (sessionId) {\n      headers['x-session-id'] = sessionId;\n    }\n\n    const res = await fetch(url, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2526},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/code-analysis.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useFileUpload } from \"@/hooks/use-file-upload\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { File as FileType } from \"@shared/schema\";\n\ninterface CodeMetrics {\n  functions: number;\n  classes: number;\n  imports: number;\n  comments: number;\n}\n\ninterface FileAnalysis {\n  type: string;\n  language?: string;\n  lineCount?: number;\n  size: number;\n  complexity?: 'low' | 'medium' | 'high';\n  summary?: string;\n  codeMetrics?: CodeMetrics;\n}\n\nexport default function CodeAnalysis() {\n  const [selectedFile, setSelectedFile] = useState<FileType | null>(null);\n  const [githubUrl, setGithubUrl] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"files\");\n  const { toast } = useToast();\n  const userId = \"default-user\";\n\n  const { uploadFile, isUploading } = useFileUpload();\n\n  const { data: files = [], isLoading: isLoadingFiles, refetch: refetchFiles } = useQuery({\n    queryKey: [\"/api/files\", { userId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/files?userId=${userId}`);\n      return response.json();\n    },\n  });\n\n  const analyzeGitHubMutation = useMutation({\n    mutationFn: async (url: string) => {\n      const urlParts = url.replace('https://github.com/', '').split('/');\n      if (urlParts.length !== 2) throw new Error(\"Invalid GitHub URL\");\n      \n      const [owner, repo] = urlParts;\n      const response = await apiRequest(\"GET\", `/api/github/repositories/${owner}/${repo}/analyze`);\n      return response.json();\n    },\n    onSuccess: (analysis) => {\n      toast({\n        title: \"Analysis Complete\",\n        description: \"GitHub repository analysis completed successfully.\",\n      });\n      setActiveTab(\"github\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Analysis Failed\",\n        description: error instanceof Error ? error.message : \"Failed to analyze repository\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = async (uploadedFiles: File[]) => {\n    try {\n      for (const file of uploadedFiles) {\n        await uploadFile(file);\n      }\n      await refetchFiles();\n      toast({\n        title: \"Files Uploaded\",\n        description: `${uploadedFiles.length} file(s) uploaded and analyzed successfully.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload files. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    const droppedFiles = Array.from(e.dataTransfer.files);\n    const codeFiles = droppedFiles.filter(file => {\n      const ext = file.name.split('.').pop()?.toLowerCase();\n      return ['js', 'jsx', 'ts', 'tsx', 'py', 'java', 'cpp', 'c', 'h', 'css', 'html', 'php', 'rb', 'go', 'rs', 'swift'].includes(ext || '');\n    });\n    \n    if (codeFiles.length > 0) {\n      handleFileUpload(codeFiles);\n    }\n  };\n\n  const getComplexityColor = (complexity?: string) => {\n    switch (complexity) {\n      case 'low': return 'bg-green-500';\n      case 'medium': return 'bg-yellow-500';\n      case 'high': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getLanguageIcon = (language?: string) => {\n    const iconMap: Record<string, string> = {\n      javascript: 'fab fa-js-square',\n      typescript: 'fab fa-js-square',\n      python: 'fab fa-python',\n      java: 'fab fa-java',\n      php: 'fab fa-php',\n      html: 'fab fa-html5',\n      css: 'fab fa-css3-alt',\n      react: 'fab fa-react',\n      node: 'fab fa-node-js',\n    };\n    return iconMap[language?.toLowerCase() || ''] || 'fas fa-file-code';\n  };\n\n  if (isLoadingFiles) {\n    return (\n      <div className=\"flex-1 p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"h-48 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 p-6 space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold text-foreground\">Code Analysis</h1>\n        <p className=\"text-muted-foreground\">Analyze and optimize your code files and repositories</p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"files\" data-testid=\"tab-files\">Uploaded Files</TabsTrigger>\n          <TabsTrigger value=\"upload\" data-testid=\"tab-upload\">Upload & Analyze</TabsTrigger>\n          <TabsTrigger value=\"github\" data-testid=\"tab-github\">GitHub Analysis</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"files\" className=\"space-y-4\">\n          {files.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-file-code text-muted-foreground text-xl\"></i>\n                </div>\n                <h3 className=\"text-lg font-medium mb-2\">No Files Analyzed</h3>\n                <p className=\"text-muted-foreground text-center mb-4\">\n                  Upload your code files to get detailed analysis and optimization suggestions.\n                </p>\n                <Button onClick={() => setActiveTab(\"upload\")} data-testid=\"button-start-upload\">\n                  <i className=\"fas fa-upload mr-2\"></i>\n                  Upload Files\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {files.map((file: FileType) => {\n                const analysis = file.analysis as FileAnalysis;\n                return (\n                  <Card\n                    key={file.id}\n                    className=\"hover:bg-accent transition-colors cursor-pointer\"\n                    onClick={() => setSelectedFile(file)}\n                    data-testid={`file-card-${file.id}`}\n                  >\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <i className={`${getLanguageIcon(analysis?.language)} text-primary`}></i>\n                          <CardTitle className=\"text-sm\">{file.originalName}</CardTitle>\n                        </div>\n                        {analysis?.complexity && (\n                          <Badge variant=\"outline\" className={`text-xs ${getComplexityColor(analysis.complexity)}`}>\n                            {analysis.complexity}\n                          </Badge>\n                        )}\n                      </div>\n                      <CardDescription className=\"text-xs\">\n                        {analysis?.language && (\n                          <span className=\"capitalize\">{analysis.language}</span>\n                        )}\n                        {analysis?.lineCount && (\n                          <span> â€¢ {analysis.lineCount} lines</span>\n                        )}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"pt-0\">\n                      {analysis?.codeMetrics && (\n                        <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                          <div className=\"flex justify-between\">\n                            <span>Functions:</span>\n                            <span className=\"font-medium\">{analysis.codeMetrics.functions}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Classes:</span>\n                            <span className=\"font-medium\">{analysis.codeMetrics.classes}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Imports:</span>\n                            <span className=\"font-medium\">{analysis.codeMetrics.imports}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Comments:</span>\n                            <span className=\"font-medium\">{analysis.codeMetrics.comments}</span>\n                          </div>\n                        </div>\n                      )}\n                      {analysis?.summary && (\n                        <p className=\"text-xs text-muted-foreground mt-2 line-clamp-2\">\n                          {analysis.summary}\n                        </p>\n                      )}\n                      <div className=\"flex justify-between items-center mt-3 text-xs text-muted-foreground\">\n                        <span>{(file.size / 1024).toFixed(1)} KB</span>\n                        <span>{new Date(file.createdAt!).toLocaleDateString()}</span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"upload\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Upload Code Files</CardTitle>\n              <CardDescription>\n                Drag and drop your code files or click to browse. Supported formats: .js, .jsx, .ts, .tsx, .py, .java, .cpp, .c, .h, .css, .html, .php, .rb, .go, .rs, .swift\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div\n                className=\"border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary/50 transition-colors cursor-pointer\"\n                onDragOver={handleDragOver}\n                onDrop={handleDrop}\n                onClick={() => document.getElementById('file-upload')?.click()}\n                data-testid=\"upload-zone\"\n              >\n                <div className=\"space-y-4\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto\">\n                    <i className=\"fas fa-cloud-upload-alt text-primary text-xl\"></i>\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">Drop your code files here</p>\n                    <p className=\"text-sm text-muted-foreground\">or click to browse files</p>\n                  </div>\n                  {isUploading && (\n                    <div className=\"space-y-2\">\n                      <Progress value={75} className=\"w-full max-w-xs mx-auto\" />\n                      <p className=\"text-sm text-muted-foreground\">Analyzing files...</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <input\n                id=\"file-upload\"\n                type=\"file\"\n                multiple\n                accept=\".js,.jsx,.ts,.tsx,.py,.java,.cpp,.c,.h,.css,.html,.php,.rb,.go,.rs,.swift\"\n                className=\"hidden\"\n                onChange={(e) => {\n                  const files = Array.from(e.target.files || []);\n                  if (files.length > 0) {\n                    handleFileUpload(files);\n                  }\n                }}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"github\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Analyze GitHub Repository</CardTitle>\n              <CardDescription>\n                Enter a GitHub repository URL to perform comprehensive code analysis\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"https://github.com/username/repository\"\n                  value={githubUrl}\n                  onChange={(e) => setGithubUrl(e.target.value)}\n                  data-testid=\"input-github-url\"\n                />\n                <Button\n                  onClick={() => analyzeGitHubMutation.mutate(githubUrl)}\n                  disabled={!githubUrl || analyzeGitHubMutation.isPending}\n                  data-testid=\"button-analyze-github\"\n                >\n                  {analyzeGitHubMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Analyzing...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-chart-line mr-2\"></i>\n                      Analyze\n                    </>\n                  )}\n                </Button>\n              </div>\n\n              {analyzeGitHubMutation.data && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Analysis Results</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                      <div className=\"text-center p-3 bg-muted rounded\">\n                        <p className=\"text-2xl font-bold text-primary\">{analyzeGitHubMutation.data.files?.length || 0}</p>\n                        <p className=\"text-sm text-muted-foreground\">Files</p>\n                      </div>\n                      <div className=\"text-center p-3 bg-muted rounded\">\n                        <p className=\"text-2xl font-bold text-primary\">{Object.keys(analyzeGitHubMutation.data.languages || {}).length}</p>\n                        <p className=\"text-sm text-muted-foreground\">Languages</p>\n                      </div>\n                      <div className=\"text-center p-3 bg-muted rounded\">\n                        <p className=\"text-2xl font-bold text-primary\">{analyzeGitHubMutation.data.structure?.directories?.length || 0}</p>\n                        <p className=\"text-sm text-muted-foreground\">Directories</p>\n                      </div>\n                      <div className=\"text-center p-3 bg-muted rounded\">\n                        <Badge\n                          variant={\n                            analyzeGitHubMutation.data.complexity === \"low\" ? \"secondary\" :\n                            analyzeGitHubMutation.data.complexity === \"medium\" ? \"default\" : \"destructive\"\n                          }\n                          className=\"text-sm\"\n                        >\n                          {analyzeGitHubMutation.data.complexity} complexity\n                        </Badge>\n                      </div>\n                    </div>\n\n                    {analyzeGitHubMutation.data.languages && (\n                      <div>\n                        <h4 className=\"font-medium mb-2\">Languages Used</h4>\n                        <div className=\"space-y-2\">\n                          {Object.entries(analyzeGitHubMutation.data.languages).map(([lang, bytes]: [string, any]) => {\n                            const total = Object.values(analyzeGitHubMutation.data.languages).reduce((a: any, b: any) => a + b, 0);\n                            const percentage = ((bytes / total) * 100).toFixed(1);\n                            return (\n                              <div key={lang} className=\"flex items-center justify-between\">\n                                <span className=\"text-sm\">{lang}</span>\n                                <div className=\"flex items-center gap-2\">\n                                  <div className=\"w-20 bg-muted rounded-full h-2\">\n                                    <div className=\"bg-primary h-2 rounded-full\" style={{ width: `${percentage}%` }}></div>\n                                  </div>\n                                  <span className=\"text-xs text-muted-foreground w-12\">{percentage}%</span>\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    )}\n\n                    {analyzeGitHubMutation.data.suggestions && (\n                      <div>\n                        <h4 className=\"font-medium mb-2\">Optimization Suggestions</h4>\n                        <ul className=\"space-y-2\">\n                          {analyzeGitHubMutation.data.suggestions.map((suggestion: string, index: number) => (\n                            <li key={index} className=\"flex items-start gap-2 text-sm\">\n                              <i className=\"fas fa-lightbulb text-primary text-xs mt-0.5\"></i>\n                              {suggestion}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* File Details Modal */}\n      {selectedFile && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n          <Card className=\"w-full max-w-4xl max-h-[80vh] overflow-auto\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <i className={`${getLanguageIcon((selectedFile.analysis as FileAnalysis)?.language)} text-primary`}></i>\n                  {selectedFile.originalName}\n                </CardTitle>\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => setSelectedFile(null)} data-testid=\"button-close-file-details\">\n                  <i className=\"fas fa-times\"></i>\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-lg font-bold\">{((selectedFile.analysis as FileAnalysis)?.lineCount || 0).toLocaleString()}</p>\n                  <p className=\"text-sm text-muted-foreground\">Lines of Code</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-lg font-bold\">{(selectedFile.size / 1024).toFixed(1)} KB</p>\n                  <p className=\"text-sm text-muted-foreground\">File Size</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-lg font-bold capitalize\">{(selectedFile.analysis as FileAnalysis)?.language || 'Unknown'}</p>\n                  <p className=\"text-sm text-muted-foreground\">Language</p>\n                </div>\n                <div className=\"text-center\">\n                  <Badge variant={\n                    (selectedFile.analysis as FileAnalysis)?.complexity === \"low\" ? \"secondary\" :\n                    (selectedFile.analysis as FileAnalysis)?.complexity === \"medium\" ? \"default\" : \"destructive\"\n                  }>\n                    {(selectedFile.analysis as FileAnalysis)?.complexity || 'unknown'} complexity\n                  </Badge>\n                </div>\n              </div>\n\n              {(selectedFile.analysis as FileAnalysis)?.codeMetrics && (\n                <div>\n                  <h4 className=\"font-medium mb-2\">Code Metrics</h4>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <div className=\"bg-muted p-3 rounded text-center\">\n                      <p className=\"text-xl font-bold text-primary\">{(selectedFile.analysis as FileAnalysis).codeMetrics!.functions}</p>\n                      <p className=\"text-sm text-muted-foreground\">Functions</p>\n                    </div>\n                    <div className=\"bg-muted p-3 rounded text-center\">\n                      <p className=\"text-xl font-bold text-primary\">{(selectedFile.analysis as FileAnalysis).codeMetrics!.classes}</p>\n                      <p className=\"text-sm text-muted-foreground\">Classes</p>\n                    </div>\n                    <div className=\"bg-muted p-3 rounded text-center\">\n                      <p className=\"text-xl font-bold text-primary\">{(selectedFile.analysis as FileAnalysis).codeMetrics!.imports}</p>\n                      <p className=\"text-sm text-muted-foreground\">Imports</p>\n                    </div>\n                    <div className=\"bg-muted p-3 rounded text-center\">\n                      <p className=\"text-xl font-bold text-primary\">{(selectedFile.analysis as FileAnalysis).codeMetrics!.comments}</p>\n                      <p className=\"text-sm text-muted-foreground\">Comments</p>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {(selectedFile.analysis as FileAnalysis)?.summary && (\n                <div>\n                  <h4 className=\"font-medium mb-2\">Summary</h4>\n                  <p className=\"text-sm text-muted-foreground bg-muted p-3 rounded\">\n                    {(selectedFile.analysis as FileAnalysis).summary}\n                  </p>\n                </div>\n              )}\n\n              <div className=\"flex justify-between items-center pt-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  <p>Uploaded: {new Date(selectedFile.createdAt!).toLocaleString()}</p>\n                  <p>Type: {(selectedFile.analysis as FileAnalysis)?.type || 'Unknown'}</p>\n                </div>\n                <Button\n                  onClick={() => window.open(`/api/files/${selectedFile.id}/content`, '_blank')}\n                  data-testid=\"button-download-file\"\n                >\n                  <i className=\"fas fa-download mr-2\"></i>\n                  Download\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":22689},"client/src/pages/document-analysis.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport FileUploadZone from \"@/components/chat/file-upload-zone\";\nimport { useFileUpload } from \"@/hooks/use-file-upload\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { File as FileType } from \"@shared/schema\";\n\ninterface FileAnalysis {\n  type: string;\n  language?: string;\n  lineCount?: number;\n  size: number;\n  complexity?: 'low' | 'medium' | 'high';\n  summary?: string;\n  codeMetrics?: {\n    functions: number;\n    classes: number;\n    imports: number;\n    comments: number;\n  };\n}\n\n// Generate dynamic insights based on uploaded files\nfunction generateInsights(files: FileType[]) {\n  const insights = [];\n  \n  if (files.length === 0) {\n    return [];\n  }\n  \n  const codeFiles = files.filter(f => (f.analysis as any)?.type === 'code');\n  const documentFiles = files.filter(f => (f.analysis as any)?.type === 'document' || (f.analysis as any)?.type === 'text');\n  const highComplexityFiles = files.filter(f => (f.analysis as any)?.complexity === 'high');\n  const lowCommentFiles = codeFiles.filter(f => {\n    const metrics = (f.analysis as any)?.codeMetrics;\n    if (!metrics) return false;\n    const commentRatio = metrics.comments / Math.max((f.analysis as any)?.lineCount || 1, 1);\n    return commentRatio < 0.1;\n  });\n  \n  // Code organization insights\n  if (codeFiles.length > 5) {\n    insights.push({\n      title: \"Code Organization\",\n      description: `You have ${codeFiles.length} code files. Consider organizing them into logical directories for better maintainability.`,\n      icon: \"fas fa-folder-tree text-blue-500\",\n      color: \"bg-blue-500/10 border-blue-500/20\"\n    });\n  }\n  \n  // Complexity warnings\n  if (highComplexityFiles.length > 0) {\n    insights.push({\n      title: \"High Complexity Files\",\n      description: `${highComplexityFiles.length} files have high complexity. Consider refactoring large functions into smaller, focused ones.`,\n      icon: \"fas fa-exclamation-triangle text-yellow-500\",\n      color: \"bg-yellow-500/10 border-yellow-500/20\"\n    });\n  }\n  \n  // Documentation suggestions\n  if (lowCommentFiles.length > 0) {\n    insights.push({\n      title: \"Documentation Needed\",\n      description: `${lowCommentFiles.length} code files have minimal comments. Adding documentation will improve maintainability.`,\n      icon: \"fas fa-file-text text-orange-500\",\n      color: \"bg-orange-500/10 border-orange-500/20\"\n    });\n  }\n  \n  // README suggestion\n  if (files.length > 0 && !files.some(f => f.originalName.toLowerCase().includes('readme'))) {\n    insights.push({\n      title: \"Missing README\",\n      description: \"Consider adding a README file to document your project's purpose, setup instructions, and usage.\",\n      icon: \"fas fa-info-circle text-indigo-500\",\n      color: \"bg-indigo-500/10 border-indigo-500/20\"\n    });\n  }\n  \n  // Positive feedback\n  if (codeFiles.length > 0 && highComplexityFiles.length === 0) {\n    insights.push({\n      title: \"Good Code Structure\",\n      description: \"Your code files show good complexity levels. Keep maintaining this clean structure!\",\n      icon: \"fas fa-check-circle text-green-500\",\n      color: \"bg-green-500/10 border-green-500/20\"\n    });\n  }\n  \n  // Language diversity\n  const languages = new Set(codeFiles.map(f => f.analysis?.language).filter(Boolean));\n  if (languages.size > 3) {\n    insights.push({\n      title: \"Multi-Language Project\",\n      description: `Your project uses ${languages.size} different languages. Ensure consistent coding standards across all languages.`,\n      icon: \"fas fa-globe text-purple-500\",\n      color: \"bg-purple-500/10 border-purple-500/20\"\n    });\n  }\n  \n  return insights;\n}\n\nexport default function DocumentAnalysis() {\n  const [selectedFile, setSelectedFile] = useState<FileType | null>(null);\n  const [fileContent, setFileContent] = useState<string | null>(null);\n  const [showUploadZone, setShowUploadZone] = useState(false);\n  const { toast } = useToast();\n  const userId = \"demo-user\";\n\n  const { uploadFile, isUploading } = useFileUpload();\n\n  const { data: files = [], isLoading, refetch } = useQuery({\n    queryKey: [\"/api/files\", { userId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/files?userId=${userId}`);\n      return response.json();\n    },\n  });\n\n  const handleFileUpload = async (uploadedFiles: File[]) => {\n    try {\n      for (const file of uploadedFiles) {\n        await uploadFile(file);\n      }\n      await refetch();\n      setShowUploadZone(false);\n      toast({\n        title: \"Files Uploaded\",\n        description: `${uploadedFiles.length} file(s) uploaded and analyzed successfully.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload files. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleViewFile = async (file: FileType) => {\n    setSelectedFile(file);\n    try {\n      const response = await fetch(`/api/files/${file.id}/content`);\n      if (response.ok) {\n        const content = await response.text();\n        setFileContent(content);\n      }\n    } catch (error) {\n      console.error(\"Error fetching file content:\", error);\n      setFileContent(null);\n    }\n  };\n\n  const getFileIcon = (mimeType: string, fileName: string) => {\n    if (mimeType.startsWith('image/')) return 'fas fa-image';\n    if (mimeType.includes('pdf')) return 'fas fa-file-pdf';\n    if (mimeType.includes('word') || fileName.endsWith('.docx') || fileName.endsWith('.doc')) return 'fas fa-file-word';\n    if (mimeType.includes('text') || fileName.endsWith('.txt') || fileName.endsWith('.md')) return 'fas fa-file-alt';\n    if (fileName.endsWith('.js') || fileName.endsWith('.jsx') || fileName.endsWith('.ts') || fileName.endsWith('.tsx')) return 'fab fa-js-square';\n    if (fileName.endsWith('.py')) return 'fab fa-python';\n    if (fileName.endsWith('.java')) return 'fab fa-java';\n    if (fileName.endsWith('.html')) return 'fab fa-html5';\n    if (fileName.endsWith('.css')) return 'fab fa-css3-alt';\n    return 'fas fa-file';\n  };\n\n  const getComplexityColor = (complexity?: string) => {\n    switch (complexity) {\n      case 'low': return 'text-green-500';\n      case 'medium': return 'text-yellow-500';\n      case 'high': return 'text-red-500';\n      default: return 'text-gray-500';\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n    \n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n    \n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"h-48 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Document Analysis</h1>\n          <p className=\"text-muted-foreground\">Upload and analyze various document types</p>\n        </div>\n        <Button onClick={() => setShowUploadZone(true)} data-testid=\"button-upload-documents\">\n          <i className=\"fas fa-upload mr-2\"></i>\n          Upload Documents\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"files\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"files\" data-testid=\"tab-files\">All Files</TabsTrigger>\n          <TabsTrigger value=\"analysis\" data-testid=\"tab-analysis\">Analysis Results</TabsTrigger>\n          <TabsTrigger value=\"insights\" data-testid=\"tab-insights\">Insights</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"files\" className=\"space-y-4\">\n          {files.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-file-alt text-muted-foreground text-xl\"></i>\n                </div>\n                <h3 className=\"text-lg font-medium mb-2\">No Documents Uploaded</h3>\n                <p className=\"text-muted-foreground text-center mb-4\">\n                  Upload your documents to get detailed analysis and insights.\n                </p>\n                <Button onClick={() => setShowUploadZone(true)} data-testid=\"button-upload-first\">\n                  <i className=\"fas fa-upload mr-2\"></i>\n                  Upload Your First Document\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {files.map((file: FileType) => {\n                const analysis = file.analysis as FileAnalysis;\n                return (\n                  <Card\n                    key={file.id}\n                    className=\"hover:bg-accent transition-colors cursor-pointer\"\n                    onClick={() => handleViewFile(file)}\n                    data-testid={`file-card-${file.id}`}\n                  >\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <i className={`${getFileIcon(file.mimeType, file.originalName)} text-primary`}></i>\n                          <CardTitle className=\"text-sm truncate\">{file.originalName}</CardTitle>\n                        </div>\n                        {analysis?.complexity && (\n                          <Badge variant=\"outline\" className={`text-xs ${getComplexityColor(analysis.complexity)}`}>\n                            {analysis.complexity}\n                          </Badge>\n                        )}\n                      </div>\n                      <CardDescription className=\"text-xs\">\n                        {analysis?.type && (\n                          <span className=\"capitalize\">{analysis.type}</span>\n                        )}\n                        {analysis?.language && (\n                          <span> â€¢ {analysis.language}</span>\n                        )}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"pt-0\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-xs\">\n                          <span>Size:</span>\n                          <span className=\"font-medium\">{formatFileSize(file.size)}</span>\n                        </div>\n                        {analysis?.lineCount && (\n                          <div className=\"flex justify-between text-xs\">\n                            <span>Lines:</span>\n                            <span className=\"font-medium\">{analysis.lineCount.toLocaleString()}</span>\n                          </div>\n                        )}\n                        <div className=\"flex justify-between text-xs\">\n                          <span>Uploaded:</span>\n                          <span className=\"font-medium\">{new Date(file.createdAt!).toLocaleDateString()}</span>\n                        </div>\n                      </div>\n                      \n                      {analysis?.summary && (\n                        <p className=\"text-xs text-muted-foreground mt-3 line-clamp-2\">\n                          {analysis.summary}\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"analysis\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-primary\">{files.length}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Files</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-primary\">\n                  {formatFileSize(files.reduce((sum: number, file: FileType) => sum + file.size, 0))}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Total Size</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-primary\">\n                  {[...new Set(files.map((f: FileType) => (f.analysis as FileAnalysis)?.type).filter(Boolean))].length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">File Types</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-primary\">\n                  {files.filter((f: FileType) => (f.analysis as FileAnalysis)?.type === 'code').length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Code Files</div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* File Type Distribution */}\n          <Card>\n            <CardHeader>\n              <CardTitle>File Type Distribution</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {Object.entries(\n                  files.reduce((acc: Record<string, number>, file: FileType) => {\n                    const type = (file.analysis as FileAnalysis)?.type || 'unknown';\n                    acc[type] = (acc[type] || 0) + 1;\n                    return acc;\n                  }, {})\n                ).map(([type, count]) => {\n                  const percentage = (count / files.length) * 100;\n                  return (\n                    <div key={type} className=\"space-y-1\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"capitalize\">{type}</span>\n                        <span>{count} files ({percentage.toFixed(1)}%)</span>\n                      </div>\n                      <Progress value={percentage} className=\"h-2\" />\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"insights\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Code Complexity Analysis</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {(['low', 'medium', 'high'] as const).map(complexity => {\n                    const count = files.filter((f: FileType) => (f.analysis as FileAnalysis)?.complexity === complexity).length;\n                    const codeFiles = files.filter((f: FileType) => (f.analysis as FileAnalysis)?.type === 'code').length;\n                    const percentage = codeFiles > 0 ? (count / codeFiles) * 100 : 0;\n                    \n                    return (\n                      <div key={complexity} className=\"space-y-1\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"capitalize flex items-center gap-2\">\n                            <div className={`w-3 h-3 rounded-full ${\n                              complexity === 'low' ? 'bg-green-500' :\n                              complexity === 'medium' ? 'bg-yellow-500' : 'bg-red-500'\n                            }`}></div>\n                            {complexity} Complexity\n                          </span>\n                          <span>{count} files ({percentage.toFixed(1)}%)</span>\n                        </div>\n                        <Progress value={percentage} className=\"h-2\" />\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Language Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {Object.entries(\n                    files\n                      .filter((f: FileType) => (f.analysis as FileAnalysis)?.language)\n                      .reduce((acc: Record<string, number>, file: FileType) => {\n                        const language = (file.analysis as FileAnalysis)?.language || 'unknown';\n                        acc[language] = (acc[language] || 0) + 1;\n                        return acc;\n                      }, {})\n                  ).slice(0, 5).map(([language, count]) => {\n                    const codeFiles = files.filter((f: FileType) => (f.analysis as FileAnalysis)?.language).length;\n                    const percentage = codeFiles > 0 ? (count / codeFiles) * 100 : 0;\n                    return (\n                      <div key={language} className=\"space-y-1\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"capitalize\">{language}</span>\n                          <span>{count} files ({percentage.toFixed(1)}%)</span>\n                        </div>\n                        <Progress value={percentage} className=\"h-2\" />\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Recommendations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {generateInsights(files).map((insight, index) => (\n                  <div key={index} className={`flex items-start gap-3 p-3 border rounded ${insight.color}`}>\n                    <i className={`${insight.icon} mt-0.5`}></i>\n                    <div>\n                      <p className=\"font-medium text-sm\">{insight.title}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {insight.description}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                {generateInsights(files).length === 0 && (\n                  <div className=\"text-center py-6\">\n                    <i className=\"fas fa-info-circle text-muted-foreground text-2xl mb-2\"></i>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Upload files to get personalized insights and recommendations.\n                    </p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Upload Zone Modal */}\n      {showUploadZone && (\n        <FileUploadZone\n          onFilesSelected={handleFileUpload}\n          onClose={() => setShowUploadZone(false)}\n          maxFiles={20}\n          maxFileSize={50 * 1024 * 1024} // 50MB\n          acceptedTypes={['.js', '.jsx', '.ts', '.tsx', '.py', '.md', '.txt', '.json', '.css', '.html', '.java', '.cpp', '.c', '.h', '.rb', '.go', '.rs', '.swift', '.pdf', '.doc', '.docx', '.png', '.jpg', '.jpeg', '.gif']}\n        />\n      )}\n\n      {/* File Details Modal */}\n      {selectedFile && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n          <Card className=\"w-full max-w-4xl max-h-[90vh] overflow-auto\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <i className={`${getFileIcon(selectedFile.mimeType, selectedFile.originalName)} text-primary`}></i>\n                  {selectedFile.originalName}\n                </CardTitle>\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => setSelectedFile(null)} data-testid=\"button-close-file-details\">\n                  <i className=\"fas fa-times\"></i>\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-lg font-bold\">{formatFileSize(selectedFile.size)}</p>\n                  <p className=\"text-sm text-muted-foreground\">File Size</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-lg font-bold capitalize\">{(selectedFile.analysis as FileAnalysis)?.type || 'Unknown'}</p>\n                  <p className=\"text-sm text-muted-foreground\">File Type</p>\n                </div>\n                {(selectedFile.analysis as FileAnalysis)?.lineCount && (\n                  <div className=\"text-center\">\n                    <p className=\"text-lg font-bold\">{((selectedFile.analysis as FileAnalysis)?.lineCount || 0).toLocaleString()}</p>\n                    <p className=\"text-sm text-muted-foreground\">Lines</p>\n                  </div>\n                )}\n                {(selectedFile.analysis as FileAnalysis)?.complexity && (\n                  <div className=\"text-center\">\n                    <Badge variant={\n                      (selectedFile.analysis as FileAnalysis)?.complexity === \"low\" ? \"secondary\" :\n                      (selectedFile.analysis as FileAnalysis)?.complexity === \"medium\" ? \"default\" : \"destructive\"\n                    }>\n                      {(selectedFile.analysis as FileAnalysis)?.complexity} complexity\n                    </Badge>\n                  </div>\n                )}\n              </div>\n\n              {(selectedFile.analysis as FileAnalysis)?.summary && (\n                <div>\n                  <h4 className=\"font-medium mb-2\">Summary</h4>\n                  <p className=\"text-sm text-muted-foreground bg-muted p-3 rounded\">\n                    {(selectedFile.analysis as FileAnalysis).summary}\n                  </p>\n                </div>\n              )}\n\n              {fileContent && (\n                <div>\n                  <h4 className=\"font-medium mb-2\">Content Preview</h4>\n                  <ScrollArea className=\"h-64 w-full border rounded bg-muted\">\n                    <pre className=\"p-3 text-xs font-mono whitespace-pre-wrap\">\n                      {fileContent.slice(0, 5000)}\n                      {fileContent.length > 5000 && \"\\n\\n... Content truncated\"}\n                    </pre>\n                  </ScrollArea>\n                </div>\n              )}\n\n              <div className=\"flex justify-between items-center pt-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  <p>Uploaded: {new Date(selectedFile.createdAt!).toLocaleString()}</p>\n                  <p>MIME Type: {selectedFile.mimeType}</p>\n                </div>\n                <Button\n                  onClick={() => window.open(`/api/files/${selectedFile.id}/content`, '_blank')}\n                  data-testid=\"button-download-file\"\n                >\n                  <i className=\"fas fa-download mr-2\"></i>\n                  Download\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Upload Progress */}\n      {isUploading && (\n        <div className=\"fixed bottom-4 right-4 bg-card border border-border rounded-lg p-4 shadow-lg\">\n          <div className=\"flex items-center gap-3\">\n            <i className=\"fas fa-spinner fa-spin text-primary\"></i>\n            <div>\n              <p className=\"text-sm font-medium\">Uploading and analyzing files...</p>\n              <Progress value={75} className=\"w-48 h-2 mt-1\" />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":24887},"client/src/pages/home.tsx":{"content":"import ChatInterface from \"@/components/chat/chat-interface\";\n\nexport default function Home() {\n  return <ChatInterface />;\n}\n","size_bytes":126},"client/src/pages/integrations.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface GitHubRepository {\n  id: number;\n  name: string;\n  fullName: string;\n  description: string | null;\n  url: string;\n  language: string | null;\n  stars: number;\n  forks: number;\n  private: boolean;\n  updatedAt: string;\n}\n\nconst createRepoSchema = z.object({\n  name: z.string().min(1, \"Repository name is required\"),\n  description: z.string().optional(),\n  private: z.boolean().default(false),\n});\n\ntype CreateRepoFormData = z.infer<typeof createRepoSchema>;\n\nexport default function Integrations() {\n  const [showCreateRepo, setShowCreateRepo] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: githubRepos = [], isLoading: isLoadingRepos, error: reposError } = useQuery({\n    queryKey: [\"/api/github/repositories\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/github/repositories\");\n      return response.json();\n    },\n    retry: false,\n  });\n\n  const createRepoMutation = useMutation({\n    mutationFn: async (data: CreateRepoFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/github/repositories\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/github/repositories\"] });\n      setShowCreateRepo(false);\n      toast({\n        title: \"Repository Created\",\n        description: \"Your GitHub repository has been created successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create repository\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<CreateRepoFormData>({\n    resolver: zodResolver(createRepoSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      private: false,\n    },\n  });\n\n  const onSubmit = (data: CreateRepoFormData) => {\n    createRepoMutation.mutate(data);\n  };\n\n  const integrationCards = [\n    {\n      name: \"GitHub\",\n      description: \"Connect your GitHub repositories for code analysis and project management\",\n      icon: \"fab fa-github\",\n      status: reposError ? \"disconnected\" : \"connected\",\n      color: \"text-gray-900 dark:text-gray-100\",\n      bgColor: \"bg-gray-100 dark:bg-gray-800\",\n    },\n    {\n      name: \"Google Search\",\n      description: \"Enhanced web search capabilities with Google's search API\",\n      icon: \"fab fa-google\",\n      status: \"configured\",\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-100 dark:bg-blue-900/20\",\n    },\n    {\n      name: \"Bing Search\",\n      description: \"Microsoft Bing search integration for comprehensive results\",\n      icon: \"fas fa-search\",\n      status: \"configured\",\n      color: \"text-blue-500\",\n      bgColor: \"bg-blue-100 dark:bg-blue-900/20\",\n    },\n    {\n      name: \"OpenAI\",\n      description: \"Connect to OpenAI's GPT models for enhanced AI capabilities\",\n      icon: \"fas fa-brain\",\n      status: \"available\",\n      color: \"text-green-600\",\n      bgColor: \"bg-green-100 dark:bg-green-900/20\",\n    },\n    {\n      name: \"Anthropic Claude\",\n      description: \"Integration with Anthropic's Claude AI models\",\n      icon: \"fas fa-robot\",\n      status: \"available\",\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-100 dark:bg-purple-900/20\",\n    },\n    {\n      name: \"Slack\",\n      description: \"Send notifications and updates to Slack channels\",\n      icon: \"fab fa-slack\",\n      status: \"available\",\n      color: \"text-green-500\",\n      bgColor: \"bg-green-100 dark:bg-green-900/20\",\n    },\n    {\n      name: \"Discord\",\n      description: \"Connect with Discord for team collaboration and notifications\",\n      icon: \"fab fa-discord\",\n      status: \"available\",\n      color: \"text-indigo-500\",\n      bgColor: \"bg-indigo-100 dark:bg-indigo-900/20\",\n    },\n    {\n      name: \"Jira\",\n      description: \"Integrate with Jira for project management and issue tracking\",\n      icon: \"fab fa-atlassian\",\n      status: \"available\",\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-100 dark:bg-blue-900/20\",\n    },\n  ];\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"connected\":\n        return <Badge className=\"bg-green-500/10 text-green-500 border-green-500/20\">Connected</Badge>;\n      case \"configured\":\n        return <Badge className=\"bg-blue-500/10 text-blue-500 border-blue-500/20\">Configured</Badge>;\n      case \"disconnected\":\n        return <Badge variant=\"destructive\">Disconnected</Badge>;\n      default:\n        return <Badge variant=\"outline\">Available</Badge>;\n    }\n  };\n\n  if (isLoadingRepos) {\n    return (\n      <div className=\"flex-1 p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 p-6 space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold text-foreground\">Integrations</h1>\n        <p className=\"text-muted-foreground\">Connect external services and APIs to enhance your AI assistant</p>\n      </div>\n\n      <Tabs defaultValue=\"services\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"services\" data-testid=\"tab-services\">Services</TabsTrigger>\n          <TabsTrigger value=\"github\" data-testid=\"tab-github\">GitHub</TabsTrigger>\n          <TabsTrigger value=\"webhooks\" data-testid=\"tab-webhooks\">Webhooks</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"services\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {integrationCards.map((integration) => (\n              <Card key={integration.name} className=\"hover:bg-accent transition-colors\" data-testid={`integration-${integration.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${integration.bgColor}`}>\n                        <i className={`${integration.icon} ${integration.color} text-lg`}></i>\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-base\">{integration.name}</CardTitle>\n                        {getStatusBadge(integration.status)}\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <CardDescription className=\"text-sm mb-4\">\n                    {integration.description}\n                  </CardDescription>\n                  <div className=\"flex justify-between items-center\">\n                    {integration.status === \"connected\" || integration.status === \"configured\" ? (\n                      <Button variant=\"outline\" size=\"sm\" data-testid={`button-configure-${integration.name.toLowerCase()}`}>\n                        <i className=\"fas fa-cog mr-2\"></i>\n                        Configure\n                      </Button>\n                    ) : integration.status === \"disconnected\" ? (\n                      <Button variant=\"outline\" size=\"sm\" data-testid={`button-reconnect-${integration.name.toLowerCase()}`}>\n                        <i className=\"fas fa-plug mr-2\"></i>\n                        Reconnect\n                      </Button>\n                    ) : (\n                      <Button variant=\"outline\" size=\"sm\" data-testid={`button-connect-${integration.name.toLowerCase()}`}>\n                        <i className=\"fas fa-plus mr-2\"></i>\n                        Connect\n                      </Button>\n                    )}\n                    <Switch \n                      checked={integration.status === \"connected\" || integration.status === \"configured\"}\n                      disabled={integration.status === \"available\" || integration.status === \"disconnected\"}\n                      data-testid={`toggle-${integration.name.toLowerCase()}`}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"github\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-xl font-semibold\">GitHub Integration</h2>\n              <p className=\"text-muted-foreground\">Manage your GitHub repositories and create new ones</p>\n            </div>\n            {!reposError && (\n              <Dialog open={showCreateRepo} onOpenChange={setShowCreateRepo}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-create-repo\">\n                    <i className=\"fab fa-github mr-2\"></i>\n                    Create Repository\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Create GitHub Repository</DialogTitle>\n                    <DialogDescription>\n                      Create a new repository on your GitHub account\n                    </DialogDescription>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Repository Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"my-awesome-project\" {...field} data-testid=\"input-repo-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"A brief description of your project\" {...field} data-testid=\"input-repo-description\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"private\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex items-center justify-between\">\n                            <FormLabel>Private Repository</FormLabel>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"toggle-private-repo\"\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex justify-end gap-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateRepo(false)}>\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={createRepoMutation.isPending} data-testid=\"button-create-repo-submit\">\n                          {createRepoMutation.isPending ? \"Creating...\" : \"Create Repository\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            )}\n          </div>\n\n          {reposError ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <div className=\"w-16 h-16 bg-destructive/10 rounded-full flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-exclamation-triangle text-destructive text-xl\"></i>\n                </div>\n                <h3 className=\"text-lg font-medium mb-2\">GitHub Not Connected</h3>\n                <p className=\"text-muted-foreground text-center mb-4\">\n                  Connect your GitHub account to manage repositories and analyze code.\n                </p>\n                <Button variant=\"outline\" data-testid=\"button-connect-github\">\n                  <i className=\"fab fa-github mr-2\"></i>\n                  Connect GitHub\n                </Button>\n              </CardContent>\n            </Card>\n          ) : githubRepos.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n                  <i className=\"fab fa-github text-muted-foreground text-xl\"></i>\n                </div>\n                <h3 className=\"text-lg font-medium mb-2\">No Repositories Found</h3>\n                <p className=\"text-muted-foreground text-center mb-4\">\n                  You don't have any repositories yet. Create your first one to get started.\n                </p>\n                <Button onClick={() => setShowCreateRepo(true)} data-testid=\"button-create-first-repo\">\n                  <i className=\"fab fa-github mr-2\"></i>\n                  Create Your First Repository\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {githubRepos.map((repo: GitHubRepository) => (\n                <Card key={repo.id} className=\"hover:bg-accent transition-colors\" data-testid={`github-repo-${repo.name}`}>\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <CardTitle className=\"text-base flex items-center gap-2\">\n                          {repo.name}\n                          {repo.private && <i className=\"fas fa-lock text-muted-foreground text-xs\"></i>}\n                        </CardTitle>\n                        <CardDescription className=\"text-xs\">{repo.fullName}</CardDescription>\n                      </div>\n                      {repo.language && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {repo.language}\n                        </Badge>\n                      )}\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    {repo.description && (\n                      <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                        {repo.description}\n                      </p>\n                    )}\n                    <div className=\"flex items-center justify-between text-xs text-muted-foreground mb-3\">\n                      <span className=\"flex items-center gap-1\">\n                        <i className=\"fas fa-star\"></i>\n                        {repo.stars}\n                      </span>\n                      <span className=\"flex items-center gap-1\">\n                        <i className=\"fas fa-code-branch\"></i>\n                        {repo.forks}\n                      </span>\n                      <span>{new Date(repo.updatedAt).toLocaleDateString()}</span>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => window.open(repo.url, \"_blank\")}\n                        data-testid={`button-view-${repo.name}`}\n                      >\n                        <i className=\"fas fa-external-link-alt mr-1\"></i>\n                        View\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          // This would trigger repository analysis\n                          toast({\n                            title: \"Analysis Started\",\n                            description: `Analyzing ${repo.name}...`,\n                          });\n                        }}\n                        data-testid={`button-analyze-${repo.name}`}\n                      >\n                        <i className=\"fas fa-chart-line mr-1\"></i>\n                        Analyze\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"webhooks\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Webhook Endpoints</CardTitle>\n              <CardDescription>\n                Configure webhooks to receive notifications from external services\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium\">GitHub Webhooks</h4>\n                    <p className=\"text-sm text-muted-foreground\">Receive notifications for repository events</p>\n                    <code className=\"text-xs bg-muted px-2 py-1 rounded mt-1 inline-block\">\n                      https://your-domain.com/api/webhooks/github\n                    </code>\n                  </div>\n                  <Switch data-testid=\"toggle-github-webhook\" />\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium\">CI/CD Webhooks</h4>\n                    <p className=\"text-sm text-muted-foreground\">Get notified about build and deployment status</p>\n                    <code className=\"text-xs bg-muted px-2 py-1 rounded mt-1 inline-block\">\n                      https://your-domain.com/api/webhooks/cicd\n                    </code>\n                  </div>\n                  <Switch data-testid=\"toggle-cicd-webhook\" />\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium\">Custom Webhooks</h4>\n                    <p className=\"text-sm text-muted-foreground\">General purpose webhook endpoint</p>\n                    <code className=\"text-xs bg-muted px-2 py-1 rounded mt-1 inline-block\">\n                      https://your-domain.com/api/webhooks/custom\n                    </code>\n                  </div>\n                  <Switch data-testid=\"toggle-custom-webhook\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Webhook Security</CardTitle>\n              <CardDescription>\n                Configure security settings for webhook endpoints\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Webhook Secret</label>\n                <Input\n                  type=\"password\"\n                  placeholder=\"Enter webhook secret\"\n                  data-testid=\"input-webhook-secret\"\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Used to verify webhook payload authenticity\n                </p>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium\">IP Allowlist</h4>\n                  <p className=\"text-sm text-muted-foreground\">Restrict webhook access to specific IP addresses</p>\n                </div>\n                <Switch data-testid=\"toggle-ip-allowlist\" />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium\">Rate Limiting</h4>\n                  <p className=\"text-sm text-muted-foreground\">Limit the number of webhook requests per minute</p>\n                </div>\n                <Switch defaultChecked data-testid=\"toggle-rate-limiting\" />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":22116},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/project-planning.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProjectSchema, type Project } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst projectFormSchema = insertProjectSchema.extend({\n  techStack: z.string().optional(),\n  features: z.string().optional(),\n});\n\ntype ProjectFormData = z.infer<typeof projectFormSchema>;\n\nexport default function ProjectPlanning() {\n  const [selectedProject, setSelectedProject] = useState<Project | null>(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const userId = \"default-user\";\n\n  const { data: projects = [], isLoading } = useQuery({\n    queryKey: [\"/api/projects\", { userId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/projects?userId=${userId}`);\n      return response.json();\n    },\n  });\n\n  const { data: githubRepos = [] } = useQuery({\n    queryKey: [\"/api/github/repositories\"],\n    queryFn: async () => {\n      try {\n        const response = await apiRequest(\"GET\", \"/api/github/repositories\");\n        return response.json();\n      } catch (error) {\n        return [];\n      }\n    },\n  });\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: ProjectFormData) => {\n      const metadata = {\n        techStack: data.techStack?.split(',').map(s => s.trim()).filter(Boolean) || [],\n        features: data.features?.split(',').map(s => s.trim()).filter(Boolean) || [],\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/projects\", {\n        ...data,\n        userId,\n        metadata,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      setShowCreateDialog(false);\n      toast({\n        title: \"Project Created\",\n        description: \"Your project has been created successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create project. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const analyzeProjectMutation = useMutation({\n    mutationFn: async (githubUrl: string) => {\n      const urlParts = githubUrl.replace('https://github.com/', '').split('/');\n      if (urlParts.length !== 2) throw new Error(\"Invalid GitHub URL\");\n      \n      const [owner, repo] = urlParts;\n      const response = await apiRequest(\"GET\", `/api/github/repositories/${owner}/${repo}/analyze`);\n      return response.json();\n    },\n    onSuccess: (analysis) => {\n      setSelectedProject(prev => prev ? {\n        ...prev,\n        metadata: { ...prev.metadata, analysis }\n      } : null);\n      toast({\n        title: \"Analysis Complete\",\n        description: \"Project analysis has been completed.\",\n      });\n    },\n  });\n\n  const form = useForm<ProjectFormData>({\n    resolver: zodResolver(projectFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      githubUrl: \"\",\n      status: \"active\",\n      techStack: \"\",\n      features: \"\",\n    },\n  });\n\n  const onSubmit = (data: ProjectFormData) => {\n    createProjectMutation.mutate(data);\n  };\n\n  const handleAnalyzeProject = (project: Project) => {\n    if (project.githubUrl) {\n      analyzeProjectMutation.mutate(project.githubUrl);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"h-48 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Project Planning</h1>\n          <p className=\"text-muted-foreground\">Manage your software projects and architecture</p>\n        </div>\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-project\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              New Project\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create New Project</DialogTitle>\n              <DialogDescription>\n                Add a new project to your workspace for planning and analysis.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Project Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"My Awesome Project\" {...field} data-testid=\"input-project-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Describe your project...\" {...field} data-testid=\"input-project-description\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"githubUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>GitHub URL (Optional)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"https://github.com/username/repo\" {...field} data-testid=\"input-github-url\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"techStack\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Tech Stack (comma-separated)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"React, Node.js, TypeScript\" {...field} data-testid=\"input-tech-stack\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"features\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Features (comma-separated)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Authentication, API, Dashboard\" {...field} data-testid=\"input-features\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-project-status\">\n                            <SelectValue placeholder=\"Select status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"active\">Active</SelectItem>\n                          <SelectItem value=\"completed\">Completed</SelectItem>\n                          <SelectItem value=\"archived\">Archived</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end gap-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createProjectMutation.isPending} data-testid=\"button-save-project\">\n                    {createProjectMutation.isPending ? \"Creating...\" : \"Create Project\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* GitHub Integration */}\n      {githubRepos.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <i className=\"fab fa-github\"></i>\n              GitHub Repositories\n            </CardTitle>\n            <CardDescription>\n              Import projects from your GitHub repositories\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {githubRepos.slice(0, 6).map((repo: any) => (\n                <Card key={repo.id} className=\"hover:bg-accent transition-colors cursor-pointer\" data-testid={`github-repo-${repo.name}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h4 className=\"font-medium text-sm\">{repo.name}</h4>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {repo.language || \"Unknown\"}\n                      </Badge>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mb-3 line-clamp-2\">\n                      {repo.description || \"No description available\"}\n                    </p>\n                    <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                      <span className=\"flex items-center gap-1\">\n                        <i className=\"fas fa-star\"></i>\n                        {repo.stars}\n                      </span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => form.setValue(\"githubUrl\", repo.url)}\n                        data-testid={`button-import-${repo.name}`}\n                      >\n                        Import\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Projects Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {projects.map((project: Project) => (\n          <Card key={project.id} className=\"hover:bg-accent transition-colors cursor-pointer\" onClick={() => setSelectedProject(project)} data-testid={`project-card-${project.id}`}>\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <CardTitle className=\"text-lg\">{project.name}</CardTitle>\n                <Badge variant={project.status === \"active\" ? \"default\" : project.status === \"completed\" ? \"secondary\" : \"outline\"}>\n                  {project.status}\n                </Badge>\n              </div>\n              <CardDescription className=\"line-clamp-2\">\n                {project.description}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {project.metadata?.techStack && (\n                  <div>\n                    <p className=\"text-xs font-medium text-muted-foreground mb-1\">Tech Stack</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {project.metadata.techStack.slice(0, 3).map((tech: string, index: number) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {tech}\n                        </Badge>\n                      ))}\n                      {project.metadata.techStack.length > 3 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{project.metadata.techStack.length - 3}\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex items-center justify-between pt-2\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    Updated {new Date(project.updatedAt!).toLocaleDateString()}\n                  </span>\n                  <div className=\"flex gap-1\">\n                    {project.githubUrl && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          window.open(project.githubUrl!, \"_blank\");\n                        }}\n                        data-testid={`button-github-${project.id}`}\n                      >\n                        <i className=\"fab fa-github text-xs\"></i>\n                      </Button>\n                    )}\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleAnalyzeProject(project);\n                      }}\n                      disabled={analyzeProjectMutation.isPending}\n                      data-testid={`button-analyze-${project.id}`}\n                    >\n                      <i className=\"fas fa-chart-line text-xs\"></i>\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {projects.length === 0 && (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <i className=\"fas fa-project-diagram text-muted-foreground text-xl\"></i>\n            </div>\n            <h3 className=\"text-lg font-medium mb-2\">No Projects Yet</h3>\n            <p className=\"text-muted-foreground text-center mb-4\">\n              Create your first project to start planning and organizing your development work.\n            </p>\n            <Button onClick={() => setShowCreateDialog(true)} data-testid=\"button-create-first-project\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Create Your First Project\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Project Details Modal */}\n      {selectedProject && (\n        <Dialog open={!!selectedProject} onOpenChange={() => setSelectedProject(null)}>\n          <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                {selectedProject.name}\n                <Badge variant={selectedProject.status === \"active\" ? \"default\" : selectedProject.status === \"completed\" ? \"secondary\" : \"outline\"}>\n                  {selectedProject.status}\n                </Badge>\n              </DialogTitle>\n              <DialogDescription>\n                Project details and analysis\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-medium mb-2\">Description</h4>\n                <p className=\"text-sm text-muted-foreground\">{selectedProject.description}</p>\n              </div>\n\n              {selectedProject.metadata?.techStack && (\n                <div>\n                  <h4 className=\"font-medium mb-2\">Technology Stack</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedProject.metadata.techStack.map((tech: string, index: number) => (\n                      <Badge key={index} variant=\"outline\">{tech}</Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {selectedProject.metadata?.features && (\n                <div>\n                  <h4 className=\"font-medium mb-2\">Features</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedProject.metadata.features.map((feature: string, index: number) => (\n                      <Badge key={index} variant=\"secondary\">{feature}</Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {selectedProject.metadata?.analysis && (\n                <div>\n                  <h4 className=\"font-medium mb-2\">Code Analysis</h4>\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-primary\">{selectedProject.metadata.analysis.files?.length || 0}</p>\n                          <p className=\"text-xs text-muted-foreground\">Files</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-primary\">{Object.keys(selectedProject.metadata.analysis.languages || {}).length}</p>\n                          <p className=\"text-xs text-muted-foreground\">Languages</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-2xl font-bold text-primary\">{selectedProject.metadata.analysis.structure?.directories?.length || 0}</p>\n                          <p className=\"text-xs text-muted-foreground\">Directories</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <Badge variant={\n                            selectedProject.metadata.analysis.complexity === \"low\" ? \"secondary\" :\n                            selectedProject.metadata.analysis.complexity === \"medium\" ? \"default\" : \"destructive\"\n                          }>\n                            {selectedProject.metadata.analysis.complexity} complexity\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      {selectedProject.metadata.analysis.suggestions && (\n                        <div>\n                          <h5 className=\"font-medium mb-2\">Suggestions</h5>\n                          <ul className=\"text-sm space-y-1\">\n                            {selectedProject.metadata.analysis.suggestions.map((suggestion: string, index: number) => (\n                              <li key={index} className=\"flex items-start gap-2\">\n                                <i className=\"fas fa-lightbulb text-primary text-xs mt-0.5\"></i>\n                                {suggestion}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              <div className=\"flex justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  <p>Created: {new Date(selectedProject.createdAt!).toLocaleDateString()}</p>\n                  <p>Updated: {new Date(selectedProject.updatedAt!).toLocaleDateString()}</p>\n                </div>\n                <div className=\"flex gap-2\">\n                  {selectedProject.githubUrl && (\n                    <Button variant=\"outline\" onClick={() => window.open(selectedProject.githubUrl!, \"_blank\")} data-testid=\"button-view-github\">\n                      <i className=\"fab fa-github mr-2\"></i>\n                      View on GitHub\n                    </Button>\n                  )}\n                  <Button onClick={() => handleAnalyzeProject(selectedProject)} disabled={analyzeProjectMutation.isPending} data-testid=\"button-analyze-project\">\n                    <i className=\"fas fa-chart-line mr-2\"></i>\n                    {analyzeProjectMutation.isPending ? \"Analyzing...\" : \"Analyze Project\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n","size_bytes":22127},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertLLMConfigurationSchema, type LLMConfiguration, type UserPreferences } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport LLMConfig from \"@/components/tools/llm-config\";\nimport SearchEngines from \"@/components/tools/search-engines\";\n\nconst llmFormSchema = insertLLMConfigurationSchema.extend({\n  temperature: z.number().min(0).max(100),\n});\n\ntype LLMFormData = z.infer<typeof llmFormSchema>;\n\nexport default function Settings() {\n  const [showCreateLLM, setShowCreateLLM] = useState(false);\n  const [selectedConfig, setSelectedConfig] = useState<LLMConfiguration | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const userId = \"default-user\";\n\n  const { data: llmConfigs = [], isLoading: isLoadingConfigs } = useQuery({\n    queryKey: [\"/api/llm-configurations\", { userId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/llm-configurations?userId=${userId}`);\n      return response.json();\n    },\n  });\n\n  const { data: userPreferences, isLoading: isLoadingPrefs } = useQuery({\n    queryKey: [\"/api/user-preferences\", { userId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/user-preferences?userId=${userId}`);\n      return response.json();\n    },\n  });\n\n  const createLLMConfigMutation = useMutation({\n    mutationFn: async (data: LLMFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/llm-configurations\", {\n        ...data,\n        userId,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/llm-configurations\"] });\n      setShowCreateLLM(false);\n      toast({\n        title: \"Configuration Created\",\n        description: \"LLM configuration has been created successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create LLM configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const testConnectionMutation = useMutation({\n    mutationFn: async ({ endpoint, model }: { endpoint: string; model: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/llm/test-connection\", {\n        endpoint,\n        model,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: data.connected ? \"Connection Successful\" : \"Connection Failed\",\n        description: data.connected \n          ? \"Successfully connected to the LLM endpoint\" \n          : \"Failed to connect to the LLM endpoint\",\n        variant: data.connected ? \"default\" : \"destructive\",\n      });\n    },\n  });\n\n  const updatePreferencesMutation = useMutation({\n    mutationFn: async (updates: Partial<UserPreferences>) => {\n      const response = await apiRequest(\"PUT\", \"/api/user-preferences\", {\n        userId,\n        ...updates,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-preferences\"] });\n      toast({\n        title: \"Preferences Updated\",\n        description: \"Your preferences have been saved successfully.\",\n      });\n    },\n  });\n\n  const exportDataMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/data/export\", { userId });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `ai-assistant-data-${new Date().toISOString().split('T')[0]}.json`;\n      a.click();\n      URL.revokeObjectURL(url);\n      toast({\n        title: \"Export Complete\",\n        description: \"Your data has been exported successfully.\",\n      });\n    },\n  });\n\n  const clearCacheMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/data/clear-cache\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Cache Cleared\",\n        description: \"Application cache has been cleared.\",\n      });\n    },\n  });\n\n  const resetSettingsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/data/reset-settings\", { userId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-preferences\"] });\n      toast({\n        title: \"Settings Reset\",\n        description: \"All settings have been reset to defaults.\",\n      });\n    },\n  });\n\n  const form = useForm<LLMFormData>({\n    resolver: zodResolver(llmFormSchema),\n    defaultValues: {\n      name: \"\",\n      endpoint: \"http://localhost:11434\",\n      model: \"\",\n      temperature: 70,\n      maxTokens: 2048,\n      isDefault: false,\n    },\n  });\n\n  const onSubmit = (data: LLMFormData) => {\n    createLLMConfigMutation.mutate(data);\n  };\n\n  const handleTestConnection = () => {\n    const endpoint = form.getValues(\"endpoint\");\n    const model = form.getValues(\"model\");\n    \n    if (endpoint && model) {\n      testConnectionMutation.mutate({ endpoint, model });\n    } else {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter both endpoint and model to test connection.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoadingConfigs || isLoadingPrefs) {\n    return (\n      <div className=\"flex-1 p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n          <div className=\"h-64 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 p-6 space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold text-foreground\">Settings</h1>\n        <p className=\"text-muted-foreground\">Configure your AI assistant preferences and integrations</p>\n      </div>\n\n      <Tabs defaultValue=\"llm\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"llm\" data-testid=\"tab-llm\">LLM Configuration</TabsTrigger>\n          <TabsTrigger value=\"search\" data-testid=\"tab-search\">Search Engines</TabsTrigger>\n          <TabsTrigger value=\"appearance\" data-testid=\"tab-appearance\">Appearance</TabsTrigger>\n          <TabsTrigger value=\"advanced\" data-testid=\"tab-advanced\">Advanced</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"llm\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-xl font-semibold\">Local LLM Configuration</h2>\n              <p className=\"text-muted-foreground\">Configure your local language model endpoints</p>\n            </div>\n            <Dialog open={showCreateLLM} onOpenChange={setShowCreateLLM}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-llm\">\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Add LLM Configuration\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Add LLM Configuration</DialogTitle>\n                  <DialogDescription>\n                    Configure a new local language model endpoint\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Configuration Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Ollama Local\" {...field} data-testid=\"input-llm-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"endpoint\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Endpoint URL</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"http://localhost:11434\" {...field} data-testid=\"input-llm-endpoint\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"model\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Model Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"llama2-7b-chat\" {...field} data-testid=\"input-llm-model\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"temperature\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Temperature: {field.value / 100}</FormLabel>\n                            <FormControl>\n                              <Slider\n                                min={0}\n                                max={100}\n                                step={1}\n                                value={[field.value]}\n                                onValueChange={(value) => field.onChange(value[0])}\n                                data-testid=\"slider-temperature\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"maxTokens\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Max Tokens</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                min={1}\n                                max={8192}\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                data-testid=\"input-max-tokens\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"isDefault\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex items-center justify-between\">\n                          <FormLabel>Set as Default Configuration</FormLabel>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"toggle-default-llm\"\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-between\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={handleTestConnection}\n                        disabled={testConnectionMutation.isPending}\n                        data-testid=\"button-test-connection\"\n                      >\n                        {testConnectionMutation.isPending ? (\n                          <>\n                            <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                            Testing...\n                          </>\n                        ) : (\n                          <>\n                            <i className=\"fas fa-plug mr-2\"></i>\n                            Test Connection\n                          </>\n                        )}\n                      </Button>\n                      \n                      <div className=\"flex gap-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateLLM(false)}>\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={createLLMConfigMutation.isPending} data-testid=\"button-save-llm\">\n                          {createLLMConfigMutation.isPending ? \"Creating...\" : \"Create Configuration\"}\n                        </Button>\n                      </div>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <LLMConfig />\n        </TabsContent>\n\n        <TabsContent value=\"search\" className=\"space-y-4\">\n          <div>\n            <h2 className=\"text-xl font-semibold\">Search Engine Configuration</h2>\n            <p className=\"text-muted-foreground\">Configure search engines and API keys</p>\n          </div>\n          \n          <SearchEngines />\n        </TabsContent>\n\n        <TabsContent value=\"appearance\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Theme Settings</CardTitle>\n              <CardDescription>Customize the appearance of your AI assistant</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base\">Dark Mode</Label>\n                  <p className=\"text-sm text-muted-foreground\">Use dark theme throughout the application</p>\n                </div>\n                <Switch \n                  checked={userPreferences?.theme === \"dark\"}\n                  onCheckedChange={(checked) => \n                    updatePreferencesMutation.mutate({ theme: checked ? \"dark\" : \"light\" })\n                  }\n                  data-testid=\"toggle-dark-mode\" \n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base\">Compact Mode</Label>\n                  <p className=\"text-sm text-muted-foreground\">Use smaller spacing and components</p>\n                </div>\n                <Switch \n                  checked={userPreferences?.compactMode || false}\n                  onCheckedChange={(checked) => \n                    updatePreferencesMutation.mutate({ compactMode: checked })\n                  }\n                  data-testid=\"toggle-compact-mode\" \n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base\">Animations</Label>\n                  <p className=\"text-sm text-muted-foreground\">Enable smooth transitions and animations</p>\n                </div>\n                <Switch \n                  checked={userPreferences?.animations ?? true}\n                  onCheckedChange={(checked) => \n                    updatePreferencesMutation.mutate({ animations: checked })\n                  }\n                  data-testid=\"toggle-animations\" \n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Font Settings</CardTitle>\n              <CardDescription>Customize text appearance</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Font Size</Label>\n                <Select \n                  value={userPreferences?.fontSize || \"medium\"}\n                  onValueChange={(value) => \n                    updatePreferencesMutation.mutate({ fontSize: value as \"small\" | \"medium\" | \"large\" })\n                  }\n                >\n                  <SelectTrigger data-testid=\"select-font-size\">\n                    <SelectValue placeholder=\"Select font size\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"small\">Small</SelectItem>\n                    <SelectItem value=\"medium\">Medium</SelectItem>\n                    <SelectItem value=\"large\">Large</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>Code Font</Label>\n                <Select \n                  value={userPreferences?.codeFont || \"jetbrains\"}\n                  onValueChange={(value) => \n                    updatePreferencesMutation.mutate({ codeFont: value as \"jetbrains\" | \"fira\" | \"source\" | \"consolas\" })\n                  }\n                >\n                  <SelectTrigger data-testid=\"select-code-font\">\n                    <SelectValue placeholder=\"Select code font\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"jetbrains\">JetBrains Mono</SelectItem>\n                    <SelectItem value=\"fira\">Fira Code</SelectItem>\n                    <SelectItem value=\"source\">Source Code Pro</SelectItem>\n                    <SelectItem value=\"consolas\">Consolas</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"advanced\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Settings</CardTitle>\n              <CardDescription>Configure performance and resource usage</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Max Concurrent Requests</Label>\n                <Input \n                  type=\"number\" \n                  value={userPreferences?.maxConcurrentRequests || 5}\n                  onChange={(e) => \n                    updatePreferencesMutation.mutate({ \n                      maxConcurrentRequests: parseInt(e.target.value) || 5 \n                    })\n                  }\n                  min=\"1\" \n                  max=\"20\" \n                  data-testid=\"input-max-requests\" \n                />\n                <p className=\"text-xs text-muted-foreground\">Maximum number of simultaneous API requests</p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>Cache Duration (minutes)</Label>\n                <Input \n                  type=\"number\" \n                  value={userPreferences?.cacheDuration || 30}\n                  onChange={(e) => \n                    updatePreferencesMutation.mutate({ \n                      cacheDuration: parseInt(e.target.value) || 30 \n                    })\n                  }\n                  min=\"1\" \n                  max=\"1440\" \n                  data-testid=\"input-cache-duration\" \n                />\n                <p className=\"text-xs text-muted-foreground\">How long to cache search results and LLM responses</p>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base\">Auto-save Conversations</Label>\n                  <p className=\"text-sm text-muted-foreground\">Automatically save conversation history</p>\n                </div>\n                <Switch \n                  checked={userPreferences?.autoSaveConversations ?? true}\n                  onCheckedChange={(checked) => \n                    updatePreferencesMutation.mutate({ autoSaveConversations: checked })\n                  }\n                  data-testid=\"toggle-auto-save\" \n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Data Management</CardTitle>\n              <CardDescription>Manage your application data</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base\">Analytics Collection</Label>\n                  <p className=\"text-sm text-muted-foreground\">Help improve the application by sharing usage data</p>\n                </div>\n                <Switch \n                  checked={userPreferences?.analyticsCollection || false}\n                  onCheckedChange={(checked) => \n                    updatePreferencesMutation.mutate({ analyticsCollection: checked })\n                  }\n                  data-testid=\"toggle-analytics\" \n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\" \n                  onClick={() => exportDataMutation.mutate()}\n                  disabled={exportDataMutation.isPending}\n                  data-testid=\"button-export-data\"\n                >\n                  {exportDataMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Exporting...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-download mr-2\"></i>\n                      Export All Data\n                    </>\n                  )}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\" \n                  onClick={() => clearCacheMutation.mutate()}\n                  disabled={clearCacheMutation.isPending}\n                  data-testid=\"button-clear-cache\"\n                >\n                  {clearCacheMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Clearing...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-trash mr-2\"></i>\n                      Clear Cache\n                    </>\n                  )}\n                </Button>\n                <Button \n                  variant=\"destructive\" \n                  className=\"w-full\" \n                  onClick={() => resetSettingsMutation.mutate()}\n                  disabled={resetSettingsMutation.isPending}\n                  data-testid=\"button-reset-settings\"\n                >\n                  {resetSettingsMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Resetting...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-undo mr-2\"></i>\n                      Reset All Settings\n                    </>\n                  )}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Debug Information</CardTitle>\n              <CardDescription>System information and diagnostics</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm font-mono bg-muted p-3 rounded\">\n                <div>Version: 1.0.0</div>\n                <div>Build: {new Date().toISOString().split('T')[0]}</div>\n                <div>Platform: {navigator.platform}</div>\n                <div>User Agent: {navigator.userAgent.slice(0, 50)}...</div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":25803},"client/src/pages/web-search.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { SearchEngine } from \"@shared/schema\";\n\ninterface SearchResult {\n  title: string;\n  url: string;\n  snippet: string;\n  source: string;\n}\n\ninterface SearchResponse {\n  query: string;\n  results: SearchResult[];\n  totalResults: number;\n  sources: string[];\n  message?: string;\n}\n\nexport default function WebSearch() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResults, setSearchResults] = useState<SearchResponse | null>(null);\n  const [webContent, setWebContent] = useState<{ url: string; content: string } | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const userId = \"default-user\";\n\n  const { data: searchEngines = [], isLoading: isLoadingEngines } = useQuery({\n    queryKey: [\"/api/search-engines\", { userId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/search-engines?userId=${userId}`);\n      return response.json();\n    },\n  });\n\n  const searchMutation = useMutation({\n    mutationFn: async (query: string) => {\n      const response = await apiRequest(\"POST\", \"/api/search\", {\n        query,\n        userId,\n        maxResults: 20,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setSearchResults(data);\n      toast({\n        title: \"Search Complete\",\n        description: data.message || `Found ${data.totalResults} results from ${data.sources.length} source(s).`,\n        variant: data.totalResults === 0 && data.message ? \"destructive\" : \"default\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Search Failed\",\n        description: error instanceof Error ? error.message : \"Failed to perform search\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const fetchContentMutation = useMutation({\n    mutationFn: async (url: string) => {\n      const response = await apiRequest(\"POST\", \"/api/search/fetch-content\", { url });\n      return response.json();\n    },\n    onSuccess: (data, url) => {\n      setWebContent({ url, content: data.content });\n      toast({\n        title: \"Content Fetched\",\n        description: \"Web page content has been extracted successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fetch Failed\",\n        description: error instanceof Error ? error.message : \"Failed to fetch web content\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEnginneMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<SearchEngine> }) => {\n      const response = await apiRequest(\"PUT\", `/api/search-engines/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/search-engines\"] });\n      toast({\n        title: \"Settings Updated\",\n        description: \"Search engine settings have been updated.\",\n      });\n    },\n  });\n\n  const handleSearch = () => {\n    if (searchQuery.trim()) {\n      searchMutation.mutate(searchQuery.trim());\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleSearch();\n    }\n  };\n\n  const handleFetchContent = (url: string) => {\n    fetchContentMutation.mutate(url);\n  };\n\n  const handleToggleEngine = (engine: SearchEngine) => {\n    updateEnginneMutation.mutate({\n      id: engine.id,\n      updates: { enabled: !engine.enabled },\n    });\n  };\n\n  const quickSearches = [\n    \"React best practices 2024\",\n    \"TypeScript advanced patterns\",\n    \"Node.js performance optimization\",\n    \"Python web scraping tutorial\",\n    \"JavaScript async/await examples\",\n    \"CSS Grid vs Flexbox\",\n  ];\n\n  if (isLoadingEngines) {\n    return (\n      <div className=\"flex-1 p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n          <div className=\"h-12 bg-muted rounded\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 p-6 space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold text-foreground\">Web Search</h1>\n        <p className=\"text-muted-foreground\">Search multiple engines simultaneously and analyze web content</p>\n      </div>\n\n      <Tabs defaultValue=\"search\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"search\" data-testid=\"tab-search\">Search</TabsTrigger>\n          <TabsTrigger value=\"content\" data-testid=\"tab-content\">Web Content</TabsTrigger>\n          <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"search\" className=\"space-y-4\">\n          {/* Search Input */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex gap-2 mb-4\">\n                <Input\n                  placeholder=\"Enter your search query...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  className=\"flex-1\"\n                  data-testid=\"input-search-query\"\n                />\n                <Button\n                  onClick={handleSearch}\n                  disabled={!searchQuery.trim() || searchMutation.isPending}\n                  data-testid=\"button-search\"\n                >\n                  {searchMutation.isPending ? (\n                    <i className=\"fas fa-spinner fa-spin\"></i>\n                  ) : (\n                    <i className=\"fas fa-search\"></i>\n                  )}\n                </Button>\n              </div>\n\n              {/* Quick Search Suggestions */}\n              <div>\n                <p className=\"text-sm font-medium mb-2\">Quick Searches:</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {quickSearches.map((query, index) => (\n                    <Button\n                      key={index}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSearchQuery(query);\n                        searchMutation.mutate(query);\n                      }}\n                      className=\"text-xs\"\n                      data-testid={`quick-search-${index}`}\n                    >\n                      {query}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Search Results */}\n          {searchResults && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Search Results for \"{searchResults.query}\"</span>\n                  <Badge variant=\"secondary\">\n                    {searchResults.totalResults} results from {searchResults.sources.join(\", \")}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ScrollArea className=\"h-[600px]\">\n                  <div className=\"space-y-4\">\n                    {searchResults.results.map((result, index) => (\n                      <Card key={index} className=\"hover:bg-accent transition-colors\" data-testid={`search-result-${index}`}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div className=\"flex-1\">\n                              <h3 className=\"font-medium text-sm mb-1\">\n                                <a\n                                  href={result.url}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  className=\"text-primary hover:underline\"\n                                >\n                                  {result.title}\n                                </a>\n                              </h3>\n                              <p className=\"text-xs text-muted-foreground mb-2\">{result.url}</p>\n                              <p className=\"text-sm text-muted-foreground\">{result.snippet}</p>\n                            </div>\n                            <div className=\"flex items-center gap-2 ml-4\">\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {result.source}\n                              </Badge>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleFetchContent(result.url)}\n                                disabled={fetchContentMutation.isPending}\n                                data-testid={`button-fetch-${index}`}\n                              >\n                                <i className=\"fas fa-download text-xs\"></i>\n                              </Button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          )}\n\n          {!searchResults && !searchMutation.isPending && (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-search text-muted-foreground text-xl\"></i>\n                </div>\n                <h3 className=\"text-lg font-medium mb-2\">Search the Web</h3>\n                <p className=\"text-muted-foreground text-center mb-4\">\n                  Enter a search query to find information across multiple search engines.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"content\" className=\"space-y-4\">\n          {webContent ? (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Web Content</span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => window.open(webContent.url, \"_blank\")}\n                    data-testid=\"button-open-original\"\n                  >\n                    <i className=\"fas fa-external-link-alt mr-2\"></i>\n                    Open Original\n                  </Button>\n                </CardTitle>\n                <CardDescription>{webContent.url}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-muted p-4 rounded-lg\">\n                  <ScrollArea className=\"h-[500px]\">\n                    <div className=\"text-sm whitespace-pre-wrap font-mono\">\n                      {webContent.content.slice(0, 10000)}\n                      {webContent.content.length > 10000 && (\n                        <div className=\"text-muted-foreground italic mt-4\">\n                          ... Content truncated. Open original URL to view full content.\n                        </div>\n                      )}\n                    </div>\n                  </ScrollArea>\n                </div>\n                <div className=\"flex justify-between items-center mt-4\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    {webContent.content.length.toLocaleString()} characters\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      navigator.clipboard.writeText(webContent.content);\n                      toast({\n                        title: \"Copied\",\n                        description: \"Content copied to clipboard.\",\n                      });\n                    }}\n                    data-testid=\"button-copy-content\"\n                  >\n                    <i className=\"fas fa-copy mr-2\"></i>\n                    Copy Content\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-globe text-muted-foreground text-xl\"></i>\n                </div>\n                <h3 className=\"text-lg font-medium mb-2\">No Content Fetched</h3>\n                <p className=\"text-muted-foreground text-center mb-4\">\n                  Perform a search and click the download button on any result to extract its content.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Search Engine Configuration</CardTitle>\n              <CardDescription>\n                Enable or disable search engines and configure API keys\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {searchEngines.map((engine: SearchEngine) => (\n                <div key={engine.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`search-engine-${engine.name.toLowerCase()}`}>\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-8 h-8 bg-primary/10 rounded flex items-center justify-center\">\n                      <i className={`fas fa-${engine.name.toLowerCase() === 'google' ? 'google' : engine.name.toLowerCase() === 'bing' ? 'windows' : 'search'} text-primary text-sm`}></i>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">{engine.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {engine.apiKey ? \"API key configured\" : \"No API key required\"}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Switch\n                      checked={engine.enabled}\n                      onCheckedChange={() => handleToggleEngine(engine)}\n                      disabled={updateEnginneMutation.isPending}\n                      data-testid={`toggle-${engine.name.toLowerCase()}`}\n                    />\n                    <span className=\"text-sm text-muted-foreground\">\n                      {engine.enabled ? \"Enabled\" : \"Disabled\"}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Search Tips</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 text-sm\">\n                <div className=\"flex items-start gap-2\">\n                  <i className=\"fas fa-lightbulb text-primary mt-0.5\"></i>\n                  <div>\n                    <p className=\"font-medium\">Use specific keywords</p>\n                    <p className=\"text-muted-foreground\">Be specific in your search queries for better results</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <i className=\"fas fa-lightbulb text-primary mt-0.5\"></i>\n                  <div>\n                    <p className=\"font-medium\">Quote exact phrases</p>\n                    <p className=\"text-muted-foreground\">Use quotes to search for exact phrases: \"exact phrase\"</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <i className=\"fas fa-lightbulb text-primary mt-0.5\"></i>\n                  <div>\n                    <p className=\"font-medium\">Combine search engines</p>\n                    <p className=\"text-muted-foreground\">Enable multiple engines to get comprehensive results</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-2\">\n                  <i className=\"fas fa-lightbulb text-primary mt-0.5\"></i>\n                  <div>\n                    <p className=\"font-medium\">Extract web content</p>\n                    <p className=\"text-muted-foreground\">Click the download button to extract and analyze page content</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":17570},"client/src/components/chat/chat-input.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport FileUploadZone from \"./file-upload-zone\";\n\ninterface ChatInputProps {\n  onSendMessage: (content: string, files?: File[]) => void;\n  isLoading?: boolean;\n}\n\nexport default function ChatInput({ onSendMessage, isLoading }: ChatInputProps) {\n  const [message, setMessage] = useState(\"\");\n  const [attachedFiles, setAttachedFiles] = useState<File[]>([]);\n  const [showUploadZone, setShowUploadZone] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleSend = () => {\n    if (message.trim() || attachedFiles.length > 0) {\n      onSendMessage(message.trim(), attachedFiles);\n      setMessage(\"\");\n      setAttachedFiles([]);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      if (!isLoading) {\n        handleSend();\n      }\n    }\n  };\n\n  const handleFileSelect = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    setAttachedFiles(prev => [...prev, ...files]);\n    if (e.target) {\n      e.target.value = '';\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setAttachedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  // Auto-resize textarea\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = Math.min(textareaRef.current.scrollHeight, 128) + 'px';\n    }\n  }, [message]);\n\n  const quickActions = [\n    { icon: \"fas fa-search\", label: \"Web Search\", action: () => setMessage(\"Search the web for \") },\n    { icon: \"fas fa-code\", label: \"Code Review\", action: () => setMessage(\"Please review this code: \") },\n    { icon: \"fas fa-lightbulb\", label: \"Project Ideas\", action: () => setMessage(\"Give me ideas for a \") },\n  ];\n\n  return (\n    <div className=\"border-t border-border bg-card p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"relative\">\n          {/* File Upload Zone */}\n          {showUploadZone && (\n            <div className=\"mb-4\">\n              <FileUploadZone\n                onFilesSelected={(files) => {\n                  setAttachedFiles(prev => [...prev, ...files]);\n                  setShowUploadZone(false);\n                }}\n                onClose={() => setShowUploadZone(false)}\n              />\n            </div>\n          )}\n\n          {/* Attached Files */}\n          {attachedFiles.length > 0 && (\n            <div className=\"mb-3 flex flex-wrap gap-2\">\n              {attachedFiles.map((file, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center gap-2 px-2 py-1 bg-muted rounded text-xs\"\n                >\n                  <i className=\"fas fa-file text-muted-foreground\"></i>\n                  <span>{file.name}</span>\n                  <button\n                    onClick={() => removeFile(index)}\n                    className=\"text-muted-foreground hover:text-destructive\"\n                    data-testid={`remove-file-${index}`}\n                  >\n                    <i className=\"fas fa-times\"></i>\n                  </button>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Input Area */}\n          <div className=\"flex items-end gap-3\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Textarea\n                  ref={textareaRef}\n                  placeholder=\"Ask anything about your code, project planning, web research...\"\n                  className=\"auto-resize-textarea pr-20 resize-none\"\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  onKeyDown={handleKeyDown}\n                  disabled={isLoading}\n                  data-testid=\"input-message\"\n                />\n                \n                {/* Input Actions */}\n                <div className=\"absolute right-2 bottom-2 flex items-center gap-1\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-auto p-1.5\"\n                    onClick={handleFileSelect}\n                    disabled={isLoading}\n                    data-testid=\"button-attach\"\n                  >\n                    <i className=\"fas fa-paperclip text-xs\"></i>\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-auto p-1.5\"\n                    onClick={() => setShowUploadZone(true)}\n                    disabled={isLoading}\n                    data-testid=\"button-upload\"\n                  >\n                    <i className=\"fas fa-cloud-upload-alt text-xs\"></i>\n                  </Button>\n                  <div className=\"h-4 w-px bg-border mx-1\"></div>\n                  <Button\n                    size=\"sm\"\n                    className=\"h-auto p-1.5\"\n                    onClick={handleSend}\n                    disabled={isLoading || (!message.trim() && attachedFiles.length === 0)}\n                    data-testid=\"button-send\"\n                  >\n                    <i className=\"fas fa-paper-plane text-xs\"></i>\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Quick Actions */}\n              <div className=\"flex items-center gap-2 mt-2 text-xs\">\n                {quickActions.map((action, index) => (\n                  <Button\n                    key={index}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-auto px-2 py-1 text-xs\"\n                    onClick={action.action}\n                    disabled={isLoading}\n                    data-testid={`quick-${action.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <i className={`${action.icon} w-3 mr-1`}></i>\n                    {action.label}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Hidden file input */}\n        <input\n          type=\"file\"\n          ref={fileInputRef}\n          onChange={handleFileChange}\n          multiple\n          accept=\".js,.jsx,.ts,.tsx,.py,.md,.txt,.json,.css,.html,.java,.cpp,.c,.h,.rb,.go,.rs,.swift,.pdf,.doc,.docx,.png,.jpg,.jpeg,.gif\"\n          className=\"hidden\"\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":6702},"client/src/components/chat/chat-interface.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useChat } from \"@/hooks/use-chat\";\nimport Message from \"./message\";\nimport ChatInput from \"./chat-input\";\nimport FileUploadZone from \"./file-upload-zone\";\nimport { Card } from \"@/components/ui/card\";\nimport ContextPanel from \"@/components/tools/context-panel\";\n\nexport default function ChatInterface() {\n  const { messages, isLoading, sendMessage, currentConversation } = useChat();\n\n  return (\n    <div className=\"flex-1 flex overflow-hidden\">\n      {/* Chat Messages Area */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Messages Container */}\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\" data-testid=\"messages-container\">\n          {messages.length === 0 ? (\n            <WelcomeMessage />\n          ) : (\n            messages.map((message) => (\n              <Message key={message.id} message={message} />\n            ))\n          )}\n          \n          {isLoading && <LoadingMessage />}\n        </div>\n\n        {/* Chat Input */}\n        <ChatInput onSendMessage={sendMessage} isLoading={isLoading} />\n      </div>\n\n      {/* Right Sidebar - Context Panel */}\n      <ContextPanel className=\"hidden xl:flex\" />\n    </div>\n  );\n}\n\nfunction WelcomeMessage() {\n  return (\n    <div className=\"max-w-4xl mx-auto\" data-testid=\"welcome-message\">\n      <div className=\"text-center py-8\">\n        <div className=\"w-16 h-16 bg-primary/10 rounded-xl flex items-center justify-center mx-auto mb-4\">\n          <i className=\"fas fa-robot text-primary text-xl\"></i>\n        </div>\n        <h3 className=\"text-xl font-semibold mb-2\">Welcome to AI Assistant Studio</h3>\n        <p className=\"text-muted-foreground mb-6\">Your professional AI development companion with local LLM integration, web search, code analysis, and more.</p>\n        \n        {/* Feature Cards */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-3 max-w-4xl\">\n          <Card className=\"p-4 text-left\">\n            <i className=\"fas fa-search text-primary mb-2\"></i>\n            <h4 className=\"font-medium text-sm mb-1\">Web Search</h4>\n            <p className=\"text-xs text-muted-foreground\">Search multiple engines simultaneously</p>\n          </Card>\n          \n          <Card className=\"p-4 text-left\">\n            <i className=\"fas fa-code text-primary mb-2\"></i>\n            <h4 className=\"font-medium text-sm mb-1\">Code Analysis</h4>\n            <p className=\"text-xs text-muted-foreground\">Review and optimize your code</p>\n          </Card>\n          \n          <Card className=\"p-4 text-left\">\n            <i className=\"fas fa-project-diagram text-primary mb-2\"></i>\n            <h4 className=\"font-medium text-sm mb-1\">Project Planning</h4>\n            <p className=\"text-xs text-muted-foreground\">Architecture and design tools</p>\n          </Card>\n          \n          <Card className=\"p-4 text-left\">\n            <i className=\"fas fa-file-upload text-primary mb-2\"></i>\n            <h4 className=\"font-medium text-sm mb-1\">File Processing</h4>\n            <p className=\"text-xs text-muted-foreground\">Analyze documents and files</p>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction LoadingMessage() {\n  return (\n    <div className=\"max-w-4xl mx-auto\" data-testid=\"loading-message\">\n      <div className=\"flex gap-3 mb-4\">\n        <div className=\"flex-shrink-0 w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n          <i className=\"fas fa-robot text-primary-foreground text-sm\"></i>\n        </div>\n        <div className=\"flex-1\">\n          <div className=\"bg-card border border-border rounded-lg p-4\">\n            <div className=\"loading-dots text-sm text-muted-foreground\">\n              <span>â€¢</span>\n              <span>â€¢</span>\n              <span>â€¢</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3869},"client/src/components/chat/file-upload-zone.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FileUploadZoneProps {\n  onFilesSelected: (files: File[]) => void;\n  onClose: () => void;\n  maxFiles?: number;\n  maxFileSize?: number;\n  acceptedTypes?: string[];\n}\n\nexport default function FileUploadZone({\n  onFilesSelected,\n  onClose,\n  maxFiles = 10,\n  maxFileSize = 10 * 1024 * 1024, // 10MB\n  acceptedTypes = ['.js', '.jsx', '.ts', '.tsx', '.py', '.md', '.txt', '.json', '.css', '.html', '.java', '.cpp', '.c', '.h', '.rb', '.go', '.rs', '.swift', '.pdf', '.doc', '.docx', '.png', '.jpg', '.jpeg', '.gif']\n}: FileUploadZoneProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleDragEvents = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDragEnter = (e: React.DragEvent) => {\n    handleDragEvents(e);\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    handleDragEvents(e);\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    handleDragEvents(e);\n    setIsDragOver(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    handleFiles(files);\n  };\n\n  const handleFileSelect = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    handleFiles(files);\n  };\n\n  const handleFiles = (files: File[]) => {\n    setError(null);\n    \n    // Validate file count\n    if (files.length > maxFiles) {\n      setError(`Maximum ${maxFiles} files allowed`);\n      return;\n    }\n\n    // Validate file sizes and types\n    const validFiles: File[] = [];\n    const errors: string[] = [];\n\n    for (const file of files) {\n      if (file.size > maxFileSize) {\n        errors.push(`${file.name} is too large (max ${Math.round(maxFileSize / 1024 / 1024)}MB)`);\n        continue;\n      }\n\n      const extension = '.' + file.name.split('.').pop()?.toLowerCase();\n      if (!acceptedTypes.includes(extension)) {\n        errors.push(`${file.name} file type not supported`);\n        continue;\n      }\n\n      validFiles.push(file);\n    }\n\n    if (errors.length > 0) {\n      setError(errors.join(', '));\n      return;\n    }\n\n    if (validFiles.length > 0) {\n      onFilesSelected(validFiles);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\" data-testid=\"file-upload-modal\">\n      <Card className=\"w-full max-w-lg\">\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold\">Upload Files</h3>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-upload\">\n              <i className=\"fas fa-times\"></i>\n            </Button>\n          </div>\n\n          <div\n            className={cn(\n              \"border-2 border-dashed rounded-lg p-8 text-center transition-colors cursor-pointer file-drop-zone\",\n              isDragOver ? \"border-primary bg-primary/5 drag-over\" : \"border-border hover:border-primary/50\"\n            )}\n            onDragEnter={handleDragEnter}\n            onDragOver={handleDragEvents}\n            onDragLeave={handleDragLeave}\n            onDrop={handleDrop}\n            onClick={handleFileSelect}\n            data-testid=\"drop-zone\"\n          >\n            <div className=\"space-y-4\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto\">\n                <i className=\"fas fa-cloud-upload-alt text-primary text-xl\"></i>\n              </div>\n              <div>\n                <p className=\"font-medium\">Drop your files here</p>\n                <p className=\"text-sm text-muted-foreground\">or click to browse files</p>\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                <p>Supported formats: {acceptedTypes.slice(0, 5).join(', ')} and more</p>\n                <p>Maximum {maxFiles} files, {Math.round(maxFileSize / 1024 / 1024)}MB each</p>\n              </div>\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"mt-4 p-3 bg-destructive/10 border border-destructive/20 rounded text-sm text-destructive\">\n              {error}\n            </div>\n          )}\n\n          <div className=\"flex justify-end gap-2 mt-6\">\n            <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel-upload\">\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      <input\n        type=\"file\"\n        ref={fileInputRef}\n        onChange={handleFileChange}\n        multiple\n        accept={acceptedTypes.join(',')}\n        className=\"hidden\"\n      />\n    </div>\n  );\n}\n","size_bytes":5010},"client/src/components/chat/message.tsx":{"content":"import { Message as MessageType } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { useState } from \"react\";\n\ninterface MessageProps {\n  message: MessageType;\n}\n\nexport default function Message({ message }: MessageProps) {\n  const [copied, setCopied] = useState(false);\n  const isUser = message.role === \"user\";\n  const isAssistant = message.role === \"assistant\";\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(message.content);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (error) {\n      console.error(\"Failed to copy message:\", error);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\" data-testid={`message-${message.role}`}>\n      <div className=\"flex gap-3 mb-4\">\n        <div className={cn(\n          \"flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center\",\n          isUser ? \"bg-secondary\" : \"bg-primary\"\n        )}>\n          <i className={cn(\n            \"text-sm\",\n            isUser \n              ? \"fas fa-user text-secondary-foreground\" \n              : \"fas fa-robot text-primary-foreground\"\n          )}></i>\n        </div>\n        <div className=\"flex-1\">\n          <div className={cn(\n            \"rounded-lg p-3\",\n            isUser ? \"bg-secondary\" : \"bg-card border border-border\"\n          )}>\n            <div className=\"message-content text-sm\" dangerouslySetInnerHTML={{ __html: formatMessageContent(message.content) }} />\n            \n            {/* Metadata display for special content */}\n            {message.metadata && (\n              <div className=\"mt-3 space-y-2\">\n                {message.metadata.searchResults && (\n                  <SearchResultsDisplay results={message.metadata.searchResults} />\n                )}\n                {message.metadata.fileAnalysis && (\n                  <FileAnalysisDisplay analysis={message.metadata.fileAnalysis} />\n                )}\n                {message.metadata.codeAnalysis && (\n                  <CodeAnalysisDisplay analysis={message.metadata.codeAnalysis} />\n                )}\n              </div>\n            )}\n          </div>\n          \n          <div className=\"flex items-center gap-2 mt-2\">\n            <p className=\"text-xs text-muted-foreground\" data-testid=\"message-timestamp\">\n              {formatTimestamp(message.createdAt)}\n            </p>\n            {isAssistant && (\n              <>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  className=\"text-xs text-muted-foreground hover:text-foreground h-auto p-0\"\n                  onClick={handleCopy}\n                  data-testid=\"button-copy\"\n                >\n                  <i className=\"fas fa-copy mr-1\"></i>\n                  {copied ? \"Copied!\" : \"Copy\"}\n                </Button>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  className=\"text-xs text-muted-foreground hover:text-foreground h-auto p-0\"\n                  data-testid=\"button-like\"\n                >\n                  <i className=\"fas fa-thumbs-up mr-1\"></i>Like\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction formatMessageContent(content: string): string {\n  // Basic markdown-like formatting\n  return content\n    .replace(/```([\\s\\S]*?)```/g, '<pre><code>$1</code></pre>')\n    .replace(/`([^`]+)`/g, '<code>$1</code>')\n    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n    .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n    .replace(/\\n/g, '<br>');\n}\n\nfunction formatTimestamp(timestamp: Date | string | null | undefined): string {\n  if (!timestamp) return \"\";\n  \n  // Convert string timestamps to Date objects\n  const date = typeof timestamp === 'string' ? new Date(timestamp) : timestamp;\n  \n  const now = new Date();\n  const diff = now.getTime() - date.getTime();\n  const minutes = Math.floor(diff / 60000);\n  \n  if (minutes < 1) return \"Just now\";\n  if (minutes < 60) return `${minutes} minute${minutes === 1 ? '' : 's'} ago`;\n  \n  const hours = Math.floor(minutes / 60);\n  if (hours < 24) return `${hours} hour${hours === 1 ? '' : 's'} ago`;\n  \n  const days = Math.floor(hours / 24);\n  if (days < 7) return `${days} day${days === 1 ? '' : 's'} ago`;\n  \n  return date.toLocaleDateString();\n}\n\nfunction SearchResultsDisplay({ results }: { results: any[] }) {\n  return (\n    <div className=\"space-y-2\">\n      <h5 className=\"text-xs font-medium text-muted-foreground\">Search Results:</h5>\n      {results.slice(0, 3).map((result, index) => (\n        <div key={index} className=\"text-xs p-2 bg-muted rounded\">\n          <a href={result.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-primary hover:underline font-medium\">\n            {result.title}\n          </a>\n          <p className=\"text-muted-foreground mt-1\">{result.snippet}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction FileAnalysisDisplay({ analysis }: { analysis: any }) {\n  return (\n    <div className=\"text-xs p-2 bg-muted rounded\">\n      <h5 className=\"font-medium mb-1\">File Analysis:</h5>\n      <p><strong>Type:</strong> {analysis.type}</p>\n      {analysis.language && <p><strong>Language:</strong> {analysis.language}</p>}\n      {analysis.complexity && <p><strong>Complexity:</strong> {analysis.complexity}</p>}\n      {analysis.summary && <p className=\"mt-1\">{analysis.summary}</p>}\n    </div>\n  );\n}\n\nfunction CodeAnalysisDisplay({ analysis }: { analysis: any }) {\n  return (\n    <div className=\"text-xs p-2 bg-muted rounded\">\n      <h5 className=\"font-medium mb-1\">Code Analysis:</h5>\n      <div className=\"grid grid-cols-2 gap-2\">\n        {analysis.files && <p><strong>Files:</strong> {analysis.files.length}</p>}\n        {analysis.complexity && <p><strong>Complexity:</strong> {analysis.complexity}</p>}\n        {analysis.languages && <p><strong>Languages:</strong> {Object.keys(analysis.languages).join(\", \")}</p>}\n      </div>\n      {analysis.suggestions && (\n        <div className=\"mt-2\">\n          <strong>Suggestions:</strong>\n          <ul className=\"list-disc list-inside mt-1 space-y-0.5\">\n            {analysis.suggestions.slice(0, 2).map((suggestion: string, index: number) => (\n              <li key={index}>{suggestion}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6409},"client/src/components/layout/header.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst pageConfig = {\n  \"/\": {\n    title: \"Chat Assistant\",\n    description: \"AI-powered conversation interface\",\n  },\n  \"/project-planning\": {\n    title: \"Project Planning\",\n    description: \"Software architecture and design tools\",\n  },\n  \"/code-analysis\": {\n    title: \"Code Analysis\",\n    description: \"Review and optimize your code\",\n  },\n  \"/web-search\": {\n    title: \"Web Search\",\n    description: \"Multi-engine search and content analysis\",\n  },\n  \"/document-analysis\": {\n    title: \"Document Analysis\",\n    description: \"Process and analyze uploaded documents\",\n  },\n  \"/integrations\": {\n    title: \"Integrations\",\n    description: \"Connect external services and APIs\",\n  },\n  \"/settings\": {\n    title: \"Settings\",\n    description: \"Configure your AI assistant\",\n  },\n};\n\nexport default function Header() {\n  const [location] = useLocation();\n  const config = pageConfig[location as keyof typeof pageConfig] || { title: \"AI Assistant\", description: \"\" };\n\n  return (\n    <header className=\"bg-card border-b border-border p-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <h2 className=\"font-semibold text-lg text-card-foreground\" data-testid=\"page-title\">{config.title}</h2>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"bg-green-500/10 text-green-400 border-green-500/20\">\n              <div className=\"w-1.5 h-1.5 bg-green-400 rounded-full mr-1 status-pulse\"></div>\n              LLM Ready\n            </Badge>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-export\">\n            <i className=\"fas fa-download w-3 h-3 mr-2\"></i>\n            Export\n          </Button>\n          \n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-history\">\n            <i className=\"fas fa-history w-3 h-3 mr-2\"></i>\n            History\n          </Button>\n          \n          <div className=\"h-4 w-px bg-border\"></div>\n          \n          <Button size=\"sm\" data-testid=\"button-new\">\n            <i className=\"fas fa-plus w-3 h-3 mr-2\"></i>\n            New\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2404},"client/src/components/layout/main-layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport Sidebar from \"./sidebar\";\nimport Header from \"./header\";\n\ninterface MainLayoutProps {\n  children: ReactNode;\n}\n\nexport default function MainLayout({ children }: MainLayoutProps) {\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background text-foreground\">\n      <Sidebar />\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header />\n        <div className=\"flex-1 overflow-hidden\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":531},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigation = [\n  {\n    name: \"Chat Assistant\",\n    href: \"/\",\n    icon: \"fas fa-comments\",\n  },\n  {\n    name: \"Project Planning\",\n    href: \"/project-planning\",\n    icon: \"fas fa-project-diagram\",\n  },\n  {\n    name: \"Project Templates\",\n    href: \"/project-templates\",\n    icon: \"fas fa-layer-group\",\n  },\n  {\n    name: \"Code Analysis\",\n    href: \"/code-analysis\",\n    icon: \"fas fa-code\",\n  },\n  {\n    name: \"Web Search\",\n    href: \"/web-search\",\n    icon: \"fas fa-search\",\n  },\n  {\n    name: \"Document Analysis\",\n    href: \"/document-analysis\",\n    icon: \"fas fa-file-alt\",\n  },\n  {\n    name: \"Integrations\",\n    href: \"/integrations\",\n    icon: \"fas fa-plug\",\n  },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-16 lg:w-64 bg-sidebar border-r border-sidebar-border flex flex-col\">\n      {/* App Header */}\n      <div className=\"p-4 border-b border-sidebar-border\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 bg-sidebar-primary rounded-lg flex items-center justify-center\">\n            <i className=\"fas fa-robot text-sidebar-primary-foreground text-sm\"></i>\n          </div>\n          <div className=\"hidden lg:block\">\n            <h1 className=\"font-semibold text-sm text-sidebar-foreground\">AI Assistant Studio</h1>\n            <p className=\"text-xs text-muted-foreground\">Professional AI Platform</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-2\">\n        <div className=\"space-y-1\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <Link\n                key={item.name}\n                href={item.href}\n                className={cn(\n                  \"flex items-center gap-3 px-3 py-2 rounded-md text-sm font-medium transition-colors\",\n                  isActive\n                    ? \"bg-sidebar-primary text-sidebar-primary-foreground\"\n                    : \"text-muted-foreground hover:text-sidebar-foreground hover:bg-sidebar-accent\"\n                )}\n                data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <i className={`${item.icon} w-4`}></i>\n                <span className=\"hidden lg:block\">{item.name}</span>\n              </Link>\n            );\n          })}\n        </div>\n      </nav>\n\n      {/* Configuration & Settings */}\n      <div className=\"p-2 border-t border-sidebar-border space-y-1\">\n        <Link \n          href=\"/settings\"\n          className=\"flex items-center gap-3 px-3 py-2 rounded-md text-muted-foreground hover:text-sidebar-foreground hover:bg-sidebar-accent transition-colors text-sm w-full\"\n          data-testid=\"nav-settings\"\n        >\n          <i className=\"fas fa-cog w-4\"></i>\n          <span className=\"hidden lg:block\">Settings</span>\n        </Link>\n        \n        {/* LLM Status Indicator */}\n        <div className=\"flex items-center gap-3 px-3 py-2 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full status-pulse\"></div>\n            <span className=\"hidden lg:block text-muted-foreground\">Ollama Connected</span>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3402},"client/src/components/tools/context-panel.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn } from \"@/lib/utils\";\nimport type { LLMConfiguration, SearchEngine, File as FileType } from \"@shared/schema\";\n\ninterface ContextPanelProps {\n  className?: string;\n}\n\nexport default function ContextPanel({ className }: ContextPanelProps) {\n  const [activeTab, setActiveTab] = useState<\"llm\" | \"search\" | \"context\" | \"files\">(\"llm\");\n  const userId = \"default-user\";\n\n  const { data: llmConfigs = [] } = useQuery({\n    queryKey: [\"/api/llm-configurations\", { userId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/llm-configurations?userId=${userId}`);\n      return response.json();\n    },\n  });\n\n  const { data: searchEngines = [] } = useQuery({\n    queryKey: [\"/api/search-engines\", { userId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/search-engines?userId=${userId}`);\n      return response.json();\n    },\n  });\n\n  const { data: recentFiles = [] } = useQuery({\n    queryKey: [\"/api/files\", { userId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/files?userId=${userId}`);\n      const files = await response.json();\n      return files.slice(0, 5); // Only show recent 5 files\n    },\n  });\n\n  const defaultConfig = llmConfigs.find((config: LLMConfiguration) => config.isDefault) || llmConfigs[0];\n  const enabledEngines = searchEngines.filter((engine: SearchEngine) => engine.enabled);\n\n  const contextItems = [\n    { type: \"code\", name: \"React Component Analysis\", icon: \"fas fa-code\" },\n    { type: \"search\", name: \"Web Search Results\", icon: \"fas fa-globe\" },\n  ];\n\n  return (\n    <aside className={cn(\"w-80 bg-sidebar border-l border-sidebar-border flex flex-col\", className)}>\n      {/* Tools Header */}\n      <div className=\"p-4 border-b border-sidebar-border\">\n        <h3 className=\"font-semibold text-sm text-sidebar-foreground\">AI Tools & Context</h3>\n        <p className=\"text-xs text-muted-foreground mt-1\">Active integrations and context information</p>\n      </div>\n\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-4 space-y-6\">\n          {/* LLM Configuration */}\n          <div>\n            <h4 className=\"font-medium text-sm mb-3 text-sidebar-foreground\">Local LLM Configuration</h4>\n            {defaultConfig ? (\n              <div className=\"space-y-3\">\n                <div>\n                  <label className=\"text-xs font-medium text-muted-foreground\">Model Endpoint</label>\n                  <Select defaultValue={defaultConfig.id}>\n                    <SelectTrigger className=\"w-full mt-1 h-8\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {llmConfigs.map((config: LLMConfiguration) => (\n                        <SelectItem key={config.id} value={config.id}>\n                          {config.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <label className=\"text-xs font-medium text-muted-foreground\">Active Model</label>\n                  <div className=\"mt-1 px-3 py-1.5 bg-primary/10 border border-primary/20 rounded text-sm text-primary\">\n                    {defaultConfig.model}\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"text-xs font-medium text-muted-foreground\">\n                    Temperature: {(defaultConfig.temperature || 70) / 100}\n                  </label>\n                  <Slider\n                    min={0}\n                    max={100}\n                    step={1}\n                    value={[defaultConfig.temperature || 70]}\n                    className=\"w-full mt-1\"\n                    data-testid=\"context-temperature-slider\"\n                  />\n                  <div className=\"text-xs text-muted-foreground text-right\">{(defaultConfig.temperature || 70) / 100}</div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-sm text-muted-foreground\">\n                No LLM configuration found\n              </div>\n            )}\n          </div>\n\n          <Separator />\n\n          {/* Search Engines */}\n          <div>\n            <h4 className=\"font-medium text-sm mb-3 text-sidebar-foreground\">Search Engine Integration</h4>\n            <div className=\"space-y-2\">\n              {searchEngines.map((engine: SearchEngine) => (\n                <label key={engine.id} className=\"flex items-center gap-2\">\n                  <Switch\n                    checked={engine.enabled}\n                    className=\"scale-75\"\n                    data-testid={`context-toggle-${engine.name.toLowerCase()}`}\n                  />\n                  <span className=\"text-sm\">{engine.name}</span>\n                </label>\n              ))}\n            </div>\n            \n            {enabledEngines.length > 0 && (\n              <div className=\"mt-2 text-xs text-muted-foreground\">\n                {enabledEngines.length} engine{enabledEngines.length !== 1 ? 's' : ''} enabled\n              </div>\n            )}\n          </div>\n\n          <Separator />\n\n          {/* Context & Files */}\n          <div>\n            <h4 className=\"font-medium text-sm mb-3 text-sidebar-foreground\">Active Context</h4>\n            <div className=\"space-y-2\">\n              {contextItems.map((item, index) => (\n                <div key={index} className=\"flex items-center gap-2 p-2 bg-accent/30 rounded text-sm\">\n                  <i className={`${item.icon} text-primary text-xs`}></i>\n                  <span className=\"flex-1 truncate\">{item.name}</span>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"h-auto p-0 text-muted-foreground hover:text-destructive\">\n                    <i className=\"fas fa-times text-xs\"></i>\n                  </Button>\n                </div>\n              ))}\n              \n              {contextItems.length === 0 && (\n                <div className=\"text-sm text-muted-foreground\">\n                  No active context\n                </div>\n              )}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Recent Files */}\n          <div>\n            <h4 className=\"font-medium text-sm mb-3 text-sidebar-foreground\">Recent Files</h4>\n            <div className=\"space-y-2\">\n              {recentFiles.map((file: FileType) => (\n                <div key={file.id} className=\"flex items-center gap-2 p-2 hover:bg-accent rounded cursor-pointer transition-colors text-sm\">\n                  <i className=\"fas fa-file-alt text-muted-foreground text-xs\"></i>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"truncate\" title={file.originalName}>{file.originalName}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {new Date(file.createdAt!).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n              ))}\n              \n              {recentFiles.length === 0 && (\n                <div className=\"text-sm text-muted-foreground\">\n                  No recent files\n                </div>\n              )}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Quick Actions */}\n          <div>\n            <h4 className=\"font-medium text-sm mb-3 text-sidebar-foreground\">Quick Actions</h4>\n            <div className=\"space-y-2\">\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start text-xs\" data-testid=\"quick-web-search\">\n                <i className=\"fas fa-search mr-2\"></i>\n                Web Search\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start text-xs\" data-testid=\"quick-code-review\">\n                <i className=\"fas fa-code mr-2\"></i>\n                Code Review\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start text-xs\" data-testid=\"quick-file-upload\">\n                <i className=\"fas fa-upload mr-2\"></i>\n                Upload File\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start text-xs\" data-testid=\"quick-new-project\">\n                <i className=\"fas fa-plus mr-2\"></i>\n                New Project\n              </Button>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Status Information */}\n          <div>\n            <h4 className=\"font-medium text-sm mb-3 text-sidebar-foreground\">System Status</h4>\n            <div className=\"space-y-2 text-xs\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">LLM Status:</span>\n                <Badge className=\"bg-green-500/10 text-green-400 border-green-500/20\">\n                  <div className=\"w-1.5 h-1.5 bg-green-400 rounded-full mr-1 status-pulse\"></div>\n                  Ready\n                </Badge>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Search APIs:</span>\n                <Badge variant=\"outline\">\n                  {enabledEngines.length}/{searchEngines.length} Active\n                </Badge>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Storage:</span>\n                <Badge variant=\"outline\">\n                  {recentFiles.length} Files\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ScrollArea>\n    </aside>\n  );\n}\n","size_bytes":10406},"client/src/components/tools/llm-config.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { LLMConfiguration } from \"@shared/schema\";\n\nexport default function LLMConfig() {\n  const [selectedConfig, setSelectedConfig] = useState<LLMConfiguration | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const userId = \"default-user\";\n\n  const { data: llmConfigs = [], isLoading } = useQuery({\n    queryKey: [\"/api/llm-configurations\", { userId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/llm-configurations?userId=${userId}`);\n      return response.json();\n    },\n  });\n\n  const updateConfigMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<LLMConfiguration> }) => {\n      const response = await apiRequest(\"PUT\", `/api/llm-configurations/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/llm-configurations\"] });\n      toast({\n        title: \"Configuration Updated\",\n        description: \"LLM configuration has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: error instanceof Error ? error.message : \"Failed to update configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteConfigMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/llm-configurations/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/llm-configurations\"] });\n      setSelectedConfig(null);\n      toast({\n        title: \"Configuration Deleted\",\n        description: \"LLM configuration has been deleted successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error instanceof Error ? error.message : \"Failed to delete configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const testConnectionMutation = useMutation({\n    mutationFn: async ({ endpoint, model }: { endpoint: string; model: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/llm/test-connection\", {\n        endpoint,\n        model,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: data.connected ? \"Connection Successful\" : \"Connection Failed\",\n        description: data.connected \n          ? \"Successfully connected to the LLM endpoint\" \n          : \"Failed to connect to the LLM endpoint\",\n        variant: data.connected ? \"default\" : \"destructive\",\n      });\n    },\n  });\n\n  const handleSetDefault = (config: LLMConfiguration) => {\n    updateConfigMutation.mutate({\n      id: config.id,\n      updates: { isDefault: true },\n    });\n  };\n\n  const handleUpdateTemperature = (config: LLMConfiguration, temperature: number) => {\n    updateConfigMutation.mutate({\n      id: config.id,\n      updates: { temperature },\n    });\n  };\n\n  const handleTestConnection = (config: LLMConfiguration) => {\n    testConnectionMutation.mutate({\n      endpoint: config.endpoint,\n      model: config.model,\n    });\n  };\n\n  const getEndpointStatus = (endpoint: string) => {\n    if (endpoint.includes(\"localhost\") || endpoint.includes(\"127.0.0.1\")) {\n      return { status: \"local\", color: \"bg-blue-500\" };\n    }\n    if (endpoint.includes(\"openai.com\")) {\n      return { status: \"openai\", color: \"bg-green-500\" };\n    }\n    if (endpoint.includes(\"anthropic.com\")) {\n      return { status: \"anthropic\", color: \"bg-purple-500\" };\n    }\n    return { status: \"custom\", color: \"bg-gray-500\" };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"h-32 bg-muted rounded animate-pulse\"></div>\n        ))}\n      </div>\n    );\n  }\n\n  if (llmConfigs.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"flex flex-col items-center justify-center py-12\">\n          <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n            <i className=\"fas fa-robot text-muted-foreground text-xl\"></i>\n          </div>\n          <h3 className=\"text-lg font-medium mb-2\">No LLM Configurations</h3>\n          <p className=\"text-muted-foreground text-center mb-4\">\n            Add your first LLM configuration to start using the AI assistant.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {llmConfigs.map((config: LLMConfiguration) => {\n          const endpointInfo = getEndpointStatus(config.endpoint);\n          return (\n            <Card\n              key={config.id}\n              className={`hover:bg-accent transition-colors cursor-pointer ${\n                selectedConfig?.id === config.id ? \"ring-2 ring-primary\" : \"\"\n              }`}\n              onClick={() => setSelectedConfig(config)}\n              data-testid={`llm-config-${config.id}`}\n            >\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-base\">{config.name}</CardTitle>\n                    <CardDescription className=\"text-sm\">{config.endpoint}</CardDescription>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {config.isDefault && (\n                      <Badge className=\"bg-primary/10 text-primary border-primary/20\">\n                        Default\n                      </Badge>\n                    )}\n                    <div className={`w-2 h-2 rounded-full ${endpointInfo.color}`} title={endpointInfo.status}></div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Model:</span>\n                    <span className=\"font-medium\">{config.model}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Temperature:</span>\n                    <span className=\"font-medium\">{(config.temperature || 70) / 100}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Max Tokens:</span>\n                    <span className=\"font-medium\">{config.maxTokens || 2048}</span>\n                  </div>\n                  \n                  <div className=\"flex gap-2 pt-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleTestConnection(config);\n                      }}\n                      disabled={testConnectionMutation.isPending}\n                      data-testid={`button-test-${config.id}`}\n                    >\n                      <i className=\"fas fa-plug text-xs mr-1\"></i>\n                      Test\n                    </Button>\n                    {!config.isDefault && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleSetDefault(config);\n                        }}\n                        disabled={updateConfigMutation.isPending}\n                        data-testid={`button-default-${config.id}`}\n                      >\n                        <i className=\"fas fa-star text-xs mr-1\"></i>\n                        Set Default\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Configuration Details Panel */}\n      {selectedConfig && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Configuration Details: {selectedConfig.name}</CardTitle>\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={() => deleteConfigMutation.mutate(selectedConfig.id)}\n                disabled={deleteConfigMutation.isPending}\n                data-testid={`button-delete-${selectedConfig.id}`}\n              >\n                <i className=\"fas fa-trash mr-2\"></i>\n                Delete\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Endpoint URL</label>\n                  <div className=\"mt-1 p-2 bg-muted rounded text-sm font-mono\">{selectedConfig.endpoint}</div>\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium\">Model Name</label>\n                  <div className=\"mt-1 p-2 bg-muted rounded text-sm font-mono\">{selectedConfig.model}</div>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">\n                    Temperature: {(selectedConfig.temperature || 70) / 100}\n                  </label>\n                  <Slider\n                    min={0}\n                    max={100}\n                    step={1}\n                    value={[selectedConfig.temperature || 70]}\n                    onValueChange={(value) => handleUpdateTemperature(selectedConfig, value[0])}\n                    className=\"w-full\"\n                    data-testid={`slider-temperature-${selectedConfig.id}`}\n                  />\n                  <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                    <span>Conservative</span>\n                    <span>Creative</span>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium\">Max Tokens</label>\n                  <div className=\"mt-1 p-2 bg-muted rounded text-sm\">{selectedConfig.maxTokens || 2048}</div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between pt-4 border-t\">\n              <div>\n                <h4 className=\"font-medium\">Default Configuration</h4>\n                <p className=\"text-sm text-muted-foreground\">Use this configuration for new conversations</p>\n              </div>\n              <Switch\n                checked={selectedConfig.isDefault}\n                onCheckedChange={(checked) => {\n                  if (checked) {\n                    handleSetDefault(selectedConfig);\n                  }\n                }}\n                disabled={updateConfigMutation.isPending}\n                data-testid={`toggle-default-${selectedConfig.id}`}\n              />\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":11890},"client/src/components/tools/search-engines.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { SearchEngine } from \"@shared/schema\";\n\nexport default function SearchEngines() {\n  const [selectedEngine, setSelectedEngine] = useState<SearchEngine | null>(null);\n  const [showApiKeyDialog, setShowApiKeyDialog] = useState(false);\n  const [apiKey, setApiKey] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const userId = \"default-user\";\n\n  const { data: searchEngines = [], isLoading } = useQuery({\n    queryKey: [\"/api/search-engines\", { userId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/search-engines?userId=${userId}`);\n      return response.json();\n    },\n  });\n\n  const updateEngineMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<SearchEngine> }) => {\n      const response = await apiRequest(\"PUT\", `/api/search-engines/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/search-engines\"] });\n      toast({\n        title: \"Settings Updated\",\n        description: \"Search engine settings have been updated.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: error instanceof Error ? error.message : \"Failed to update search engine\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToggleEngine = (engine: SearchEngine) => {\n    updateEngineMutation.mutate({\n      id: engine.id,\n      updates: { enabled: !engine.enabled },\n    });\n  };\n\n  const handleUpdateApiKey = (engine: SearchEngine) => {\n    setSelectedEngine(engine);\n    setApiKey(engine.apiKey || \"\");\n    setShowApiKeyDialog(true);\n  };\n\n  const handleSaveApiKey = () => {\n    if (selectedEngine) {\n      updateEngineMutation.mutate({\n        id: selectedEngine.id,\n        updates: { apiKey: apiKey || null },\n      });\n      setShowApiKeyDialog(false);\n      setSelectedEngine(null);\n      setApiKey(\"\");\n    }\n  };\n\n  const getEngineIcon = (name: string) => {\n    switch (name.toLowerCase()) {\n      case 'google':\n        return 'fab fa-google';\n      case 'bing':\n        return 'fab fa-microsoft';\n      case 'duckduckgo':\n        return 'fas fa-search';\n      default:\n        return 'fas fa-search';\n    }\n  };\n\n  const getEngineColor = (name: string) => {\n    switch (name.toLowerCase()) {\n      case 'google':\n        return 'text-blue-600';\n      case 'bing':\n        return 'text-blue-500';\n      case 'duckduckgo':\n        return 'text-orange-500';\n      default:\n        return 'text-gray-500';\n    }\n  };\n\n  const getEngineDescription = (name: string) => {\n    switch (name.toLowerCase()) {\n      case 'google':\n        return 'Google Search API for comprehensive web results';\n      case 'bing':\n        return 'Microsoft Bing Search API for alternative perspectives';\n      case 'duckduckgo':\n        return 'Privacy-focused search with instant answers';\n      default:\n        return 'Search engine integration';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"h-24 bg-muted rounded animate-pulse\"></div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {searchEngines.map((engine: SearchEngine) => (\n        <Card key={engine.id} data-testid={`search-engine-${engine.name.toLowerCase()}`}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center\">\n                  <i className={`${getEngineIcon(engine.name)} ${getEngineColor(engine.name)} text-xl`}></i>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg\">{engine.name}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{getEngineDescription(engine.name)}</p>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    {engine.apiKey ? (\n                      <Badge className=\"bg-green-500/10 text-green-500 border-green-500/20\">\n                        API Key Configured\n                      </Badge>\n                    ) : engine.name.toLowerCase() === 'duckduckgo' ? (\n                      <Badge variant=\"outline\">No API Key Required</Badge>\n                    ) : (\n                      <Badge variant=\"destructive\">API Key Required</Badge>\n                    )}\n                    {engine.enabled ? (\n                      <Badge className=\"bg-blue-500/10 text-blue-500 border-blue-500/20\">Enabled</Badge>\n                    ) : (\n                      <Badge variant=\"outline\">Disabled</Badge>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-4\">\n                {engine.name.toLowerCase() !== 'duckduckgo' && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleUpdateApiKey(engine)}\n                    data-testid={`button-api-key-${engine.name.toLowerCase()}`}\n                  >\n                    <i className=\"fas fa-key mr-2\"></i>\n                    {engine.apiKey ? 'Update API Key' : 'Add API Key'}\n                  </Button>\n                )}\n                \n                <div className=\"flex items-center gap-2\">\n                  <Label htmlFor={`toggle-${engine.id}`} className=\"text-sm\">\n                    {engine.enabled ? 'Enabled' : 'Disabled'}\n                  </Label>\n                  <Switch\n                    id={`toggle-${engine.id}`}\n                    checked={engine.enabled}\n                    onCheckedChange={() => handleToggleEngine(engine)}\n                    disabled={updateEngineMutation.isPending}\n                    data-testid={`toggle-${engine.name.toLowerCase()}`}\n                  />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n\n      {/* API Key Configuration Dialog */}\n      <Dialog open={showApiKeyDialog} onOpenChange={setShowApiKeyDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Configure API Key for {selectedEngine?.name}</DialogTitle>\n            <DialogDescription>\n              Enter your API key to enable {selectedEngine?.name} search functionality.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"api-key\">API Key</Label>\n              <Input\n                id=\"api-key\"\n                type=\"password\"\n                placeholder=\"Enter your API key\"\n                value={apiKey}\n                onChange={(e) => setApiKey(e.target.value)}\n                data-testid=\"input-api-key\"\n              />\n              {selectedEngine?.name.toLowerCase() === 'google' && (\n                <p className=\"text-xs text-muted-foreground\">\n                  Get your Google Custom Search API key from the Google Cloud Console.\n                </p>\n              )}\n              {selectedEngine?.name.toLowerCase() === 'bing' && (\n                <p className=\"text-xs text-muted-foreground\">\n                  Get your Bing Search API key from Microsoft Azure Cognitive Services.\n                </p>\n              )}\n            </div>\n            \n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setShowApiKeyDialog(false)}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handleSaveApiKey}\n                disabled={updateEngineMutation.isPending}\n                data-testid=\"button-save-api-key\"\n              >\n                {updateEngineMutation.isPending ? \"Saving...\" : \"Save API Key\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Search Tips */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Search Configuration Tips</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3 text-sm\">\n            <div className=\"flex items-start gap-2\">\n              <i className=\"fas fa-lightbulb text-primary mt-0.5\"></i>\n              <div>\n                <p className=\"font-medium\">Enable Multiple Engines</p>\n                <p className=\"text-muted-foreground\">Use multiple search engines to get comprehensive results and different perspectives</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <i className=\"fas fa-shield-alt text-primary mt-0.5\"></i>\n              <div>\n                <p className=\"font-medium\">API Key Security</p>\n                <p className=\"text-muted-foreground\">API keys are stored securely and only used for search requests</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <i className=\"fas fa-chart-line text-primary mt-0.5\"></i>\n              <div>\n                <p className=\"font-medium\">Rate Limiting</p>\n                <p className=\"text-muted-foreground\">Search requests are automatically rate-limited to stay within API quotas</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10184},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# AI Assistant Studio\n\n## Overview\n\nAI Assistant Studio is a professional AI development companion that integrates local LLM capabilities with web search, code analysis, and document processing features. The application provides a comprehensive chat interface with multi-modal support, allowing users to interact with AI models while leveraging external integrations like GitHub, search engines, and file analysis tools.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**React + TypeScript SPA**: Built using React 18 with TypeScript, utilizing Vite for development and build tooling. The frontend follows a component-based architecture with clear separation of concerns.\n\n**UI Framework**: Implements shadcn/ui component library with Radix UI primitives for accessibility and consistent design. Uses Tailwind CSS for styling with a custom dark theme configuration.\n\n**State Management**: Employs TanStack React Query for server state management and caching, with custom hooks for specific domain logic (chat, file upload, LLM interactions).\n\n**Routing**: Uses Wouter for client-side routing with a main layout containing sidebar navigation and dynamic content areas.\n\n**Key Frontend Components**:\n- Chat interface with message threading and file attachment support\n- Multi-tab pages for different AI tools (code analysis, web search, document analysis)\n- Real-time context panel showing active configurations\n- File upload zones with drag-and-drop functionality\n\n### Backend Architecture\n\n**Node.js + Express**: RESTful API server built with Express.js, using ES modules and TypeScript for type safety.\n\n**Database Layer**: PostgreSQL database with Drizzle ORM for type-safe database operations. Uses connection pooling via @neondatabase/serverless for scalability.\n\n**Service Architecture**: Modular service layer with dedicated services for:\n- LLM interactions (local and remote model support)\n- Search engine integration (Google, Bing, DuckDuckGo)\n- File processing and analysis\n- GitHub integration with OAuth\n- Project and conversation management\n\n**API Design**: RESTful endpoints with consistent error handling and response formatting. Implements file upload handling with Multer for multipart data.\n\n### Data Storage Solutions\n\n**Primary Database**: PostgreSQL with the following core entities:\n- Users and authentication\n- Conversations and messages with metadata support\n- Projects with GitHub integration\n- File storage with analysis metadata\n- LLM and search engine configurations\n\n**Database Schema**: Uses Drizzle ORM with migration support, featuring:\n- UUID primary keys with automatic generation\n- JSONB fields for flexible metadata storage\n- Timestamp tracking for created/updated records\n- Foreign key relationships with proper constraints\n\n### Authentication and Authorization\n\n**GitHub OAuth Integration**: Primary authentication mechanism through GitHub OAuth with token refresh capabilities. Implements secure token storage and validation.\n\n**Session Management**: Uses connect-pg-simple for PostgreSQL-backed session storage with Express sessions.\n\n### External Service Integrations\n\n**GitHub Integration**: \n- Repository browsing and management\n- Code analysis and file tree traversal\n- OAuth-based authentication with automatic token refresh\n\n**Search Engine APIs**:\n- Multi-provider search (Google, Bing, DuckDuckGo)\n- Configurable API key management\n- Result aggregation and deduplication\n\n**LLM Integration**:\n- Support for local and remote LLM endpoints\n- Configurable temperature and token limits\n- Multiple model support with provider-agnostic interface\n\n**File Processing**:\n- Multi-format file upload and storage\n- Automatic file type detection and analysis\n- Code metrics extraction for programming files\n- Document content extraction and summarization\n\n### Development and Deployment\n\n**Build System**: Vite-based development with hot module replacement and TypeScript compilation. Production builds create optimized client bundles and Node.js server artifacts.\n\n**Database Migrations**: Drizzle Kit handles schema migrations with PostgreSQL dialect support.\n\n**Environment Configuration**: Environment-based configuration for database connections, API keys, and service endpoints.","size_bytes":4302},"uploads/1759018820713-x8rl2j5cod-test.js":{"content":"console.log(\"hello from test file\");\nfunction add(a,b){return a+b;}\n","size_bytes":68},"client/src/contexts/auth-context.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  username: string;\n  createdAt: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  sessionId: string | null;\n  isLoading: boolean;\n  login: () => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const login = async () => {\n    try {\n      const response = await apiRequest('POST', '/api/auth/demo-login');\n      const data = await response.json();\n      \n      setUser(data.user);\n      setSessionId(data.sessionId);\n      \n      // Store session in localStorage for persistence\n      localStorage.setItem('sessionId', data.sessionId);\n      localStorage.setItem('user', JSON.stringify(data.user));\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setSessionId(null);\n    localStorage.removeItem('sessionId');\n    localStorage.removeItem('user');\n  };\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const storedSessionId = localStorage.getItem('sessionId');\n    const storedUser = localStorage.getItem('user');\n    \n    if (storedSessionId && storedUser) {\n      try {\n        setSessionId(storedSessionId);\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        console.error('Failed to parse stored user data:', error);\n        logout();\n      }\n    }\n    \n    setIsLoading(false);\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, sessionId, isLoading, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":2142},"server/services/template-service.ts":{"content":"import { storage } from \"../storage\";\nimport type { InsertProjectTemplate } from \"@shared/schema\";\n\nexport class TemplateService {\n  \n  async initializeDefaultTemplates(): Promise<void> {\n    const existingTemplates = await storage.getProjectTemplates();\n    \n    // Only initialize if no templates exist\n    if (existingTemplates.length > 0) {\n      return;\n    }\n\n    const defaultTemplates = this.getDefaultTemplates();\n    \n    for (const template of defaultTemplates) {\n      try {\n        await storage.createProjectTemplate(template);\n        console.log(`Initialized template: ${template.name}`);\n      } catch (error) {\n        console.error(`Failed to initialize template ${template.name}:`, error);\n      }\n    }\n  }\n\n  private getDefaultTemplates(): InsertProjectTemplate[] {\n    return [\n      {\n        name: \"React TypeScript App\",\n        description: \"Modern React application with TypeScript, Vite, and Tailwind CSS\",\n        category: \"web\",\n        techStack: {\n          frontend: [\"React\", \"TypeScript\", \"Vite\", \"Tailwind CSS\"],\n          backend: [],\n          database: [],\n          tools: [\"ESLint\", \"Prettier\"]\n        },\n        files: [\n          {\n            path: \"package.json\",\n            content: JSON.stringify({\n              name: \"react-typescript-app\",\n              version: \"1.0.0\",\n              type: \"module\",\n              scripts: {\n                dev: \"vite\",\n                build: \"tsc && vite build\",\n                preview: \"vite preview\",\n                lint: \"eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0\"\n              },\n              dependencies: {\n                react: \"^18.2.0\",\n                \"react-dom\": \"^18.2.0\"\n              },\n              devDependencies: {\n                \"@types/react\": \"^18.2.43\",\n                \"@types/react-dom\": \"^18.2.17\",\n                \"@typescript-eslint/eslint-plugin\": \"^6.14.0\",\n                \"@typescript-eslint/parser\": \"^6.14.0\",\n                \"@vitejs/plugin-react\": \"^4.2.1\",\n                autoprefixer: \"^10.4.16\",\n                eslint: \"^8.55.0\",\n                \"eslint-plugin-react-hooks\": \"^4.6.0\",\n                \"eslint-plugin-react-refresh\": \"^0.4.5\",\n                postcss: \"^8.4.32\",\n                tailwindcss: \"^3.4.0\",\n                typescript: \"^5.2.2\",\n                vite: \"^5.0.8\"\n              }\n            }, null, 2),\n            type: \"config\"\n          },\n          {\n            path: \"src/App.tsx\",\n            content: `import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div className=\"max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden\">\n        <div className=\"p-8\">\n          <div className=\"uppercase tracking-wide text-sm text-indigo-500 font-semibold\">\n            React TypeScript App\n          </div>\n          <h1 className=\"mt-2 text-xl leading-tight font-medium text-black\">\n            Welcome to your new project!\n          </h1>\n          <p className=\"mt-2 text-gray-500\">\n            This is a modern React application built with TypeScript and Tailwind CSS.\n            Start building amazing things!\n          </p>\n          <div className=\"mt-4\">\n            <button className=\"bg-indigo-500 text-white px-4 py-2 rounded hover:bg-indigo-600 transition-colors\">\n              Get Started\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;`,\n            type: \"component\"\n          },\n          {\n            path: \"src/main.tsx\",\n            content: `import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)`,\n            type: \"entry\"\n          },\n          {\n            path: \"src/index.css\",\n            content: `@tailwind base;\n@tailwind components;\n@tailwind utilities;`,\n            type: \"styles\"\n          },\n          {\n            path: \"index.html\",\n            content: `<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>React TypeScript App</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html>`,\n            type: \"markup\"\n          }\n        ],\n        dependencies: {\n          react: \"^18.2.0\",\n          \"react-dom\": \"^18.2.0\"\n        },\n        instructions: \"1. Run 'npm install' to install dependencies\\n2. Run 'npm run dev' to start development server\\n3. Open http://localhost:5173 in your browser\\n4. Start editing src/App.tsx to build your application\",\n        difficulty: \"beginner\",\n        estimatedTime: \"30 minutes\",\n        tags: [\"react\", \"typescript\", \"vite\", \"tailwind\", \"frontend\"],\n        isPublic: true\n      },\n      {\n        name: \"Express API Server\",\n        description: \"RESTful API server with Express.js, TypeScript, and PostgreSQL\",\n        category: \"api\",\n        techStack: {\n          frontend: [],\n          backend: [\"Node.js\", \"Express\", \"TypeScript\"],\n          database: [\"PostgreSQL\"],\n          tools: [\"Nodemon\", \"ESLint\"]\n        },\n        files: [\n          {\n            path: \"package.json\",\n            content: JSON.stringify({\n              name: \"express-api-server\",\n              version: \"1.0.0\",\n              main: \"dist/index.js\",\n              scripts: {\n                build: \"tsc\",\n                start: \"node dist/index.js\",\n                dev: \"nodemon src/index.ts\",\n                test: \"jest\"\n              },\n              dependencies: {\n                express: \"^4.18.2\",\n                cors: \"^2.8.5\",\n                helmet: \"^7.1.0\",\n                dotenv: \"^16.3.1\",\n                pg: \"^8.11.3\"\n              },\n              devDependencies: {\n                \"@types/express\": \"^4.17.21\",\n                \"@types/cors\": \"^2.8.17\",\n                \"@types/node\": \"^20.10.5\",\n                \"@types/pg\": \"^8.10.9\",\n                typescript: \"^5.3.3\",\n                nodemon: \"^3.0.2\",\n                \"ts-node\": \"^10.9.2\",\n                jest: \"^29.7.0\",\n                \"@types/jest\": \"^29.5.8\"\n              }\n            }, null, 2),\n            type: \"config\"\n          },\n          {\n            path: \"src/index.ts\",\n            content: `import express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport dotenv from 'dotenv';\nimport { apiRoutes } from './routes/api';\nimport { errorHandler } from './middleware/errorHandler';\n\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(helmet());\napp.use(cors());\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// Routes\napp.get('/', (req, res) => {\n  res.json({ message: 'Express API Server is running!' });\n});\n\napp.use('/api', apiRoutes);\n\n// Error handling\napp.use(errorHandler);\n\napp.listen(PORT, () => {\n  console.log(\\`ðŸš€ Server running on http://localhost:\\${PORT}\\`);\n});\n\nexport default app;`,\n            type: \"entry\"\n          },\n          {\n            path: \"src/routes/api.ts\",\n            content: `import { Router } from 'express';\n\nconst router = Router();\n\n// Health check\nrouter.get('/health', (req, res) => {\n  res.json({ status: 'OK', timestamp: new Date().toISOString() });\n});\n\n// Example users endpoint\nrouter.get('/users', (req, res) => {\n  // TODO: Implement user retrieval from database\n  res.json([\n    { id: 1, name: 'John Doe', email: 'john@example.com' },\n    { id: 2, name: 'Jane Smith', email: 'jane@example.com' }\n  ]);\n});\n\nrouter.post('/users', (req, res) => {\n  const { name, email } = req.body;\n  \n  if (!name || !email) {\n    return res.status(400).json({ error: 'Name and email are required' });\n  }\n  \n  // TODO: Save user to database\n  const newUser = { id: Date.now(), name, email };\n  res.status(201).json(newUser);\n});\n\nexport { router as apiRoutes };`,\n            type: \"routes\"\n          },\n          {\n            path: \"src/middleware/errorHandler.ts\",\n            content: `import { Request, Response, NextFunction } from 'express';\n\nexport const errorHandler = (\n  error: any,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  console.error('Error:', error);\n  \n  const status = error.status || 500;\n  const message = error.message || 'Internal Server Error';\n  \n  res.status(status).json({\n    error: message,\n    ...(process.env.NODE_ENV === 'development' && { stack: error.stack })\n  });\n};`,\n            type: \"middleware\"\n          }\n        ],\n        dependencies: {\n          express: \"^4.18.2\",\n          cors: \"^2.8.5\",\n          helmet: \"^7.1.0\",\n          dotenv: \"^16.3.1\"\n        },\n        instructions: \"1. Run 'npm install' to install dependencies\\n2. Create a .env file with DATABASE_URL\\n3. Run 'npm run dev' to start development server\\n4. Test the API at http://localhost:3000/api/health\\n5. Add your database models and expand the API endpoints\",\n        difficulty: \"intermediate\",\n        estimatedTime: \"1-2 hours\",\n        tags: [\"express\", \"typescript\", \"api\", \"backend\", \"postgresql\"],\n        isPublic: true\n      },\n      {\n        name: \"Next.js Full Stack\",\n        description: \"Full-stack Next.js application with TypeScript, Tailwind, and authentication\",\n        category: \"web\",\n        techStack: {\n          frontend: [\"Next.js\", \"React\", \"TypeScript\", \"Tailwind CSS\"],\n          backend: [\"Next.js API Routes\"],\n          database: [\"PostgreSQL\"],\n          tools: [\"Prisma\", \"NextAuth.js\"]\n        },\n        files: [\n          {\n            path: \"package.json\",\n            content: JSON.stringify({\n              name: \"nextjs-fullstack-app\",\n              version: \"0.1.0\",\n              private: true,\n              scripts: {\n                build: \"next build\",\n                dev: \"next dev\",\n                lint: \"next lint\",\n                start: \"next start\"\n              },\n              dependencies: {\n                \"next\": \"14.0.4\",\n                \"react\": \"^18\",\n                \"react-dom\": \"^18\",\n                \"next-auth\": \"^4.24.5\",\n                \"@prisma/client\": \"^5.7.1\"\n              },\n              devDependencies: {\n                \"typescript\": \"^5\",\n                \"@types/node\": \"^20\",\n                \"@types/react\": \"^18\",\n                \"@types/react-dom\": \"^18\",\n                \"autoprefixer\": \"^10.0.1\",\n                \"eslint\": \"^8\",\n                \"eslint-config-next\": \"14.0.4\",\n                \"postcss\": \"^8\",\n                \"prisma\": \"^5.7.1\",\n                \"tailwindcss\": \"^3.3.0\"\n              }\n            }, null, 2),\n            type: \"config\"\n          },\n          {\n            path: \"app/page.tsx\",\n            content: `export default function Home() {\n  return (\n    <main className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-bold text-gray-900 sm:text-6xl\">\n            Welcome to Your\n            <span className=\"text-indigo-600\"> Next.js App</span>\n          </h1>\n          <p className=\"mt-6 text-lg leading-8 text-gray-600 max-w-2xl mx-auto\">\n            A full-stack Next.js application with TypeScript, Tailwind CSS, and authentication.\n            Ready to build something amazing!\n          </p>\n          <div className=\"mt-10 flex items-center justify-center gap-x-6\">\n            <a\n              href=\"#\"\n              className=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n            >\n              Get started\n            </a>\n            <a href=\"#\" className=\"text-sm font-semibold leading-6 text-gray-900\">\n              Learn more <span aria-hidden=\"true\">â†’</span>\n            </a>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}`,\n            type: \"page\"\n          },\n          {\n            path: \"app/layout.tsx\",\n            content: `import type { Metadata } from 'next'\nimport { Inter } from 'next/font/google'\nimport './globals.css'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport const metadata: Metadata = {\n  title: 'Next.js Full Stack App',\n  description: 'A modern full-stack application built with Next.js',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>{children}</body>\n    </html>\n  )\n}`,\n            type: \"layout\"\n          },\n          {\n            path: \"app/globals.css\",\n            content: `@tailwind base;\n@tailwind components;\n@tailwind utilities;`,\n            type: \"styles\"\n          }\n        ],\n        dependencies: {\n          \"next\": \"14.0.4\",\n          \"react\": \"^18\",\n          \"react-dom\": \"^18\"\n        },\n        instructions: \"1. Run 'npm install' to install dependencies\\n2. Set up your database connection in .env.local\\n3. Run 'npx prisma generate' to set up Prisma\\n4. Run 'npm run dev' to start development server\\n5. Open http://localhost:3000 to see your app\",\n        difficulty: \"intermediate\",\n        estimatedTime: \"2-3 hours\",\n        tags: [\"nextjs\", \"react\", \"typescript\", \"tailwind\", \"fullstack\"],\n        isPublic: true\n      },\n      {\n        name: \"Python FastAPI Backend\",\n        description: \"Modern Python API with FastAPI, async/await, and PostgreSQL integration\",\n        category: \"api\",\n        techStack: {\n          frontend: [],\n          backend: [\"Python\", \"FastAPI\", \"SQLAlchemy\"],\n          database: [\"PostgreSQL\"],\n          tools: [\"Uvicorn\", \"Pydantic\"]\n        },\n        files: [\n          {\n            path: \"requirements.txt\",\n            content: `fastapi==0.104.1\nuvicorn[standard]==0.24.0\nsqlalchemy==2.0.23\npsycopg2-binary==2.9.9\npydantic==2.5.2\npython-dotenv==1.0.0\nalembic==1.13.1\npython-multipart==0.0.6`,\n            type: \"config\"\n          },\n          {\n            path: \"main.py\",\n            content: `from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom contextlib import asynccontextmanager\nimport uvicorn\nfrom routers import users\nfrom database import engine, Base\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Create tables\n    Base.metadata.create_all(bind=engine)\n    yield\n\napp = FastAPI(\n    title=\"FastAPI Backend\",\n    description=\"A modern Python API built with FastAPI\",\n    version=\"1.0.0\",\n    lifespan=lifespan\n)\n\n# Configure CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Configure this for production\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Include routers\napp.include_router(users.router, prefix=\"/api/v1\")\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"FastAPI Backend is running!\"}\n\n@app.get(\"/health\")\nasync def health_check():\n    return {\"status\": \"OK\", \"message\": \"API is healthy\"}\n\nif __name__ == \"__main__\":\n    uvicorn.run(\n        \"main:app\",\n        host=\"0.0.0.0\",\n        port=int(os.getenv(\"PORT\", 8000)),\n        reload=True\n    )`,\n            type: \"entry\"\n          },\n          {\n            path: \"database.py\",\n            content: `from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nDATABASE_URL = os.getenv(\"DATABASE_URL\", \"postgresql://user:password@localhost/dbname\")\n\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\n# Dependency to get database session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()`,\n            type: \"database\"\n          },\n          {\n            path: \"models/user.py\",\n            content: `from sqlalchemy import Column, Integer, String, DateTime, Boolean\nfrom sqlalchemy.sql import func\nfrom database import Base\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True, nullable=False)\n    name = Column(String, nullable=False)\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())`,\n            type: \"model\"\n          },\n          {\n            path: \"schemas/user.py\",\n            content: `from pydantic import BaseModel, EmailStr\nfrom datetime import datetime\nfrom typing import Optional\n\nclass UserBase(BaseModel):\n    email: EmailStr\n    name: str\n\nclass UserCreate(UserBase):\n    pass\n\nclass UserUpdate(BaseModel):\n    name: Optional[str] = None\n    email: Optional[EmailStr] = None\n    is_active: Optional[bool] = None\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    created_at: datetime\n    updated_at: Optional[datetime] = None\n\n    class Config:\n        from_attributes = True`,\n            type: \"schema\"\n          },\n          {\n            path: \"routers/users.py\",\n            content: `from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom typing import List\nfrom database import get_db\nfrom models.user import User\nfrom schemas.user import User as UserSchema, UserCreate, UserUpdate\n\nrouter = APIRouter(prefix=\"/users\", tags=[\"users\"])\n\n@router.get(\"/\", response_model=List[UserSchema])\nasync def get_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    users = db.query(User).offset(skip).limit(limit).all()\n    return users\n\n@router.get(\"/{user_id}\", response_model=UserSchema)\nasync def get_user(user_id: int, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.id == user_id).first()\n    if user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user\n\n@router.post(\"/\", response_model=UserSchema, status_code=status.HTTP_201_CREATED)\nasync def create_user(user: UserCreate, db: Session = Depends(get_db)):\n    # Check if user already exists\n    db_user = db.query(User).filter(User.email == user.email).first()\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    \n    db_user = User(**user.model_dump())\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n@router.put(\"/{user_id}\", response_model=UserSchema)\nasync def update_user(user_id: int, user: UserUpdate, db: Session = Depends(get_db)):\n    db_user = db.query(User).filter(User.id == user_id).first()\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    \n    update_data = user.model_dump(exclude_unset=True)\n    for field, value in update_data.items():\n        setattr(db_user, field, value)\n    \n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n@router.delete(\"/{user_id}\")\nasync def delete_user(user_id: int, db: Session = Depends(get_db)):\n    db_user = db.query(User).filter(User.id == user_id).first()\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    \n    db.delete(db_user)\n    db.commit()\n    return {\"message\": \"User deleted successfully\"}`,\n            type: \"routes\"\n          }\n        ],\n        dependencies: {\n          fastapi: \"0.104.1\",\n          uvicorn: \"0.24.0\",\n          sqlalchemy: \"2.0.23\"\n        },\n        instructions: \"1. Create a virtual environment: python -m venv venv\\n2. Activate it: source venv/bin/activate (Unix) or venv\\\\Scripts\\\\activate (Windows)\\n3. Install dependencies: pip install -r requirements.txt\\n4. Create .env file with DATABASE_URL\\n5. Run the server: python main.py\\n6. Visit http://localhost:8000/docs for interactive API documentation\",\n        difficulty: \"intermediate\",\n        estimatedTime: \"2-3 hours\",\n        tags: [\"python\", \"fastapi\", \"api\", \"backend\", \"sqlalchemy\"],\n        isPublic: true\n      }\n    ];\n  }\n\n  async seedTemplate(templateData: InsertProjectTemplate): Promise<void> {\n    try {\n      await storage.createProjectTemplate(templateData);\n      console.log(`Seeded template: ${templateData.name}`);\n    } catch (error) {\n      console.error(`Failed to seed template ${templateData.name}:`, error);\n    }\n  }\n}","size_bytes":20688},"client/src/pages/project-templates.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ProjectTemplate } from \"@shared/schema\";\n\nconst categories = [\n  { value: \"web\", label: \"Web Apps\", icon: \"fas fa-globe\" },\n  { value: \"api\", label: \"API Services\", icon: \"fas fa-server\" },\n  { value: \"mobile\", label: \"Mobile Apps\", icon: \"fas fa-mobile-alt\" },\n  { value: \"desktop\", label: \"Desktop Apps\", icon: \"fas fa-desktop\" },\n  { value: \"ml\", label: \"ML/AI\", icon: \"fas fa-brain\" },\n  { value: \"blockchain\", label: \"Blockchain\", icon: \"fas fa-link\" }\n];\n\nconst difficultyColors = {\n  beginner: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\",\n  intermediate: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\",\n  advanced: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\"\n};\n\nexport default function ProjectTemplates() {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [selectedTemplate, setSelectedTemplate] = useState<ProjectTemplate | null>(null);\n  const [projectName, setProjectName] = useState(\"\");\n  const [projectDescription, setProjectDescription] = useState(\"\");\n  const [showGenerateDialog, setShowGenerateDialog] = useState(false);\n  const { toast } = useToast();\n\n  const { data: templates = [], isLoading } = useQuery({\n    queryKey: [\"/api/project-templates\", selectedCategory],\n    queryFn: async () => {\n      const params = selectedCategory !== \"all\" ? `?category=${selectedCategory}` : \"\";\n      const response = await apiRequest(\"GET\", `/api/project-templates${params}`);\n      return response.json();\n    },\n  });\n\n  const generateProjectMutation = useMutation({\n    mutationFn: async ({ templateId, name, description }: { templateId: string; name: string; description: string }) => {\n      const response = await apiRequest(\"POST\", `/api/project-templates/${templateId}/generate`, {\n        projectName: name,\n        description\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Project Generated!\",\n        description: (\n          <div className=\"space-y-2\">\n            <p>{data.message}</p>\n            <a \n              href={data.downloadUrl} \n              className=\"inline-block mt-2 px-3 py-1 bg-primary text-primary-foreground text-sm rounded hover:bg-primary/90 transition-colors\"\n              download\n            >\n              <i className=\"fas fa-download mr-2\"></i>\n              Download Project\n            </a>\n          </div>\n        ),\n        duration: 10000\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      setShowGenerateDialog(false);\n      setProjectName(\"\");\n      setProjectDescription(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Generation Failed\",\n        description: error.message || \"Failed to generate project from template\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleGenerateProject = () => {\n    if (!selectedTemplate) return;\n    \n    generateProjectMutation.mutate({\n      templateId: selectedTemplate.id,\n      name: projectName || selectedTemplate.name,\n      description: projectDescription || selectedTemplate.description\n    });\n  };\n\n  const openGenerateDialog = (template: ProjectTemplate) => {\n    setSelectedTemplate(template);\n    setProjectName(template.name);\n    setProjectDescription(template.description);\n    setShowGenerateDialog(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold\">Project Templates</h1>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-6 bg-muted rounded w-3/4\"></div>\n                <div className=\"h-4 bg-muted rounded w-full\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"h-4 bg-muted rounded\"></div>\n                  <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"title-templates\">Project Templates</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Jumpstart your development with pre-built project templates\n          </p>\n        </div>\n      </div>\n\n      <Tabs value={selectedCategory} onValueChange={setSelectedCategory} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-7\">\n          <TabsTrigger value=\"all\" data-testid=\"tab-all\">All</TabsTrigger>\n          {categories.map((category) => (\n            <TabsTrigger key={category.value} value={category.value} data-testid={`tab-${category.value}`}>\n              <i className={`${category.icon} mr-2`}></i>\n              {category.label}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        <TabsContent value={selectedCategory} className=\"mt-6\">\n          {templates.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex items-center justify-center py-12\">\n                <div className=\"text-center\">\n                  <i className=\"fas fa-folder-open text-4xl text-muted-foreground mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold mb-2\">No Templates Available</h3>\n                  <p className=\"text-muted-foreground\">\n                    {selectedCategory === \"all\" \n                      ? \"No project templates found. Check back later!\"\n                      : `No templates found in the ${categories.find(c => c.value === selectedCategory)?.label} category.`\n                    }\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {templates.map((template: ProjectTemplate) => (\n                <Card key={template.id} className=\"hover:shadow-md transition-shadow\" data-testid={`template-${template.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-xl\">{template.name}</CardTitle>\n                        <CardDescription className=\"mt-1\">\n                          {template.description}\n                        </CardDescription>\n                      </div>\n                      <Badge className={difficultyColors[template.difficulty as keyof typeof difficultyColors]}>\n                        {template.difficulty}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-semibold text-sm mb-2\">Tech Stack</h4>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {[\n                          ...(template.techStack as any)?.frontend || [],\n                          ...(template.techStack as any)?.backend || [],\n                          ...(template.techStack as any)?.database || []\n                        ].slice(0, 4).map((tech: string, index: number) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                            {tech}\n                          </Badge>\n                        ))}\n                        {([\n                          ...(template.techStack as any)?.frontend || [],\n                          ...(template.techStack as any)?.backend || [],\n                          ...(template.techStack as any)?.database || []\n                        ].length > 4) && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{([\n                              ...(template.techStack as any)?.frontend || [],\n                              ...(template.techStack as any)?.backend || [],\n                              ...(template.techStack as any)?.database || []\n                            ].length - 4)} more\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n\n                    {template.estimatedTime && (\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <i className=\"fas fa-clock mr-2\"></i>\n                        {template.estimatedTime}\n                      </div>\n                    )}\n\n                    <Button \n                      onClick={() => openGenerateDialog(template)} \n                      className=\"w-full\"\n                      data-testid={`generate-${template.id}`}\n                    >\n                      <i className=\"fas fa-plus mr-2\"></i>\n                      Generate Project\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      <Dialog open={showGenerateDialog} onOpenChange={setShowGenerateDialog}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle>Generate Project</DialogTitle>\n            <DialogDescription>\n              Create a new project based on the {selectedTemplate?.name} template\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedTemplate && (\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"project-name\">Project Name</Label>\n                <Input\n                  id=\"project-name\"\n                  value={projectName}\n                  onChange={(e) => setProjectName(e.target.value)}\n                  placeholder=\"Enter project name\"\n                  data-testid=\"input-project-name\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"project-description\">Description</Label>\n                <Textarea\n                  id=\"project-description\"\n                  value={projectDescription}\n                  onChange={(e) => setProjectDescription(e.target.value)}\n                  placeholder=\"Enter project description\"\n                  rows={3}\n                  data-testid=\"input-project-description\"\n                />\n              </div>\n\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold mb-2\">Template Details</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div>\n                    <span className=\"font-medium\">Files:</span> {(selectedTemplate.files as any[]).length} files\n                  </div>\n                  {selectedTemplate.estimatedTime && (\n                    <div>\n                      <span className=\"font-medium\">Setup Time:</span> {selectedTemplate.estimatedTime}\n                    </div>\n                  )}\n                  <div>\n                    <span className=\"font-medium\">Difficulty:</span> \n                    <Badge className={`ml-2 ${difficultyColors[selectedTemplate.difficulty as keyof typeof difficultyColors]}`}>\n                      {selectedTemplate.difficulty}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              {selectedTemplate.instructions && (\n                <div className=\"bg-blue-50 dark:bg-blue-950/30 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold mb-2 flex items-center\">\n                    <i className=\"fas fa-info-circle mr-2 text-blue-600\"></i>\n                    Setup Instructions\n                  </h4>\n                  <ScrollArea className=\"h-32\">\n                    <pre className=\"text-sm whitespace-pre-wrap text-muted-foreground\">\n                      {selectedTemplate.instructions}\n                    </pre>\n                  </ScrollArea>\n                </div>\n              )}\n            </div>\n          )}\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowGenerateDialog(false)}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleGenerateProject} \n              disabled={!projectName.trim() || generateProjectMutation.isPending}\n              data-testid=\"button-generate-confirm\"\n            >\n              {generateProjectMutation.isPending ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Generating...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-rocket mr-2\"></i>\n                  Generate Project\n                </>\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":14094},"generated-projects/3639fe65-b4d1-4706-b15a-8d5662d435b7/README.md":{"content":"# my-react-app--9BPFx\n\nModern React application with TypeScript, Vite, and Tailwind CSS\n\n## Generated from Template: React TypeScript App\n\n**Difficulty:** beginner\n**Estimated Setup Time:** 30 minutes\n\n## Tech Stack\n\n**Frontend:** React, TypeScript, Vite, Tailwind CSS\n**Tools:** ESLint, Prettier\n\n## Setup Instructions\n\n1. Run 'npm install' to install dependencies\n2. Run 'npm run dev' to start development server\n3. Open http://localhost:5173 in your browser\n4. Start editing src/App.tsx to build your application\n\n## Dependencies\n\n```json\n{\n  \"react\": \"^18.2.0\",\n  \"react-dom\": \"^18.2.0\"\n}\n```\n\n## Project Structure\n\nThis project was generated with the following file structure:\n\n- `package.json` (config)\n- `src/App.tsx` (component)\n- `src/main.tsx` (entry)\n- `src/index.css` (styles)\n- `index.html` (markup)\n\n---\n\nGenerated on 2025-09-28T01:29:01.827Z using AI Assistant Studio\n","size_bytes":883},"generated-projects/3639fe65-b4d1-4706-b15a-8d5662d435b7/src/App.tsx":{"content":"import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div className=\"max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden\">\n        <div className=\"p-8\">\n          <div className=\"uppercase tracking-wide text-sm text-indigo-500 font-semibold\">\n            React TypeScript App\n          </div>\n          <h1 className=\"mt-2 text-xl leading-tight font-medium text-black\">\n            Welcome to your new project!\n          </h1>\n          <p className=\"mt-2 text-gray-500\">\n            This is a modern React application built with TypeScript and Tailwind CSS.\n            Start building amazing things!\n          </p>\n          <div className=\"mt-4\">\n            <button className=\"bg-indigo-500 text-white px-4 py-2 rounded hover:bg-indigo-600 transition-colors\">\n              Get Started\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","size_bytes":1014},"generated-projects/3639fe65-b4d1-4706-b15a-8d5662d435b7/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;","size_bytes":58},"generated-projects/3639fe65-b4d1-4706-b15a-8d5662d435b7/src/main.tsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)","size_bytes":235},"generated-projects/8673c571-474e-4b93-be2f-21212df39fb9/README.md":{"content":"# my-react-app-ozRtNi\n\nModern React application with TypeScript, Vite, and Tailwind CSS\n\n## Generated from Template: React TypeScript App\n\n**Difficulty:** beginner\n**Estimated Setup Time:** 30 minutes\n\n## Tech Stack\n\n**Frontend:** React, TypeScript, Vite, Tailwind CSS\n**Tools:** ESLint, Prettier\n\n## Setup Instructions\n\n1. Run 'npm install' to install dependencies\n2. Run 'npm run dev' to start development server\n3. Open http://localhost:5173 in your browser\n4. Start editing src/App.tsx to build your application\n\n## Dependencies\n\n```json\n{\n  \"react\": \"^18.2.0\",\n  \"react-dom\": \"^18.2.0\"\n}\n```\n\n## Project Structure\n\nThis project was generated with the following file structure:\n\n- `package.json` (config)\n- `src/App.tsx` (component)\n- `src/main.tsx` (entry)\n- `src/index.css` (styles)\n- `index.html` (markup)\n\n---\n\nGenerated on 2025-09-28T01:29:31.327Z using AI Assistant Studio\n","size_bytes":883},"generated-projects/8673c571-474e-4b93-be2f-21212df39fb9/src/App.tsx":{"content":"import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div className=\"max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden\">\n        <div className=\"p-8\">\n          <div className=\"uppercase tracking-wide text-sm text-indigo-500 font-semibold\">\n            React TypeScript App\n          </div>\n          <h1 className=\"mt-2 text-xl leading-tight font-medium text-black\">\n            Welcome to your new project!\n          </h1>\n          <p className=\"mt-2 text-gray-500\">\n            This is a modern React application built with TypeScript and Tailwind CSS.\n            Start building amazing things!\n          </p>\n          <div className=\"mt-4\">\n            <button className=\"bg-indigo-500 text-white px-4 py-2 rounded hover:bg-indigo-600 transition-colors\">\n              Get Started\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","size_bytes":1014},"generated-projects/8673c571-474e-4b93-be2f-21212df39fb9/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;","size_bytes":58},"generated-projects/8673c571-474e-4b93-be2f-21212df39fb9/src/main.tsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)","size_bytes":235},"generated-projects/9440dc73-0308-4b47-b255-1f9295bdc2cc/README.md":{"content":"# my-react-app-gH3SZM\n\nModern React application with TypeScript, Vite, and Tailwind CSS\n\n## Generated from Template: React TypeScript App\n\n**Difficulty:** beginner\n**Estimated Setup Time:** 30 minutes\n\n## Tech Stack\n\n**Frontend:** React, TypeScript, Vite, Tailwind CSS\n**Tools:** ESLint, Prettier\n\n## Setup Instructions\n\n1. Run 'npm install' to install dependencies\n2. Run 'npm run dev' to start development server\n3. Open http://localhost:5173 in your browser\n4. Start editing src/App.tsx to build your application\n\n## Dependencies\n\n```json\n{\n  \"react\": \"^18.2.0\",\n  \"react-dom\": \"^18.2.0\"\n}\n```\n\n## Project Structure\n\nThis project was generated with the following file structure:\n\n- `package.json` (config)\n- `src/App.tsx` (component)\n- `src/main.tsx` (entry)\n- `src/index.css` (styles)\n- `index.html` (markup)\n\n---\n\nGenerated on 2025-09-28T01:29:43.664Z using AI Assistant Studio\n","size_bytes":883},"generated-projects/9440dc73-0308-4b47-b255-1f9295bdc2cc/src/App.tsx":{"content":"import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div className=\"max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden\">\n        <div className=\"p-8\">\n          <div className=\"uppercase tracking-wide text-sm text-indigo-500 font-semibold\">\n            React TypeScript App\n          </div>\n          <h1 className=\"mt-2 text-xl leading-tight font-medium text-black\">\n            Welcome to your new project!\n          </h1>\n          <p className=\"mt-2 text-gray-500\">\n            This is a modern React application built with TypeScript and Tailwind CSS.\n            Start building amazing things!\n          </p>\n          <div className=\"mt-4\">\n            <button className=\"bg-indigo-500 text-white px-4 py-2 rounded hover:bg-indigo-600 transition-colors\">\n              Get Started\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","size_bytes":1014},"generated-projects/9440dc73-0308-4b47-b255-1f9295bdc2cc/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;","size_bytes":58},"generated-projects/9440dc73-0308-4b47-b255-1f9295bdc2cc/src/main.tsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)","size_bytes":235},"server/services/project-generator.ts":{"content":"import { promises as fs, createWriteStream } from 'fs';\nimport path from 'path';\nimport archiver from 'archiver';\nimport { storage } from '../storage';\nimport type { ProjectTemplate, Project } from '@shared/schema';\n\n// Security utility to validate and sanitize file paths\nfunction sanitizeFilePath(filePath: string, projectPath: string): string {\n  // Normalize the file path to prevent directory traversal\n  const normalized = path.normalize(filePath);\n  \n  // Reject absolute paths\n  if (path.isAbsolute(normalized)) {\n    throw new Error(`Absolute paths are not allowed: ${filePath}`);\n  }\n  \n  // Reject paths with .. segments that could escape the project directory\n  if (normalized.includes('..')) {\n    throw new Error(`Path traversal detected: ${filePath}`);\n  }\n  \n  // Resolve the full target path\n  const targetPath = path.join(projectPath, normalized);\n  \n  // Ensure the target path is within the project directory\n  const relativePath = path.relative(projectPath, targetPath);\n  if (relativePath.startsWith('..') || path.isAbsolute(relativePath)) {\n    throw new Error(`Path escapes project directory: ${filePath}`);\n  }\n  \n  return targetPath;\n}\n\ninterface GeneratedProject {\n  project: Project;\n  filesPath: string;\n  zipPath: string;\n  downloadUrl: string;\n}\n\nexport class ProjectGeneratorService {\n  private readonly baseOutputPath = path.join(process.cwd(), 'generated-projects');\n\n  constructor() {\n    this.ensureOutputDirectory();\n  }\n\n  private async ensureOutputDirectory(): Promise<void> {\n    try {\n      await fs.mkdir(this.baseOutputPath, { recursive: true });\n    } catch (error) {\n      console.error('Failed to create output directory:', error);\n    }\n  }\n\n  async generateProjectFromTemplate(\n    templateId: string,\n    projectName: string,\n    description: string,\n    userId: string\n  ): Promise<GeneratedProject> {\n    const template = await storage.getProjectTemplate(templateId);\n    if (!template) {\n      throw new Error('Template not found');\n    }\n\n    // Create project record in database\n    const project = await storage.createProject({\n      userId,\n      name: projectName || template.name,\n      description: description || template.description,\n      status: 'active',\n      metadata: {\n        templateId: template.id,\n        techStack: template.techStack,\n        generatedAt: new Date().toISOString(),\n        templateName: template.name\n      }\n    });\n\n    // Generate files on disk\n    const projectPath = path.join(this.baseOutputPath, project.id);\n    await this.createProjectFiles(projectPath, template, projectName);\n\n    // Create zip archive\n    const zipPath = path.join(this.baseOutputPath, `${project.id}.zip`);\n    await this.createZipArchive(projectPath, zipPath);\n\n    return {\n      project,\n      filesPath: projectPath,\n      zipPath,\n      downloadUrl: `/api/download/project/${project.id}`\n    };\n  }\n\n  private async createProjectFiles(\n    projectPath: string,\n    template: ProjectTemplate,\n    projectName: string\n  ): Promise<void> {\n    // Ensure project directory exists\n    await fs.mkdir(projectPath, { recursive: true });\n\n    const files = template.files as Array<{\n      path: string;\n      content: string;\n      type: string;\n    }>;\n\n    for (const file of files) {\n      // Sanitize file path to prevent directory traversal attacks\n      const filePath = sanitizeFilePath(file.path, projectPath);\n      const fileDir = path.dirname(filePath);\n\n      // Ensure directory structure exists\n      await fs.mkdir(fileDir, { recursive: true });\n\n      // Replace template variables in content\n      let content = file.content;\n      content = content.replace(/\\{\\{projectName\\}\\}/g, projectName);\n      content = content.replace(/\\{\\{PROJECT_NAME\\}\\}/g, projectName);\n      \n      // For package.json, update the name field\n      if (file.path === 'package.json') {\n        try {\n          const packageJson = JSON.parse(content);\n          packageJson.name = projectName.toLowerCase().replace(/\\s+/g, '-');\n          content = JSON.stringify(packageJson, null, 2);\n        } catch (error) {\n          console.warn('Failed to parse package.json template:', error);\n        }\n      }\n\n      // Write file to disk\n      await fs.writeFile(filePath, content, 'utf8');\n    }\n\n    // Create README.md with instructions\n    const readmeContent = this.generateReadme(template, projectName);\n    await fs.writeFile(path.join(projectPath, 'README.md'), readmeContent, 'utf8');\n\n    console.log(`Generated project files for ${projectName} at ${projectPath}`);\n  }\n\n  private async createZipArchive(projectPath: string, zipPath: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const output = createWriteStream(zipPath);\n      const archive = archiver('zip', { zlib: { level: 9 } });\n\n      output.on('close', () => resolve());\n      archive.on('error', (err) => reject(err));\n\n      archive.pipe(output);\n      archive.directory(projectPath, false);\n      archive.finalize();\n    });\n  }\n\n  private generateReadme(template: ProjectTemplate, projectName: string): string {\n    return `# ${projectName}\n\n${template.description}\n\n## Generated from Template: ${template.name}\n\n**Difficulty:** ${template.difficulty}\n${template.estimatedTime ? `**Estimated Setup Time:** ${template.estimatedTime}` : ''}\n\n## Tech Stack\n\n${this.formatTechStack(template.techStack)}\n\n## Setup Instructions\n\n${template.instructions || 'No specific setup instructions provided.'}\n\n## Dependencies\n\n${template.dependencies ? '```json\\n' + JSON.stringify(template.dependencies, null, 2) + '\\n```' : 'No dependencies specified.'}\n\n## Project Structure\n\nThis project was generated with the following file structure:\n\n${this.generateFileTree(template.files as Array<{path: string, type: string}>)}\n\n---\n\nGenerated on ${new Date().toISOString()} using AI Assistant Studio\n`;\n  }\n\n  private formatTechStack(techStack: any): string {\n    if (!techStack) return 'No tech stack specified.';\n\n    const sections = [];\n    if (techStack.frontend?.length) {\n      sections.push(`**Frontend:** ${techStack.frontend.join(', ')}`);\n    }\n    if (techStack.backend?.length) {\n      sections.push(`**Backend:** ${techStack.backend.join(', ')}`);\n    }\n    if (techStack.database?.length) {\n      sections.push(`**Database:** ${techStack.database.join(', ')}`);\n    }\n    if (techStack.tools?.length) {\n      sections.push(`**Tools:** ${techStack.tools.join(', ')}`);\n    }\n\n    return sections.join('\\n');\n  }\n\n  private generateFileTree(files: Array<{path: string, type: string}>): string {\n    return files\n      .map(file => `- \\`${file.path}\\` (${file.type})`)\n      .join('\\n');\n  }\n\n  async getProjectDownload(projectId: string): Promise<string | null> {\n    // Validate project ID format (should be UUID)\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    if (!uuidRegex.test(projectId)) {\n      throw new Error(`Invalid project ID format: ${projectId}`);\n    }\n\n    const zipPath = path.join(this.baseOutputPath, `${projectId}.zip`);\n    \n    // Ensure the resolved path is within the base output directory\n    const relativePath = path.relative(this.baseOutputPath, zipPath);\n    if (relativePath.startsWith('..') || path.isAbsolute(relativePath)) {\n      throw new Error(`Project ID escapes base directory: ${projectId}`);\n    }\n    \n    try {\n      await fs.access(zipPath);\n      return zipPath;\n    } catch {\n      return null;\n    }\n  }\n\n  async cleanupProject(projectId: string): Promise<void> {\n    const projectPath = path.join(this.baseOutputPath, projectId);\n    const zipPath = path.join(this.baseOutputPath, `${projectId}.zip`);\n\n    try {\n      await fs.rm(projectPath, { recursive: true, force: true });\n      await fs.rm(zipPath, { force: true });\n    } catch (error) {\n      console.error(`Failed to cleanup project ${projectId}:`, error);\n    }\n  }\n}","size_bytes":7876}},"version":1}